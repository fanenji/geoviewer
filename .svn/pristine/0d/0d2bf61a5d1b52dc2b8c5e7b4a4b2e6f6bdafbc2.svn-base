
Ext.define('CWN2.MapCatalogueLoader', {
    singleton: true,

    loadRequest: function(response, findOptions) {
        var agRequest = response.data;
        var mapConfig = agRequest.map;
        // memorizzo i dati della richiesta nella configurazione
        CWN2.app.configuration.agRequest = agRequest;
        // gestione find
        if (agRequest.valori.length > 0) {
            // impostazione findOptions
            var values = [];
            Ext.each(agRequest.valori, function(valore) {
                if (valore.valorePkAlfa) {
                    values.push(valore.valorePkAlfa);
                }
            });
            if (values.length > 0) {
                // unisco eventuali findOptions da initOptions (per esempio maxZoomLevel) con quelle della richiesta
                findOptions = findOptions || {};
                var layers = [];
                Ext.each(agRequest.livelli, function(livello) {
                    layers.push(livello.codiceLivello);
                });
                Ext.apply(findOptions, {
                    flagFindQuery: agRequest.flagFindQuery,
                    layers: layers,
                    fields: agRequest.livelli[0].nomeFkVersoAlfa,
                    values: values,
                    tipoFind: agRequest.tipoFind,
                    bounds: agRequest.bounds
                });
            }
            // gestione find per coordinate
            if (agRequest.valori[0].longitudine && agRequest.valori[0].latitudine) {
                CWN2.FeatureLoader.loadMarker({
                    x: agRequest.valori[0].longitudine,
                    y: agRequest.valori[0].latitudine,
                    map: CWN2.app.map,
                    zoomLevel: 14,
                    zoom: true,
                    epsgCode: "EPSG:3003"
                });
            }
        }
        // gestione modalità (bottoniera)
        if (agRequest.modalita && agRequest.modalita !== 'GENERICA') {
            var buttons = CWN2.app.configuration.application.layout.ag_toolbar[agRequest.modalita];
            if (!buttons) {
                CWN2.Util.handleException({
                    message: "Configurazione bottoni per modalità " + agRequest.modalita + " non presente",
                    level: 1
                });
                return;
            }
            Ext.each(buttons, function(button) {
                if (button.options && button.options.preProcessing && typeof(button.options.preProcessing) === "function" ) {
                    button.options.preProcessing(button,agRequest);
                }
                CWN2.app.layout.mapPanel.toolbar.addButton(button);
            });
        }
        return {mapConfig: mapConfig, findOptions: findOptions};
    },

    loadMap: function(initOptions) {
        var me = this,
            idMap = initOptions.idMap,
            idRequest = initOptions.idRequest,
            findOptions = initOptions.findOptions,
            loadBaseLayers = initOptions.loadBaseLayers,
            flagGeoserver = initOptions.flagGeoserver;

        var layerConfigService = (idRequest) ? CWN2.Globals.RL_AG_REQUEST_CONFIG_SERVICE + idRequest  + "?map_projection=" + CWN2.app.map.projection : CWN2.Globals.RL_MAP_CONFIG_SERVICE + idMap + "?param=value";

        if (loadBaseLayers) {
            layerConfigService += "&loadBaseLayers=true";
        }

        if (flagGeoserver) {
            layerConfigService += "&geoserver=true";
        }

        var setExtent = function(mapConfig) {
            var transformedExtent = (mapConfig.projection !== CWN2.app.map.projection) ? CWN2.Util.transformStrBounds(mapConfig.projection, CWN2.app.map.projection, mapConfig.extent): mapConfig.extent;
            var bounds = transformedExtent.split(',');
            CWN2.app.map.zoomToExtent(bounds);
        };

        CWN2.Util.ajaxRequest({
            type: "JSON",
            url: layerConfigService,
            callBack: function(response) {
                var mapConfig,
                    agRequest;
                if (idRequest) {
                    var req = me.loadRequest(response, findOptions);
                    mapConfig = req.mapConfig;
                    findOptions = req.findOptions;
                } else {
                    mapConfig = response.data;
                }
                // imposto il titolo
                if (initOptions.setMapTitle) {
                    var titleEl = Ext.fly(initOptions.setMapTitle);
                    if (titleEl) {
                        titleEl.update(mapConfig.name)
                    }
                } else {
                    CWN2.app.layout.setMapTitle(mapConfig.name);
                }
                CWN2.app.layout.mapTitle = mapConfig.name;
                // aggiungo i layer
                CWN2.app.map.layerManager.addLayers(mapConfig.layers);
                // imposto extent
                if (mapConfig.extent) {
                    setExtent(mapConfig);
                } else {
                    CWN2.app.map.zoomToInitialExtent()
                }
                // se tipo mappa è raster imposto lo sfondo bianco
                if (mapConfig.type && mapConfig.type == "R") {
                    CWN2.app.map.setBaseLayerOnMap("no_base");
                }
                // se configurata find la effettuo
                if ((findOptions && findOptions.values && findOptions.values !== "null") || (findOptions && findOptions.sldFilter)) {
                    findOptions.setInitialExtent = true;
                    me.findWMS(findOptions);
                }
                // richiamo eventuale callback
                CWN2.app.callback(initOptions);
            }
        });

    },

    loadLayers: function(initOptions) {
        var idLayer = initOptions.idLayer,
            me = this,
            findOptions = initOptions.findOptions;

        if (!idLayer || idLayer === "null") {
            var exception = {};
            exception.message = "manca parametro layer";
            exception.level = 1;
            CWN2.Util.handleException(exception);
            return;
        }

        var layerConfigService = CWN2.Globals.RL_LAYER_CONFIG_SERVICE + idLayer;

        CWN2.Util.ajaxRequest({
            type: "JSONP",
            url: layerConfigService,
            callBack: function(response) {
                var layerConfig = response.data;
                if (initOptions.sldUrl) {
                    layerConfig[0].wmsParams.SLD = initOptions.sldUrl;
                }
                CWN2.app.map.layerManager.addLayers(layerConfig);
                // se configurata find la effettuo
                if (findOptions) {
                    if ((findOptions.idList && findOptions.idList !== "null") || (findOptions.sldFilter)) {
                        findOptions.setInitialExtent = true;
                        me.findWMS(findOptions);
                    } else {
                        exception = {};
                        exception.message = "Lista valori find non impostata";
                        exception.level = 0;
                        CWN2.Util.handleException(exception);
                    }
                }
                // richiamo eventuale callback
                CWN2.app.callback(initOptions);
            }
        });

    },

    /**
     *
     * Function: findWMS
     *
     * Effettua una find con evidenziazione su layer WMS
     *
     *
     * Parameters:
     * findOptions - {Object} Oggetto di configurazione dell'hilite
     *  - layerName - {String} Nome del layer
     *  - idField - {String} Nome del campo ID su cui fare il filtro
     *  - idList - {String} Lista dei valori separati da virgola
     *  - zoomLevel - {String} Livello di zoom massimo
     *  - bounds - {OpenLayers.Bounds} Bounds per find
     *
     */
    findWMS: function(findOptions) {
        var layers = findOptions.layers,
            me = this;

        var missingLayerConfig = [];
        Ext.each(layers, function(layerName) {
            if (!CWN2.app.map.layerManager.isLayerInConfig(layerName)) {
                missingLayerConfig.push(layerName.replace("L",""));
            }
        });
        if (missingLayerConfig.length === 0) {
            var layerConfig = CWN2.app.map.layerManager.getLayerConfigByName(layers[0])
            me.findLayer(findOptions,layerConfig);
        } else {
            CWN2.Util.ajaxRequest({
                type: "JSONP",
                url: CWN2.Globals.RL_LAYER_CONFIG_SERVICE + missingLayerConfig.join(","),
                callBack: function(response) {
                    var layerConfig = response.data[0];
                    me.findLayer(findOptions,layerConfig);
                }
            });
        }
    },

    findLayer: function find(findOptions,layerConfig) {
        var me = this;
        if (!Ext.isArray(findOptions.values)) {
            findOptions.values = [findOptions.values];
        }

        if (!findOptions.sldFilter) {
            findOptions.sldFilter = this.buildSldFilter(findOptions);
        }

        // funzione di callback richiamata da Util.getWFSBound
        var hiliteFeature = function(bounds) {
            if (findOptions.flagFindQuery === "QUERY") {
                me.hiliteFeatureQuery(findOptions,bounds);
            } else {
                me.hiliteFeatureFind(findOptions,bounds);
            }
        };

        // se ho già il bounds faccio hilitefeature altrimenti prendo bound da servizio WFS
        if (findOptions.bounds) {
            var bounds = (typeof findOptions.bounds === "string") ? OpenLayers.Bounds.fromString(findOptions.bounds) : findOptions.bounds;
            hiliteFeature(bounds);
        } else {
            //TODO: NOTA getWFSBound funziona solo per find su singolo layer
            var typeName = findOptions.layers[0];

            var bounds = this.getWFSBound({
                wfsUrl: CWN2.Globals.proxy + layerConfig.wmsParams.url + "VERSION=1.0.0&SERVICE=WFS&REQUEST=GetFeature&TYPENAME=" + typeName + "&Filter=" + findOptions.sldFilter,
                callback: hiliteFeature
            });
        }
    },

    buildSldFilter: function (findOptions) {
        if (!findOptions.values || findOptions.values === "null") {
            var exception = {};
            exception.message = "manca parametro values";
            exception.level = 0;
            CWN2.Util.handleException(exception);
            return;
        }
        // creo il filtro sld
        return CWN2.WmsSldHiliter.getFilter(findOptions.fields,findOptions.values);
    },

    hiliteFeatureFind: function(findOptions,bounds) {
        var hilite = new CWN2.WmsSldHiliter(CWN2.app.map, "_findWMS").hiliteFeature({
            layers: findOptions.layers,
            fields: findOptions.fields,
            values: findOptions.values,
            sldFilter: findOptions.sldFilter,
            bounds: bounds,
            zoomLevel: findOptions.zoomLevel,
            maxZoomLevel: findOptions.maxZoomLevel,
            callback: function() {
                if (findOptions.setInitialExtent) {
                    CWN2.app.map.initialExtent = CWN2.app.map.getExtent();
                }
            }
        });
    },

    hiliteFeatureQuery: function(findOptions,bounds) {
        var geomType = [];
        Ext.each(findOptions.layers, function(layer) {
            geomType.push(CWN2.app.map.layerManager.getFieldFromLayerConfig(layer,"geomSubType"));
        });
        //TODO: gestione stile del layer con Geoserver
        var sldBody = (((findOptions.fields && findOptions.values && findOptions.values.length > 0) || findOptions.sldFilter) && geomType.length > 0) ?
            CWN2.WmsSldHiliter.getStyle({
                layers: findOptions.layers,
                geomType: geomType,
                fields: findOptions.fields,
                values: findOptions.values,
                sldFilter: findOptions.sldFilter
            }) :
            null;
        var sldCleanBody = CWN2.WmsSldHiliter.getStyle({
            layers: findOptions.layers,
            geomType: geomType,
            fields: findOptions.fields,
            values: null,
            sldFilter: null
        });
        // creo il file sld e imposto il parametro sld dei layer oggetto di query
        CWN2.WmsSldHiliter.createSldFile(sldBody,sldCleanBody, function (response) {
            Ext.each(findOptions.layers, function(layer) {
                CWN2.app.map.layerManager.applyWmsParam(layer,"sld",response.data.sldUrl)
            });
        });
        var maxZoomLevel = findOptions.maxZoomLevel || 18;
        CWN2.WmsSldHiliter.zoomToFeatures(bounds,findOptions.zoomLevel,maxZoomLevel);

    },

    /**
     * Function: getWFSBound
     *
     * Ritorna il bound degli elementi attraverso un servizio WFS
     *
     * Parameters:
     * wfsUrl - {string} URL del servizio WFS
     * typeName - {string} nome della feature
     * sldFilter - {string} Filtro SLD
     * callback - {Function} Funzione di callback da richiamare
     *
     * Returns:
     * {OpenLayers.Bound}
     *
     */
    getWFSBound: function(initOptions) {
        // URL di prova http://localhost:8080/geoservices/proxy/proxy.jsp?url=http://www.cartografiarl.regione.liguria.it/mapserver/mapserv.exe?MAP=E:/progetti/mapfiles/repertoriocartografico/CONFINI/56.map&VERSION=1.0.0&SERVICE=WFS&REQUEST=GetFeature&TYPENAME=L3&Filter=%3CFilter%3E%3COr%3E%3CPropertyIsEqualTo%3E%3CPropertyName%3EID%3C/PropertyName%3E%3CLiteral%3E30%3C/Literal%3E%3C/PropertyIsEqualTo%3E%3CPropertyIsEqualTo%3E%3CPropertyName%3EID%3C/PropertyName%3E%3CLiteral%3E31%3C/Literal%3E%3C/PropertyIsEqualTo%3E%3C/Or%3E%3C/Filter%3E
        var wfsUrl = initOptions.wfsUrl;
        var callback = initOptions.callback;
        CWN2.loadingScreen = Ext.getBody().mask('Interrogazione WFS', 'loadingscreen');

        CWN2.Util.ajaxRequest({
            type: "XML",
            url: wfsUrl,
            callBack: function(xml) {
                var serviceException,boundedBy,bbox,coordinates,srs;
                if (Ext.isIE) {
                    // gestione service exception
                    serviceException = Ext.DomQuery.selectValue('ServiceException', xml);
                    if (serviceException) {
                        CWN2.Util.handleException({
                            message: "CWN2.Util.getWFSBound - Service Exception: " + serviceException,
                            level: 2
                        });
                        return;
                    }
                    // calcolo bounds
                    boundedBy = xml.childNodes[1].firstChild;
                    if (!boundedBy) {
                        CWN2.Util.handleException({
                            message: "CWN2.Util.getWFSBound - bbox non ritornato dal servizio ",
                            level: 2
                        });
                    }
                    bbox = boundedBy.firstChild;
                    if (!bbox) {  // Gestione not found
                        CWN2.Util.handleException({
                            message: "CWN2.Util.getWFSBound - elemento non trovato ",
                            level: 2
                        });
                        return;
                    }
                    coordinates = (bbox.firstChild && bbox.firstChild.firstChild) ? bbox.firstChild.firstChild.data : null;
                    if (!coordinates) {  // Gestione not found
                        CWN2.Util.handleException({
                            message: "CWN2.Util.getWFSBound - elemento non trovato ",
                            level: 2
                        });
                        return;
                    }
                    srs = (bbox.attributes) ? bbox.attributes[0].text : null;
                } else {
                    // gestione service exception
                    serviceException = Ext.DomQuery.selectValue('ServiceException', xml);
                    if (serviceException) {
                        CWN2.Util.handleException({
                            message: "CWN2.getWFSBound - Service Exception: " + serviceException,
                            level: 2
                        });
                        return;
                    }
                    // calcolo bounds
                    boundedBy = Ext.DomQuery.select('gml|boundedBy', xml)[0];
                    if (!boundedBy) {
                        CWN2.Util.handleException({
                            message: "CWN2.getWFSBound - elemento non trovato ",
                            level: 2
                        });
                        return;
                    }
                    bbox = Ext.DomQuery.select('gml|Box', boundedBy)[0];
                    if (!bbox) {
                        CWN2.Util.handleException({
                            message: "CWN2.getWFSBound - elemento non trovato ",
                            level: 2
                        });
                        return;
                    }
                    coordinates = Ext.DomQuery.selectValue('gml|coordinates', bbox);
                    if (!coordinates) {
                        CWN2.Util.handleException({
                            message: "CWN2.getWFSBound - elemento non trovato ",
                            level: 2
                        });
                        return;
                    }
                    srs = Ext.DomQuery.selectValue('gml|Box/@srsName', boundedBy);
                }

                if (coordinates && srs) {
                    var bounds = (srs !== CWN2.app.map.projection) ?
                        OpenLayers.Bounds.fromString(CWN2.Util.transformStrBounds(srs, CWN2.app.map.projection, coordinates.replace(" ", ","))) :
                        OpenLayers.Bounds.fromString(coordinates.replace(" ", ","));
                    callback(bounds);
                }
            }
        });
    }
});

