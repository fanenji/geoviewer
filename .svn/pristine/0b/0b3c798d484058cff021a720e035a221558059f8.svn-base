/*
 *
 * Class: CWN2.Control.DeleteFeature
 *
 * Controllo OpenLayers Custom che permette di cancellare feature sulla mappa.
 *
 *
 */

/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/

CWN2.Control.DeleteFeature = OpenLayers.Class(OpenLayers.Control.SelectFeature, {

    /**
     *
     * Constructor: CWN2.Control.DeleteFeature
     * Costruttore
     *
     * Parameters:
     * layer - {<OpenLayers.Layer.Vector>} Points will be added to this layer.
     * options - {Object} An optional object whose properties will be used
     *     to extend the control.
     *
     */
    initialize: function(layer, options) {

        var deleteControl = this;

        function showConfirmDialog(feature) {
            Ext.MessageBox.confirm(
                CWN2.I18n.get('Conferma'),
                CWN2.I18n.get('Sei sicuro di voler cancellare la feature?'),
                function(btn) {
                    if (btn === "yes") {
                        layer.destroyFeatures([feature]);
                    } else {
                        deleteControl.unselect(feature);
                    }
                }
            );
        }

        OpenLayers.Control.SelectFeature.prototype.initialize.apply(this,
            [layer, {onSelect: showConfirmDialog}]);

    },

    CLASS_NAME: "CWN2.Control.DrawPoint"

});
/*
 *
 * Class: CWN2.Control.DrawLine
 *
 * Controllo OpenLayers Custom che permette di disegnare linee sulla mappa.
 *
 *
 */

/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/

CWN2.Control.DrawLine = OpenLayers.Class(OpenLayers.Control.DrawFeature, {

    // flag singleGeometry se impostato a true permette l'inserimento di una sola geometria
    singleFeature: false,

    /**
     *
     * Constructor: CWN2.Control.DrawPoint
     * Costruttore
     *
     * Parameters:
     * layer - {<OpenLayers.Layer.Vector>} Points will be added to this layer.
     * options - {Object} An optional object whose properties will be used
     *     to extend the control.
     *
     */
    initialize: function(layer, options) {

        OpenLayers.Control.DrawFeature.prototype.initialize.apply(this,
            [layer, OpenLayers.Handler.Path, options]);

        if (options && options.singleFeature) {
            this.singleFeature = true;
        }

    },

    /**
     *
     * Function: activate
     * Attiva il controllo, nel parametro params vengono impostati eventuali parametri da passare
     * alla funzione di callback
     *
     * Parameters:
     * params {Object} Oggetto contenente i parametri
     * da passare alla funzione di callback
     *
     */
    activate: function(params) {

        /*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
        "use strict";

        this.params = params;

        return OpenLayers.Control.prototype.activate.apply(this, arguments);

    },

    /**
     * Method: draw point
     */
    drawFeature: function(geometry) {
        var feature = new OpenLayers.Feature.Vector(geometry),
            proceed = this.layer.events.triggerEvent('sketchcomplete', {feature: feature});
        if (proceed !== false) {
            // se impostato singleGeometry rimuovo le feature
            if (this.singleFeature) {
                this.layer.removeAllFeatures();
            }
            feature.state = OpenLayers.State.INSERT;
            this.layer.addFeatures([feature]);
            this.featureAdded(feature);
            this.events.triggerEvent('featureadded', {feature: feature});
        }
    },

    CLASS_NAME: "CWN2.Control.DrawLine"

});
/*
 *
 * Class: CWN2.Control.DrawPoint
 *
 * Controllo OpenLayers Custom che permette di disegnare punti sulla mappa.
 *
 *
 */

/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/

CWN2.Control.DrawPoint = OpenLayers.Class(OpenLayers.Control.DrawFeature, {

    // flag singleGeometry se impostato a true permette l'inserimento di una sola geometria
    singleFeature: false,

    // funzione di callback da richiamare dopo ogni inserimento
    callback: null,

    /**
     *
     * Constructor: CWN2.Control.DrawPoint
     * Costruttore
     *
     * Parameters:
     * layer - {<OpenLayers.Layer.Vector>} Points will be added to this layer.
     * options - {Object} An optional object whose properties will be used
     *     to extend the control.
     *
     */
    initialize: function(layer, options) {

        options.id = "cwn2-control-drawpoint";

        OpenLayers.Control.DrawFeature.prototype.initialize.apply(this,
            [layer, OpenLayers.Handler.Point, options]);

        if (options && options.singleFeature) {
            this.singleFeature = true;
        }
        if (options && options.callback) {
            this.callback = options.callback;
        }

    },

    /**
     *
     * Function: activate
     * Attiva il controllo, nel parametro params vengono impostati eventuali parametri da passare
     * alla funzione di callback
     *
     * Parameters:
     * params {Object} Oggetto contenente i parametri
     * da passare alla funzione di callback
     *
     */
    activate: function(params) {

        /*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
        "use strict";

        this.params = params;

        return OpenLayers.Control.prototype.activate.apply(this, arguments);

    },

    /**
     * Method: draw point
     */
    drawFeature: function(geometry) {
        var feature = new OpenLayers.Feature.Vector(geometry),
            proceed = this.layer.events.triggerEvent('sketchcomplete', {feature: feature});
        if (proceed !== false) {
            // se impostato singleGeometry rimuovo le feature
            if (this.singleFeature) {
                this.layer.removeAllFeatures();
            }
            feature.state = OpenLayers.State.INSERT;
            this.layer.addFeatures([feature]);
            this.featureAdded(feature);
            this.events.triggerEvent('featureadded', {feature: feature});
        }
    },

    CLASS_NAME: "CWN2.Control.DrawPoint"

});
/*
 *
 * Class: CWN2.Control.DrawPolygon
 *
 * Controllo OpenLayers Custom che permette di disegnare polugoni sulla mappa.
 *
 *
 */

/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/

CWN2.Control.DrawPolygon = OpenLayers.Class(OpenLayers.Control.DrawFeature, {

    // flag singleGeometry se impostato a true permette l'inserimento di una sola geometria
    singleFeature: false,

    /**
     *
     * Constructor: CWN2.Control.DrawPoint
     * Costruttore
     *
     * Parameters:
     * layer - {<OpenLayers.Layer.Vector>} Points will be added to this layer.
     * options - {Object} An optional object whose properties will be used
     *     to extend the control.
     *
     */
    initialize: function(layer, options) {

        OpenLayers.Control.DrawFeature.prototype.initialize.apply(this,
            [layer, OpenLayers.Handler.Polygon, options]);

        if (options && options.singleFeature) {
            this.singleFeature = true;
        }

    },

    /**
     *
     * Function: activate
     * Attiva il controllo, nel parametro params vengono impostati eventuali parametri da passare
     * alla funzione di callback
     *
     * Parameters:
     * params {Object} Oggetto contenente i parametri
     * da passare alla funzione di callback
     *
     */
    activate: function(params) {

        /*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
        "use strict";

        this.params = params;

        return OpenLayers.Control.prototype.activate.apply(this, arguments);

    },

    /**
     * Method: draw point
     */
    drawFeature: function(geometry) {
        var feature = new OpenLayers.Feature.Vector(geometry),
            proceed = this.layer.events.triggerEvent('sketchcomplete', {feature: feature});

        if (proceed !== false) {
            // se impostato singleGeometry rimuovo le feature
            if (this.singleFeature) {
                this.layer.removeAllFeatures();
            }
            feature.state = OpenLayers.State.INSERT;
            this.layer.addFeatures([feature]);
            this.featureAdded(feature);
            this.events.triggerEvent('featureadded', {feature: feature});
        }
    },

    CLASS_NAME: "CWN2.Control.DrawLine"

});
/*
 *
 * Class: CWN2.Control.RegularPolygon
 *
 * Controllo OpenLayers Custom che permette di disegnare poligoni regolari sulla mappa.
 *
 *
 */

/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/

CWN2.Control.DrawRegularPolygon = OpenLayers.Class(OpenLayers.Control.DrawFeature, {

    // flag singleGeometry se impostato a true permette l'inserimento di una sola geometria
    singleFeature: false,

    /**
     *
     * Constructor: CWN2.Control.DrawPoint
     * Costruttore
     *
     * Parameters:
     * layer - {<OpenLayers.Layer.Vector>} Points will be added to this layer.
     * options - {Object} An optional object whose properties will be used
     *     to extend the control.
     *
     */
    initialize: function(layer, options) {

        // passare opzioni per handler
        // es: rettangolo
        // handlerOptions: {
        //    sides: 4,
        //    irregular: true
        // }
        OpenLayers.Control.DrawFeature.prototype.initialize.apply(this,
            [layer, OpenLayers.Handler.RegularPolygon, options]);

        if (options && options.singleFeature) {
            this.singleFeature = true;
        }

    },

    /**
     *
     * Function: activate
     * Attiva il controllo, nel parametro params vengono impostati eventuali parametri da passare
     * alla funzione di callback
     *
     * Parameters:
     * params {Object} Oggetto contenente i parametri
     * da passare alla funzione di callback
     *
     */
    activate: function(params) {

        /*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
        "use strict";

        this.params = params;

        return OpenLayers.Control.prototype.activate.apply(this, arguments);

    },

    deactivate: function(params) {

        /*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
        "use strict";

        this.params = params;

        return OpenLayers.Control.prototype.deactivate.apply(this, arguments);

    },

    /**
     * Method: draw feature
     */
    drawFeature: function(geometry) {
        var feature = new OpenLayers.Feature.Vector(geometry),
            proceed = this.layer.events.triggerEvent('sketchcomplete', {feature: feature});
        if (proceed !== false) {
            // se impostato singleGeometry rimuovo le feature
            if (this.singleFeature) {
                this.layer.removeAllFeatures();
            }
            feature.state = OpenLayers.State.INSERT;
            this.layer.addFeatures([feature]);
            this.featureAdded(feature);
            this.events.triggerEvent('featureadded', {feature: feature});
        }
    },

    CLASS_NAME: "CWN2.Control.DrawLine"

});
/*
 *
 * Class: CWN2.Control.GetMapCoordinatesOnClick
 *
 * Controllo OpenLayers Custom che permette di richiamare una funzione di callback sull evento click sulla mappa OL.
 *
 * In fase di attivazione del controllo e' possibile impostare i parametri da passare alla funzione di callback.
 *
 *  Esempio:
 *  (start code)
 *  var clickMapCtrl = new CWN2.Control.GetMapCoordinatesOnClick({
 *      callback: setPointOnMap
 *  });
 *  clickMapCtrl.activate({
 *      type: "start"
 *  });
 *  (end)
 *
 */

/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/

CWN2.Control.GetMapCoordinatesOnClick = OpenLayers.Class(OpenLayers.Control, {

    // funzione da richiamare al click
    callback: null,

    // opzioni: oggetto che viene passato alla funzione di callback
    params: {},

    /**
     *
     * Constructor: CWN2.Control.GetMapCoordinatesOnClick
     * Costruttore
     *
     * Parameters:
     * callback - {Function} funzione di callback da richiamare al click
     *
     */
    initialize: function(callback) {

        /*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
        "use strict";

        // controllo che callback sia una funzione
        try {
            CWN2.Util.assert(
                (typeof callback === "function"),
                {
                    name: "NotFunction",
                    message: "CWN2.Control.GetMapCoordinatesOnClick: parametro deve essere una funzione",
                    level: 1
                }
            );
        } catch (exception) {
            CWN2.Util.handleException(exception);
            return null;
        }

        this.callback = callback;

        OpenLayers.Control.prototype.initialize.apply(this, [callback]);

        var callbacks = {};
        callbacks["click"] = this.getInfoForClick;
        this.handler = new OpenLayers.Handler.Click(
            this,
            callbacks
        );

    },

    /**
     *
     * Function: activate
     * Attiva il controllo, nel parametro params vengono impostati eventuali parametri da passare
     * alla funzione di callback
     *
     * Parameters:
     * params {Object} Oggetto contenente i parametri
     * da passare alla funzione di callback
     *
     */
    activate: function(params) {

        /*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
        "use strict";

        this.params = params;

        return OpenLayers.Control.prototype.activate.apply(this, arguments);

    },

    // funzione richiamata al click
    // calcola le coordinate e richiama la funzione di callback passando le coordinate
    // ed eventuali parametri

    getInfoForClick: function(evt) {

        /*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
        "use strict";

        var mapCoord,
            displayCoord,
            wgs84Coord;

        mapCoord = this.map.getLonLatFromPixel(evt.xy);
        displayCoord = mapCoord.clone();
        wgs84Coord = mapCoord.clone();

        if (this.map.getProjectionObject() !== this.map.displayProjection) {
            displayCoord = displayCoord.transform(
                this.map.getProjectionObject(),
                this.map.displayProjection
            );
        }

        if (this.map.projection !== "EPSG:4326") {
            wgs84Coord = wgs84Coord.transform(
                this.map.getProjectionObject(),
                new OpenLayers.Projection("EPSG:4326")
            );
        }

        if (typeof this.callback === "function") {
            this.callback(mapCoord, displayCoord, wgs84Coord, this.params);
        }
    },

    CLASS_NAME: "CWN2.Control.GetMapCoordinatesOnClick"

});
/**
 * Class: CWN2.Control.ZoomToInitialExtent
 * The ZoomToExtent control is a button that zooms out to the initial extent
 * of the map.
 *
 * Inherits from:
 *  - <OpenLayers.Control>
 */
/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
CWN2.Control.ZoomToInitialExtent = OpenLayers.Class(OpenLayers.Control, {

    /**
     * Property: type
     * {String} The type of <OpenLayers.Control> -- When added to a
     *     <Control.Panel>, 'type' is used by the panel to determine how to
     *     handle our events.
     */
    type: OpenLayers.Control.TYPE_BUTTON,

    /*
     * Method: trigger
     * Do the zoom.
     */
    trigger: function() {
        if (this.map) {
            this.map.zoomToInitialExtent();
        }
    },

    CLASS_NAME: "OpenLayers.Control.ZoomToExtent"
});
