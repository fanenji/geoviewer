Ext.define('CWN2.button.BaseLayersCombo', {
    alias: 'widget.cwn2-combo-base-layers',

    constructor: function(config) {
        return Ext.create("CWN2.BaseLayersComboBox", {id: 'combo-base-layers'});
    }
});

Ext.define('CWN2.button.Coordinate', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-coordinate',

    constructor: function(config) {
        var btnOptions = config.options,
            id = "coordinate",
            map = CWN2.app.map,
            me = this,
            control = new CWN2.Control.DrawPoint(CWN2.Editor.createEditingLayer(map), {singleFeature: true});

        this.config = config;

        // Controllo OL
        control.events.register('featureadded', this, function(event) {
            me.fireEvent("featureadded", event);
        });
        map.addControl(control);

        // Creo il bottone
        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Coordinate Punto"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : "drawPoint",
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            control: control,
            enableToggle: true,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});

Ext.define('CWN2.button.Coordinate.Win', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-coordinate-win',
    title: ' Coordinate selezionate',
    width: 300,
    height: 120,
    layout: "fit",
    resizable: false,
    items: [
        {
            xtype: 'panel',
            id: 'cwn2-coordinate-panel',
            bodyPadding: 10
        }
    ],
    geometry: null,
    closable: false,
    fbar: [
        {
            text: CWN2.I18n.get("Conferma"),
            action: 'coordinate-submit'
        },
        {
            text: CWN2.I18n.get("Annulla"),
            action: 'coordinate-cancel'
        }
    ]
});

// CONTROLLER
Ext.define('CWN2.controller.button.coordinate', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.Coordinate'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-coordinate'
        },
        {
            ref: 'win',
            selector: 'cwn2-coordinate-win'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.coordinate: init');

        this.control({
            'cwn2-button-coordinate': {
                toggle: this.onButtonPress,
                featureadded: this.onFeatureAdded
            },
            'button[action=coordinate-submit]': {
                click: this.onSubmitButtonClick
            },
            'button[action=coordinate-cancel]': {
                click: this.onCancelButtonClick
            }
        });

    },

    onSubmitButtonClick: function() {
        var win = this.getWin(),
            btnOptions = this.getButton().config.options;
        if (btnOptions && btnOptions.callBacks && btnOptions.callBacks["submit"]) {
            if (win.geometry) {
                //var geom = win.geometry.clone();
                //if (CWN2.app.map.projection !== CWN2.app.map.displayProjection.projCode) {
                //    geom.transform(new OpenLayers.Projection(CWN2.app.map.projection), CWN2.app.map.displayProjection);
                //}
                btnOptions.callBacks["submit"](win.geometry);
            } else {
                CWN2.Util.handleException({
                    message: "Nessun punto selezionato",
                    level: 1
                });
            }
        } else {
            CWN2.Util.log("Funzione di callback 'submit' non definita", 1);
        }
    },

    onCancelButtonClick: function() {
        var win = this.getWin(),
            btnOptions = this.getButton().config.options;
        if (btnOptions && btnOptions.callBacks && btnOptions.callBacks["cancel"]) {
            btnOptions.callBacks["cancel"]();
        } else {
            CWN2.Util.log("Funzione di callback 'cancel' non definita", 1);
        }
    },

    onButtonPress: function() {
        var win = this.getWin(),
            btnOptions = this.getButton().config.options;

        if (!win) {
            win = Ext.create('CWN2.button.Coordinate.Win');
        }
        this.showHideWin(win, CWN2.app.layout.mapPanel);
    },

    onFeatureAdded: function(event) {
        var win = this.getWin();

        var ntvProjection = this.getButton().config.options.projection;
        var mapProjection = CWN2.app.map.projection;

        if (ntvProjection && ntvProjection !== mapProjection) {
            var srvUrl = "/geoservices/REST/coordinate/transform_point/" + mapProjection.replace("EPSG:","") + "/" + ntvProjection.replace("EPSG:","") + "/" + event.feature.geometry.x + "," + event.feature.geometry.y;
            CWN2.Util.ajaxRequest({
                type: "JSON",
                url: srvUrl,
                callBack: function(data,response) {
                    var point = data.points[0].split(",");
                    updateCoordinate(point[0],point[1])
                    //console.log(data)
                }
            });
        } else {
            updateCoordinate(event.feature.geometry.x,event.feature.geometry.y)
        }


        function updateCoordinate(x,y) {
            x = parseFloat(x);
            y = parseFloat(y);
            win.geometry = {
                x: x, y: y
            };
            var cifreDecimali = (CWN2.app.map.displayProjection.getUnits() === 'm') ? 0 : 6;
            var labelCoord1 = (CWN2.app.map.displayProjection.getUnits() === 'm') ? "X" : "lon";
            var labelCoord2 = (CWN2.app.map.displayProjection.getUnits() === 'm') ? "Y" : "lat";
            var html = "<b>" + labelCoord1 + " = " + x.toFixed(cifreDecimali) + "<br> " + labelCoord2 + " = " + y.toFixed(cifreDecimali);
            Ext.ComponentQuery.query('panel[id="cwn2-coordinate-panel"]')[0].update(html);
        }

    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    }


});
/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
Ext.define('CWN2.button.DeleteFeature', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-deletefeature',

    constructor: function(config) {
        var btnOptions = config.options,
            map = CWN2.app.map,
            editingLayer = CWN2.Editor.createEditingLayer(map),
            control = new CWN2.Control.DeleteFeature(editingLayer),
            id = "deleteFeature";

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Cancella Geometria"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            control: control,
            enableToggle: true,
            toggleGroup: "mapInteractToggleGroup"
        }));

    }
});/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
Ext.define('CWN2.button.DragFeature', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-dragfeature',

    constructor: function(config) {
        var btnOptions = config.options,
            map = CWN2.app.map,
            editingLayer = CWN2.Editor.createEditingLayer(map),
            control = new OpenLayers.Control.DragFeature(editingLayer),
            id = "dragFeature";

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Sposta Geometria"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            control: control,
            enableToggle: true,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});

/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
Ext.define('CWN2.button.DrawLine', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-drawline',

    constructor: function(config) {
        var btnOptions = config.options || {},
            map = CWN2.app.map,
            id = "drawLine",
            control = new CWN2.Control.DrawLine(CWN2.Editor.createEditingLayer(map, btnOptions.styleMap), btnOptions);

        // Se esiste funzione callback definita nelle opzioni del bottone la chiamo passando la geometria
        control.events.register('featureadded', this, function(evt) {
            if (btnOptions.callback && typeof btnOptions.callback == "function") {
                btnOptions.callback(evt.feature.geometry,evt);
            }
        });

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Inserisci Linea"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            control: control,
            enableToggle: true,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});

/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
Ext.define('CWN2.button.DrawPoint', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-drawpoint',

    constructor: function(config) {
        var btnOptions = config.options || {},
            map = CWN2.app.map,
            id = "drawPoint",
            control = new CWN2.Control.DrawPoint(CWN2.Editor.createEditingLayer(map, btnOptions.styleMap), btnOptions);

        // Se esiste funzione callback definita nelle opzioni del bottone la chiamo passando la geometria
        control.events.register('featureadded', this, function(evt) {
            if (btnOptions.callback && typeof btnOptions.callback == "function") {
                btnOptions.callback(evt.feature.geometry,evt);
            }
        });

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Inserisci Punto"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            control: control,
            enableToggle: true,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});

Ext.define('CWN2.button.DrawPolygon', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-drawpolygon',

    constructor: function(config) {
        var btnOptions = config.options || {},
            map = CWN2.app.map,
            id = "drawPolygon",
            control = new CWN2.Control.DrawPolygon(CWN2.Editor.createEditingLayer(map, btnOptions.styleMap), btnOptions);

        // Se esiste funzione callback definita nelle opzioni del bottone la chiamo passando la geometria
        control.events.register('featureadded', this, function(evt) {
            if (btnOptions.callback && typeof btnOptions.callback == "function") {
                btnOptions.callback(evt.feature.geometry,evt);
            }
        });

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: (btnOptions && btnOptions.tooltip) ? CWN2.I18n.get(btnOptions.tooltip) : CWN2.I18n.get("Inserisci Poligono"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            control: control,
            enableToggle: true,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});

Ext.define('CWN2.button.DrawRegularPolygon', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-drawregularpolygon',

    constructor: function(config) {
        var btnOptions = config.options || {},
            handlerOptions,
            map = CWN2.app.map,
            id = btnOptions.id || "drawRegularPolygon";

        btnOptions.type = btnOptions.type || "rectangle";

        switch (btnOptions.type) {
            case "rectangle":
                handlerOptions = {
                    "sides": 4,
                    "irregular": true
                };
                break;
            case "circle":
                handlerOptions = {
                    "sides": 40
                };
                break;
            case "triangle":
                handlerOptions = {
                    "sides": 3
                };
                break;
            case "pentagon":
                handlerOptions = {
                    "sides": 5
                };
                break;
            case "hexagon":
                handlerOptions = {
                    "sides": 6
                };
                break;
        }


        btnOptions.handlerOptions = handlerOptions;

        var control = new CWN2.Control.DrawRegularPolygon(CWN2.Editor.createEditingLayer(map, btnOptions.styleMap), btnOptions);

        // Se esiste funzione callback definita nelle opzioni del bottone la chiamo passando la geometria
        control.events.register('featureadded', this, function(evt) {
            if (btnOptions.callback && typeof btnOptions.callback == "function") {
                btnOptions.callback(evt.feature.geometry,evt);
            }
        });

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: (btnOptions && btnOptions.tooltip) ? CWN2.I18n.get(btnOptions.tooltip) : CWN2.I18n.get("Inserisci un poligono"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : "drawPolygon",
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            control: control,
            enableToggle: true,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});

Ext.define('CWN2.button.Find', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-find',

    constructor: function(config) {
        var btnOptions = config.options,
            id = "find";

        this.config = config;

        this.superclass.constructor.call(this, {
            tooltip: CWN2.I18n.get("Ricerche"),
            pressed: false,
            id: id,
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26
        });

    }
});

Ext.define('CWN2.button.Find.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-find-win',
    title: CWN2.I18n.get("Ricerche"),
    height: 205,
    width: 335,
    resizable: false,
    layout: "fit",
    closeAction: "hide"
});

Ext.define('CWN2.button.Find.TabPanel', {
    extend: 'Ext.tab.Panel',
    alias: 'widget.cwn2-btn-find-tab-panel',
    activeTab: 0,
    bodyBorder: false,
    deferredRender: false,
    layoutOnTabChange: true,
    border: false,
    flex: 1,
    plain: true
});

Ext.define('CWN2.button.Find.AddressPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-find-address-panel',
    frame: true,
    labelWidth: 1,
    bodyStyle: "padding:5px 5px 0",
    height: 215
});

Ext.define('CWN2.button.Find.LayerPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-find-layer-panel',
    frame: true,
    labelWidth: 1,
    bodyStyle: "padding:5px 5px 0",
    height: 215
});


Ext.define('CWN2.button.Find.CoordPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-find-coord-panel',
    frame: true,
    labelWidth: 1,
    bodyStyle: "padding:5px 5px 0",
    height: 215
});

Ext.define('CWN2.button.Find.LayerCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-find-layer-combo",
    mode: 'local',
    typeAhead: true,
    triggerAction: 'all',
    value: "Scegli un livello...",
    valueField: "name",
    displayField: "label",
    width: 300,
    constructor: function(config) {
        Ext.define('FindLayers', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'name', type: 'string'},
                {name: 'label', type: 'string'},
                {name: 'columns'}
            ]
        });
        this.store = Ext.create('Ext.data.Store', {
            model: 'FindLayers',
            data: {"layers": config.layersConfig},
            proxy: {
                type: 'memory',
                reader: {
                    type: 'json',
                    root: 'layers'
                }
            }
        });
        this.superclass.constructor.call(this);
        this.setValue(this.getStore().getAt(0).data.name);
    }
});

Ext.define('CWN2.button.Find.ColumnCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-find-column-combo",
    queryMode: 'local',
    typeAhead: true,
    triggerAction: 'all',
    width: 300,
    valueField: "name",
    displayField: "label",
    constructor: function(config) {
        var columns = [];
        Ext.each(config.layersConfig[0].columns, function(column) {
            var name = column.name,
                label = CWN2.Util.capitalizeString(column.name.replace(/_/g, ' ')),
                type = column.type;
            columns.push({"name": name, "label": label, "type": type});
        });
        Ext.define('FindColumns', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'name', type: 'string'},
                {name: 'label', type: 'string'},
                {name: 'type', type: 'string'}
            ]
        });
        this.store = Ext.create('Ext.data.Store', {
            model: 'FindColumns',
            data: {"columns": columns},
            proxy: {
                type: 'memory',
                reader: {
                    type: 'json',
                    root: 'columns'
                }
            }
        });

        this.superclass.constructor.call(this);
        if (this.getStore().getAt(0)) {
            this.setValue(this.getStore().getAt(0).data.name);
        }
    }
});

Ext.define('CWN2.button.Find.OperatorCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-find-operator-combo",
    queryMode: 'local',
    store: [
        ["=", "="],
        ["!=", "!="],
        ["<", "<"],
        [">", ">"],
        ["<=", "<="],
        [">=", ">="],
        ["LIKE", "LIKE"]
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "=",
    width: 100
});

Ext.define('CWN2.button.Find.ValueField', {
    extend: 'Ext.form.field.Text',
    alias: "widget.cwn2-btn-find-value-field",
    allowBlank: false,
    width: 300
});

Ext.define('CWN2.button.Find.LayerSubmit', {
    extend: 'Ext.button.Button',
    alias: "widget.cwn2-btn-find-layer-submit",
    text: "Ricerca..."
});

Ext.define('CWN2.button.Find.LayerValueListButton', {
    extend: 'Ext.button.Button',
    alias: "widget.cwn2-btn-find-layer-value-list-btn",
    text: "Lista Valori"
});

Ext.define('CWN2.button.Find.LayerResultStore', {
    extend: 'Ext.data.Store',
    storeId: "find-layer-result",
    autoLoad: false,
    fields: ["id", "label", "bbox"]
});


Ext.define('CWN2.button.Find.LayerValueListStore', {
    extend: 'Ext.data.Store',
    storeId: "find-layer-value-list",
    autoLoad: false,
    fields: ["value"]
});

Ext.define('CWN2.button.Find.LayerResultWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-btn-find-layer-result-win',
    title: CWN2.I18n.get("Risultato ricerca"),
    width: 335,
    height: 360,
    layout: "fit",
    closable: true,
    closeAction: "hide",
    items: [
        { xtype: 'cwn2-btn-find-layer-result-grid' }
    ]
});


Ext.define('CWN2.button.Find.LayerValueListWindow', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-btn-find-layer-value-list-win',
    title: CWN2.I18n.get("Lista valori"),
    width: 335,
    height: 360,
    layout: "fit",
    closable: true,
    closeAction: "hide",
    items: [
        { xtype: 'cwn2-btn-find-layer-value-list-grid' }
    ]
});

Ext.define('CWN2.button.Find.LayerValueListGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.cwn2-btn-find-layer-value-list-grid',
    frame: true,
    width: 320,
    height: 300,
    header: false,
    //hideHeaders: true,
    iconCls: "icon-grid",
    store: Ext.create('CWN2.button.Find.LayerValueListStore'),
    columns: [
        {
            header: "Valore",
            sortable: true,
            dataIndex: "value",
            width: 290
        }
    ]
});

Ext.define('CWN2.button.Find.LayerResultGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.cwn2-btn-find-layer-result-grid',
    frame: true,
    width: 320,
    height: 300,
    header: false,
    //hideHeaders: true,
    iconCls: "icon-grid",
    store: Ext.create('CWN2.button.Find.LayerResultStore'),
    columns: [
        {
            header: "ID",
            sortable: true,
            dataIndex: "id",
            width: 70
        },
        {
            header: "LABEL",
            sortable: true,
            dataIndex: "label",
            width: 220
        }
    ]
});


Ext.define('CWN2.button.Find.SrsCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-find-srs-combo",
    fieldLabel: '',
    labelWidth: 1,
    queryMode: 'local',
    store: [
        ['3003', 'Coordinate Piane - Gauss-Boaga - Fuso Ovest'],
        ['25832', 'Coordinate Piane - ETRS - UTM - ETRF89 - Fuso 32'],
        ['4806', 'Coordinate Geografiche - ROMA40'],
        ['4258', 'Coordinate Geografiche - ETRS - ETRF89']
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "3003",
    width: 300
});

Ext.define('CWN2.button.Find.XField', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-find-x-field",
    allowBlank: false,
    fieldLabel: 'X (Est)',
    decimalPrecision: 0,
    minValue: 1378000,
    maxValue: 1586000,
    width: 300
});

Ext.define('CWN2.button.Find.YField', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-find-y-field",
    allowBlank: false,
    fieldLabel: 'Y (Nord)',
    decimalPrecision: 0,
    minValue: 4846000,
    maxValue: 4948000,
    width: 300
});

Ext.define('CWN2.button.Find.CoordSubmit', {
    extend: 'Ext.button.Button',
    alias: "widget.cwn2-btn-find-coord-submit",
    text: "Trova..."
});

// CONTROLLER
Ext.define('CWN2.controller.button.find', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.Find'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-find'
        },
        {
            ref: 'win',
            selector: 'cwn2-find-win'
        },
        {
            ref: 'layerCombo',
            selector: 'cwn2-btn-find-layer-combo'
        },
        {
            ref: 'columnCombo',
            selector: 'cwn2-btn-find-column-combo'
        },
        {
            ref: 'operatorCombo',
            selector: 'cwn2-btn-find-operator-combo'
        },
        {
            ref: 'valueField',
            selector: 'cwn2-btn-find-value-field'
        },
        {
            ref: 'layerResultWin',
            selector: 'cwn2-btn-find-layer-result-win'
        },
        {
            ref: 'layerResultGrid',
            selector: 'cwn2-btn-find-layer-result-grid'
        },
        {
            ref: 'layerValueListWin',
            selector: 'cwn2-btn-find-layer-value-list-win'
        },
        {
            ref: 'layerValueListGrid',
            selector: 'cwn2-btn-find-layer-value-list-grid'
        },
        {
            ref: 'srsCombo',
            selector: 'cwn2-btn-find-srs-combo'
        },
        {
            ref: 'xField',
            selector: 'cwn2-btn-find-x-field'
        },
        {
            ref: 'yField',
            selector: 'cwn2-btn-find-y-field'
        }

    ],

    layersConfig: [],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.find: init');

        this.control({
            'cwn2-button-find': {
                click: this.onClick
            },
            'cwn2-btn-find-layer-combo': {
                select: this.onLayerSelect
            },
            'cwn2-btn-find-column-combo': {
                select: this.onColumnSelect
            },
            'cwn2-btn-find-layer-submit': {
                click: this.onLayerSubmit
            },
            'cwn2-btn-find-coord-submit': {
                click: this.onCoordSubmit
            },
            'cwn2-btn-find-srs-combo': {
                select: this.onSrsSelect
            },
            'cwn2-btn-find-layer-result-grid': {
                select: this.onLayerGridSelect
            },
            'cwn2-btn-find-layer-value-list-btn': {
                click: this.onLayerValueListClick
            },
            'cwn2-btn-find-layer-value-list-grid': {
                select: this.onValueListGridSelect
            }


        });
    },

    onCoordSubmit: function(button, e, eOpts) {
        var me = this,
            srs = this.getSrsCombo().value,
            xField = this.getXField(),
            yField = this.getYField(),
            x = xField.value,
            y = yField.value;

        if (!xField.isValid()) {
            Ext.MessageBox.alert('Attenzione', 'Coordinata X fuori dai limiti ammessi.<br>Posiziona il cursore sopra il campo per conoscere i valori ammessi');
            return false;
        }
        if (!yField.isValid()) {
            Ext.MessageBox.alert('Attenzione', 'Coordinata Y fuori dai limiti ammessi.<br>Posiziona il cursore sopra il campo per conoscere i valori ammessi');
            return false;
        }

        // chiamo servizio conversione coordinate
        var srvUrl = "/geoservices/REST/coordinate/transform_point/" + srs + "/3857/" + x + "," + y;
        CWN2.Util.ajaxRequest({
            type: "JSON",
            url: srvUrl,
            callBack: function(data,response) {
                var point = data.points[0].split(",");
//                CWN2.app.map.setCenter([point[0],point[1]],16);
                CWN2.FeatureLoader.loadMarker(
                    {
                        x: point[0],
                        y: point[1],
                        map: CWN2.app.map,
                        label: '',
                        //label: point[0] & ',' & point[1],
                        zoomLevel: 17
                    }
                );
            }
        });

    },

    onSrsSelect: function(combo, records, eOpts) {
        var xField = this.getXField();
        var yField = this.getYField();
        var srs = this.getSrsCombo().value;
        switch (srs) {
            case '3003':
                xField.setMinValue(1378000);
                xField.setMaxValue(1586000);
                yField.setMinValue(4846000);
                yField.setMaxValue(4948000);
                xField.decimalPrecision = 0;
                yField.decimalPrecision = 0;
                break;
            case '25832':
                xField.setMinValue(377000);
                xField.setMaxValue(586000);
                yField.setMinValue(4845000);
                yField.setMaxValue(4948000);
                xField.decimalPrecision = 0;
                yField.decimalPrecision = 0;
                break;
            case '4258':
                xField.setMinValue(7.48416);
                xField.setMaxValue(10.08478);
                yField.setMinValue(43.756831);
                yField.setMaxValue(44.680042);
                xField.decimalPrecision = 6;
                yField.decimalPrecision = 6;
                break;
            case '4806':
                xField.setMinValue(-4.967781);
                xField.setMaxValue(-2.366957);
                yField.setMinValue(43.756193);
                yField.setMaxValue(44.678726);
                xField.decimalPrecision = 6;
                yField.decimalPrecision = 6;
                break;
        }

//        var srs = record.data["value"].toString()
    },

    onLayerSubmit: function(button, e, eOpts) {
        var me = this,
            layerName = this.getLayerCombo().value,
            column = this.getColumnCombo().value,
            datatype = this.getColumnCombo().findRecordByValue(column).data["type"],
            operator = this.getOperatorCombo().value,
            value = this.getValueField().value;

        if (!value) {
            Ext.Msg.show({ msg: "Indicare un valore", icon: Ext.Msg.INFO, buttons: Ext.Msg.OK });
            return;
        }

        if (datatype == 'DATE') {
            if (!value.match(/^(0?[1-9]|[12][0-9]|3[01])[\/](0?[1-9]|1[012])[\/]\d{4}$/)) {
                Ext.Msg.show({ msg: "Valori di tipo data devono essere espressi nel formato: 'GG/MM/AAAA'", icon: Ext.Msg.INFO, buttons: Ext.Msg.OK });
                return;
            }
            if (operator == 'LIKE') {
                Ext.Msg.show({ msg: "Campi di tipo data non sono compatibili con l'operatore LIKE", icon: Ext.Msg.INFO, buttons: Ext.Msg.OK });
                return;
            }
        }

        CWN2.loadingScreen = Ext.getBody().mask('Ricerca in corso', 'loadingscreen');
        CWN2.Util.ajaxRequest({
            type: "JSONP",
            url: "/geoservices/REST/config/query_layer/" + layerName.replace("L", "") + "?column=" + column + "&datatype=" + datatype + "&operator=" + operator + "&value=" + value + "&map_projection=" + CWN2.app.map.projection,
            callBack: function(response) {
                if (response && !response.success) {
                    CWN2.Util.msgBox("Attenzione: - " + response.message);
                    return;
                }
                (response.data && response.data.length > 0) ?
                    me.onLayerDataResponse(layerName, response.data) :
                    CWN2.Util.msgBox("Nessun oggetto trovato");
            }
        });

    },

    columnComboChange: true,

    onLayerValueListClick: function(button, e, eOpts) {
        var me = this,
            layerName = this.getLayerCombo().value,
            column = this.getColumnCombo().value,
            datatype = this.getColumnCombo().findRecordByValue(column).data["type"],
            column = this.getColumnCombo().value;

        if (this.columnComboChange) {
            CWN2.loadingScreen = Ext.getBody().mask('Ricerca in corso', 'loadingscreen');
            CWN2.Util.ajaxRequest({
                type: "JSONP",
                url: "/geoservices/REST/config/query_layer_valuelist/" + layerName.replace("L", "") + "?column=" + column + "&datatype=" + datatype,
                callBack: function(response) {
                    if (response && !response.success) {
                        CWN2.Util.msgBox("Attenzione: - " + response.message);
                        return;
                    }
                    (response.data && response.data.length > 0) ?
                        me.onLayerValueListResponse(layerName, response.data) :
                        CWN2.Util.msgBox("Nessun oggetto trovato");
                }
            });
            this.columnComboChange = false;
        } else {
            this.getLayerValueListWin().show();
        }

    },

    onLayerValueListResponse: function(layerName, data) {
        var me = this,
            mainWin = this.getWin(),
            win = this.getLayerValueListWin() || Ext.create('CWN2.button.Find.LayerValueListWindow'),
            store = this.getLayerValueListGrid().getStore();

        store.removeAll();
        Ext.each(data, function(rec) {
            store.add(rec);
        });
        win.show();
        win.alignTo(CWN2.app.layout.mapPanel.body, "tl-tl", [10 + mainWin.getWidth() + 10, 10 ]);
    },

    onLayerDataResponse: function(layerName, data) {
        var me = this,
            layerConfig = CWN2.app.map.layerManager.getLayerConfigByName(layerName),
            mainWin = this.getWin(),
            win = this.getLayerResultWin() || Ext.create('CWN2.button.Find.LayerResultWindow'),
            store = this.getLayerResultGrid().getStore();

        store.removeAll();
        Ext.each(data, function(rec) {
            store.add(rec);
        });
        win.show();
        win.alignTo(CWN2.app.layout.mapPanel.body, "tl-tl", [10, 10 + mainWin.getHeight() + 10]);
    },

    onLayerSelect: function(combo, records, eOpts) {
        var columnCombo = this.getColumnCombo();
        var columns = [];
        columnCombo.enable();
        columnCombo.clearValue();
        Ext.each(records[0].data.columns, function(column) {
            var name = column.name,
                label = CWN2.Util.capitalizeString(column.name.replace(/_/g, ' ')),
                type = column.type;
            columns.push({"name": name, "label": label, "type": type});
        });
        columnCombo.store.loadData(columns, false);
        columnCombo.setValue(columnCombo.getStore().getAt(0).data.name);
    },

    onColumnSelect: function(combo, records, eOpts) {
        this.columnComboChange = true;
    },

    buildLayersConfig: function(panelConfig) {
        var me = this;
        var layersConfig = CWN2.app.map.layerManager.overlayLayersConfig;
        if (panelConfig && panelConfig.layers) {
            Ext.each(panelConfig.layers, function(layer) {
                var layerAppConfig = CWN2.Util.getArrayElementByAttribute(layersConfig, "name", layer.name);
                me.layersConfig.push({
                    name: layer.name,
                    label: layerAppConfig.legend.label,
                    columns: (layer.dbSchema && layer.dbSchema.columns) ? layer.dbSchema.columns : layersConfig.dbSchema.columns
                })
            });
        } else {
            Ext.each(layersConfig, function(layer) {
                if (layer.dbSchema && layer.dbSchema.columns) {
                    me.layersConfig.push({
                        name: layer.name,
                        label: layer.legend.label,
                        columns: layer.dbSchema.columns
                    })
                }
            });
        }
    },

    onValueListGridSelect: function(grid, record, index) {
        this.getValueField().setValue(record.data["value"].toString());
        this.getLayerValueListWin().hide();
    },

    onLayerGridSelect: function(grid, record, index) {
        var me = this,
            layerName = this.getLayerCombo().value,
            layerConfig = CWN2.app.map.layerManager.getLayerConfigByName(layerName),
            infoIdAttr = layerConfig.infoOptions.infoIdAttr,
            idValue = record.data["id"].toString(),
            bounds = new OpenLayers.Bounds.fromString(record.data["bbox"]);

        CWN2.MapCatalogueLoader.findLayer({
            layers: [layerName],
            fields: infoIdAttr,
            values: idValue,
            bounds: bounds,
            maxZoomLevel: 18
        });

    },

    onClick: function() {
        var mapPanel = CWN2.app.layout.mapPanel,
            win = this.getWin(),
            button = this.getButton(),
            me = this;

        if (!win) {
            var tabs = [];
            Ext.each(button.config.panels, function(panelConfig) {
                switch (panelConfig.type) {
                    case "coordinate":
                        tabs.push({
                            xtype: 'cwn2-btn-find-coord-panel',
                            title: CWN2.I18n.get(panelConfig.name),
                            items: [
                                {
                                    xtype: 'label',
                                    text: 'Sistema di Riferimento:'
                                },
                                {
                                    xtype: 'cwn2-btn-find-srs-combo'
                                },
                                {
                                    xtype: 'cwn2-btn-find-x-field'
                                },
                                {
                                    xtype: 'cwn2-btn-find-y-field'
                                },
                                {
                                    xtype: 'cwn2-btn-find-coord-submit'
                                }
                            ]
                        });
                        break;
                    case "indirizzo":
                        tabs.push({
                            xtype: 'cwn2-btn-find-address-panel',
                            title: CWN2.I18n.get(panelConfig.name),
                            items: [
                                {
                                    xtype: 'cwn2-geocoder-combobox',
                                    map: mapPanel.map,
                                    service: "google",
                                    configOptions: panelConfig.options,
                                    width: 200
                                }
                            ]
                        });
                        break;
                    case "layer":
                        me.buildLayersConfig(panelConfig.options);
                        tabs.push({
                            xtype: 'cwn2-btn-find-layer-panel',
                            title: CWN2.I18n.get(panelConfig.name),
                            items: [
                                {
                                    xtype: 'cwn2-btn-find-layer-combo',
                                    layersConfig: me.layersConfig
                                },
                                {
                                    xtype: 'cwn2-btn-find-column-combo',
                                    layersConfig: me.layersConfig
                                },
                                {
                                    xtype: 'fieldcontainer',
                                    border: false,
                                    width: 300,
                                    flex: 1,
                                    layout: 'hbox',
                                    items: [
                                        {
                                            xtype: 'cwn2-btn-find-operator-combo'
                                        },
                                        {
                                            xtype: 'tbfill'
                                        },
                                        {
                                            xtype: 'cwn2-btn-find-layer-value-list-btn'
                                        }
                                    ]
                                },
                                {
                                    xtype: 'cwn2-btn-find-value-field'
                                },
                                {
                                    xtype: 'cwn2-btn-find-layer-submit'
                                }
                            ]
                        });
                        break;
                }
            });
            win = Ext.create('CWN2.button.Find.Window', {
                items: [
                    {
                        xtype: 'cwn2-btn-find-tab-panel',
                        id: "find-tabpanel",
                        items: tabs
                    }
                ]
            });
        }
        this.showHideWin(win, mapPanel);
    },

    showHideWin: function(win, mapPanel) {
        if (win.isVisible()) {
            win.hide();
        } else {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        }
    }


});
Ext.define('CWN2.button.Fitall', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-fitall',

    constructor: function(config) {
        var btnOptions = config.options,
            map = CWN2.app.map,
            control = new OpenLayers.Control.ZoomToMaxExtent();

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            tooltip: CWN2.I18n.get("Zoom alla massima estensione"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : "fit",
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            pressed: false,
            control: control,
            id: "fitall"
        }));
    }
});


/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
Ext.define('CWN2.button.Generic', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-generic',

    constructor: function(config) {
        var btnOptions = config.options || {},
            map = CWN2.app.map,
            id = "generic";

        this.options = btnOptions;

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: (btnOptions && btnOptions.tooltip) ? btnOptions.tooltip : CWN2.I18n.get("Bottone Generico"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26
        }));
    }
});

Ext.define('CWN2.controller.button.generic', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.Generic'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-generic'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.generic: init');

        this.control({
            'cwn2-button-generic': {
                click: this.onClick
            }
        });
    },

    onClick: function() {
        var btnOptions = this.getButton().options;

            // richiamo funzione di callback
        if (btnOptions.callback && typeof btnOptions.callback == "function") {
            btnOptions.callback();
        } else {
            CWN2.Util.log('CWN2.button.Generic: funzione di callback non definita',2);
        }
    }


});
// Componenti BASE
Ext.define('Ext.picker.Color', {
    extend: 'Ext.Component',
    requires: 'Ext.XTemplate',
    alias: 'widget.colorpicker',
    alternateClassName: 'Ext.ColorPalette',

    /**
     * @cfg {String} [componentCls='x-color-picker']
     * The CSS class to apply to the containing element.
     */
    componentCls: Ext.baseCSSPrefix + 'color-picker',

    /**
     * @cfg {String} [selectedCls='x-color-picker-selected']
     * The CSS class to apply to the selected element
     */
    selectedCls: Ext.baseCSSPrefix + 'color-picker-selected',

    /**
     * @cfg {String} itemCls
     * The CSS class to apply to the color picker's items
     */
    itemCls: Ext.baseCSSPrefix + 'color-picker-item',

    /**
     * @cfg {String} value
     * The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). Note that the hex
     * codes are case-sensitive.
     */
    value: null,

    /**
     * @cfg {String} clickEvent
     * The DOM event that will cause a color to be selected. This can be any valid event name (dblclick, contextmenu).
     */
    clickEvent: 'click',

    /**
     * @cfg {Boolean} allowReselect
     * If set to true then reselecting a color that is already selected fires the {@link #event-select} event
     */
    allowReselect: false,

    /**
     * @property {String[]} colors
     * An array of 6-digit color hex code strings (without the # symbol). This array can contain any number of colors,
     * and each hex code should be unique. The width of the picker is controlled via CSS by adjusting the width property
     * of the 'x-color-picker' class (or assigning a custom class), so you can balance the number of colors with the
     * width setting until the box is symmetrical.
     *
     * You can override individual colors if needed:
     *
     *     var cp = new Ext.picker.Color();
     *     cp.colors[0] = 'FF0000';  // change the first box to red
     *
     * Or you can provide a custom array of your own for complete control:
     *
     *     var cp = new Ext.picker.Color();
     *     cp.colors = ['000000', '993300', '333300'];
     */
    colors: [
        '000000', '993300', '333300', '003300', '003366', '000080', '333399', '333333',
        '800000', 'FF6600', '808000', '008000', '008080', '0000FF', '666699', '808080',
        'FF0000', 'FF9900', '99CC00', '339966', '33CCCC', '3366FF', '800080', '969696',
        'FF00FF', 'FFCC00', 'FFFF00', '00FF00', '00FFFF', '00CCFF', '993366', 'C0C0C0',
        'FF99CC', 'FFCC99', 'FFFF99', 'CCFFCC', 'CCFFFF', '99CCFF', 'CC99FF', 'FFFFFF'
    ],

    /**
     * @cfg {Function} handler
     * A function that will handle the select event of this picker. The handler is passed the following parameters:
     *
     * - `picker` : ColorPicker
     *
     *   The {@link Ext.picker.Color picker}.
     *
     * - `color` : String
     *
     *   The 6-digit color hex code (without the # symbol).
     */

    /**
     * @cfg {Object} scope
     * The scope (`this` reference) in which the `{@link #handler}` function will be called.
     *
     * Defaults to this Color picker instance.
     */

    colorRe: /(?:^|\s)color-(.{6})(?:\s|$)/,

    renderTpl: [
        '<tpl for="colors">',
        '<a href="#" class="color-{.} {parent.itemCls}" hidefocus="on">',
        '<span class="{parent.itemCls}-inner" style="background:#{.}">&#160;</span>',
        '</a>',
        '</tpl>'
    ],

    // @private
    initComponent: function () {
        var me = this;

        me.callParent(arguments);
        me.addEvents(
            /**
             * @event select
             * Fires when a color is selected
             * @param {Ext.picker.Color} this
             * @param {String} color The 6-digit color hex code (without the # symbol)
             */
            'select'
        );

        if (me.handler) {
            me.on('select', me.handler, me.scope, true);
        }
    },


    // @private
    initRenderData: function () {
        var me = this;
        return Ext.apply(me.callParent(), {
            itemCls: me.itemCls,
            colors: me.colors
        });
    },

    onRender: function () {
        var me = this,
            clickEvent = me.clickEvent;

        me.callParent(arguments);

        me.mon(me.el, clickEvent, me.handleClick, me, {delegate: 'a'});
        // always stop following the anchors
        if (clickEvent != 'click') {
            me.mon(me.el, 'click', Ext.emptyFn, me, {delegate: 'a', stopEvent: true});
        }
    },

    // @private
    afterRender: function () {
        var me = this,
            value;

        me.callParent(arguments);
        if (me.value) {
            value = me.value;
            me.value = null;
            me.select(value, true);
        }
    },

    // @private
    handleClick: function (event, target) {
        var me = this,
            color;

        event.stopEvent();
        if (!me.disabled) {
            color = target.className.match(me.colorRe)[1];
            me.select(color.toUpperCase());
        }
    },

    /**
     * Selects the specified color in the picker (fires the {@link #event-select} event)
     * @param {String} color A valid 6-digit color hex code (# will be stripped if included)
     * @param {Boolean} [suppressEvent=false] True to stop the select event from firing.
     */
    select: function (color, suppressEvent) {

        var me = this,
            selectedCls = me.selectedCls,
            value = me.value,
            el;

        color = color.replace('#', '');
        if (!me.rendered) {
            me.value = color;
            return;
        }


        if (color != value || me.allowReselect) {
            el = me.el;

            if (me.value) {
                el.down('a.color-' + value).removeCls(selectedCls);
            }
            el.down('a.color-' + color).addCls(selectedCls);
            me.value = color;
            if (suppressEvent !== true) {
                me.fireEvent('select', me, color);
            }
        }
    },

    /**
     * Clears any selection and sets the value to `null`.
     */
    clear: function () {
        var me = this,
            value = me.value,
            el;

        if (value && me.rendered) {
            el = me.el.down('a.color-' + value);
            el.removeCls(me.selectedCls);
        }
        me.value = null;
    },

    /**
     * Get the currently selected color value.
     * @return {String} value The selected value. Null if nothing is selected.
     */
    getValue: function () {
        return this.value || null;
    }
});

Ext.define('Ext.menu.ColorPicker', {
    extend: 'Ext.menu.Menu',

    alias: 'widget.colormenu',

    requires: [
        'Ext.picker.Color'
    ],

    /**
     * @cfg {Boolean} hideOnClick
     * False to continue showing the menu after a color is selected.
     */
    hideOnClick: true,

    /**
     * @cfg {String} pickerId
     * An id to assign to the underlying color picker.
     */
    pickerId: null,

    /**
     * @cfg {Number} maxHeight
     * @private
     */

    /**
     * @property {Ext.picker.Color} picker
     * The {@link Ext.picker.Color} instance for this ColorMenu
     */

    /**
     * @event click
     * @private
     */

    initComponent: function () {
        var me = this,
            cfg = Ext.apply({}, me.initialConfig);

        // Ensure we don't get duplicate listeners
        delete cfg.listeners;
        Ext.apply(me, {
            plain: true,
            showSeparator: false,
            items: Ext.applyIf({
                cls: Ext.baseCSSPrefix + 'menu-color-item',
                id: me.pickerId,
                xtype: 'colorpicker'
            }, cfg)
        });

        me.callParent(arguments);

        me.picker = me.down('colorpicker');

        /**
         * @event select
         * @inheritdoc Ext.picker.Color#select
         */
        me.relayEvents(me.picker, ['select']);

        if (me.hideOnClick) {
            me.on('select', me.hidePickerOnSelect, me);
        }
    },

    /**
     * Hides picker on select if hideOnClick is true
     * @private
     */
    hidePickerOnSelect: function () {
        Ext.menu.Manager.hideAll();
    }
});

Ext.define('Ext.ux.ColorField', {
    extend: 'Ext.form.TriggerField',
    triggerConfig: {
        src: Ext.BLANK_IMAGE_URL,
        tag: "img",
        cls: "x-form-trigger x-form-color-trigger"
    },
    invalidText: "Colors must be in a the hex format #FFFFFF.",
    regex: /^\#[0-9A-F]{6}$/i,
    allowBlank: false,
    initComponent: function () {
        this.callParent()
        this.addEvents('select');
        this.on('change', function (c, v) {
            this.onSelect(c, v);
        }, this);
    },


    // private
    onDestroy: function () {
        Ext.destroy(this.menu);
        this.callParent()
        //        Ext.ux.ColorField.superclass.onDestroy.call(this);
    },


    // private
    afterRender: function () {
        //Ext.ux.ColorField.superclass.afterRender.call(this);
        this.callParent(arguments)
        this.inputEl.setStyle('background', this.value);
        this.detectFontColor();
    },


    /**
     * @method onTriggerClick
     * @hide
     */
    // private
    onTriggerClick: function (e) {
        if (this.disabled) {
            return;
        }


        this.menu = new Ext.ux.ColorPicker({
            shadow: true,
            autoShow: true,
            hideOnClick: false,
            value: this.value,
            fallback: this.fallback
        });
        this.menu.alignTo(this.inputEl, 'tl-bl?');
        this.menuEvents('on');
        this.menu.show(this.inputEl);
    },


    //private
    menuEvents: function (method) {
        this.menu[method]('select', this.onSelect, this);
        this.menu[method]('hide', this.onMenuHide, this);
        this.menu[method]('show', this.onFocus, this);
    },


    onSelect: function (m, d) {
        d = Ext.isString(d) && d.substr(0, 1) != '#' ? '#' + d : d;
        this.setValue(d);
        this.fireEvent('select', this, d);
        if (this.inputEl) {
            this.inputEl.setStyle('background', d);
            this.detectFontColor();
        }
    },


    // private
    // Detects whether the font color should be white or black, according to the
    // current color of the background
    detectFontColor: function () {
        if (!this.menu || !this.menu.picker.rawValue) {
            if (!this.value) value = 'FFFFFF';
            else {
                var h2d = function (d) {
                    return parseInt(d, 16);
                }
                var value = [
                    h2d(this.value.slice(1, 3)),
                    h2d(this.value.slice(3, 5)),
                    h2d(this.value.slice(5))
                ];
            }
        } else var value = this.menu.picker.rawValue;
        var avg = (value[0] + value[1] + value[2]) / 3;
        this.inputEl.setStyle('color', (avg > 128) ? '#000' : '#FFF');
    },


    onMenuHide: function () {
        this.focus(false, 60);
        this.menuEvents('un');
    }


});

Ext.define('Ext.ux.CanvasPalette', {
    alias: 'widget.canvaspalette',
    extend: 'Ext.Component',
    itemCls: 'x-color-picker',
    defaultValue: "#0000FF",
    width: 200,
    height: 200,
    initComponent: function () {
        this.callParent()
        this.addEvents(
            /**
             * @event select
             * Fires when a color is selected
             * @param {ColorPalette} this
             * @param {String} color The 6-digit color hex code (without the # symbol)
             */
            'select');


        if (!this.value) this.value = this.defaultValue;
    },
    getValue: function () {
        return this.value;
    },


    setValue: function (v) {
        this.value = v;
    },
    onRender: function (container, position) {
        var el = document.createElement("div");
        el.className = this.itemCls;
        container.dom.insertBefore(el, null);
        Ext.get(el).setWidth(this.width);
        this.canvasdiv = Ext.get(el).createChild({
            tag: 'div'
        });
        this.wheel = this.canvasdiv.dom.appendChild(document.createElement("canvas"));
        this.wheel.setAttribute('width', '200');
        this.wheel.setAttribute('height', '200');
        this.wheel.setAttribute('class', 'x-color-picker-wheel');


        /* Draw the wheel image onto the container */
        this.wheel.getContext('2d').drawImage(this.wheelImage, 0, 0);
        this.drawGradient();


        Ext.get(this.wheel).on('click', this.select, this);
        this.callParent();
    },


    // private
    afterRender: function () {
        var me = this;
        me.callParent();
        var t = new Ext.dd.DragDrop(me.wheel)
        t.onDrag = function (e, t) {
            me.select(e, this.DDMInstance.currentTarget);
        };
    },


    select: function (e, t) {
        var context = this.wheel.getContext('2d');
        var coords = [
            e.getX() - Ext.get(t).getLeft(),
            e.getY() - Ext.get(t).getTop()
        ];


        try {
            var data = context.getImageData(coords[0], coords[1], 1, 1);
        } catch (e) {
            return;
        } // The user selected an area outside the <canvas>
        // Disallow selecting transparent regions
        var toHex = function () {
            this.color = new Ext.draw.Color(this.rawValue[0], this.rawValue[1], this.rawValue[2])
            this.value = this.color.toString();
        };
        if (data.data[3] == 0) {
            var context = this.gradient.getContext('2d');
            var data = context.getImageData(coords[0], coords[1], 1, 1);
            if (data.data[3] == 0) return;
            this.rawValue = data.data;
            toHex.call(this);
            this.fireEvent('select', this, this.value);
        } else {
            this.rawValue = data.data;
            toHex.call(this)
            this.drawGradient();
            this.fireEvent('select', this, this.value);
        }
    },


    // private
    drawGradient: function () {
        if (!this.gradient) {
            this.gradient = this.canvasdiv.dom.appendChild(document.createElement("canvas"));
            this.gradient.setAttribute('width', '200');
            this.gradient.setAttribute('height', '200');
            this.gradient.setAttribute('class', 'x-color-picker-gradient');
            if (typeof G_vmlCanvasManager != 'undefined') this.gradient = G_vmlCanvasManager.initElement(this.gradient);
            Ext.get(this.gradient).on('click', this.select, this);
        }
        var context = this.gradient.getContext('2d');
        var center = [97.5, 98];


        // Clear the canvas first
        context.clearRect(0, 0, this.gradient.width, this.gradient.height)


        context.beginPath();
        context.fillStyle = this.value;
        context.strokeStyle = this.value;
        context.arc(center[0], center[0], 65, 0, 2 * Math.PI, false);
        context.closePath();
        context.fill();


        /* Draw the wheel image onto the container */
        this.gradient.getContext('2d').drawImage(this.gradientImage, 33, 32);


    }


}, function () { /* Preload the picker images so they're available at render time */
    var p = this.prototype;
    p.wheelImage = (function () {
        var wheelImage = new Image();
        wheelImage.onload = Ext.emptyFn;
        wheelImage.src = '/geoviewer/stili/default/icons/wheel.png';
        return wheelImage;
    })();
    p.gradientImage = (function () {
        var gradientImage = new Image();
        gradientImage.onload = Ext.emptyFn;
        gradientImage.src = '/geoviewer/stili/default/icons/gradient.png';
        return gradientImage;
    })();
});

Ext.define('Ext.ux.ColorPicker', {
    extend: 'Ext.menu.ColorPicker',
    initComponent: function () {
        var me = this;
        if (!Ext.supports.Canvas || me.fallback == true) {
            me.height = 100;
            me.hideOnClick = true;
            me.callParent();
            return me.processEvent();
        }
        cfg = Ext.apply({}, me.canvasCfg);


        // Ensure we don't get duplicate listeners
        delete cfg.listeners;
        Ext.apply(me, {
            plain: true,
            showSeparator: false,
            items: Ext.applyIf({
                cls: Ext.baseCSSPrefix + 'menu-color-item',
                id: me.pickerId,
                value: me.value,
                xtype: 'canvaspalette'
            }, cfg)
        });


        Ext.menu.ColorPicker.superclass.initComponent.call(me)


        me.picker = me.down('canvaspalette');
        me.processEvent()


    },
    processEvent: function () {
        var me = this;
        me.picker.clearListeners();
        me.relayEvents(me.picker, ['select']);


        if (me.hideOnClick) {
            me.on('select', me.hidePickerOnSelect, me);
        }
    }
});

// --------------------------------

Ext.define('CWN2.button.GeoStyler', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-geostyler',

    constructor: function (config) {
        var btnOptions = config.options;

        this.config = config;
        this.superclass.constructor.call(this, {
            id: "geostyler",
            tooltip: CWN2.I18n.get("GeoStyler"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : "styler",
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            pressed: false
        });
    }
});

Ext.define('CWN2.button.GeoStyler.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-btn-geostyler-win',
    closeAction: 'hide',
    title: CWN2.I18n.get("Stili"),
    height: 700,
    width: 500,
    layout: "fit",
    resizable: false,

    constructor: function (config) {
        var me = this;

        this.items = [

            {
                xtype: 'cwn2-btn-geostyler-panel',
                layersConfig: config.layersConfig
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.Panel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-panel',
    height: "auto",
    width: "auto",
    frame: true,
    buttons: [
        {
            text: CWN2.I18n.get("Salva"),
            action: "geostyler-submit"
        },
        {
            text: CWN2.I18n.get("Annulla"),
            action: "geostyler-cancel"
        }
    ],
    autoScroll: true,
    constructor: function (config) {
        this.items = [
            {
                xtype: 'cwn2-btn-geostyler-layer-combo',
                layersConfig: config.layersConfig
            },
            {
                xtype: 'cwn2-btn-geostyler-rule-fieldset',
                layer: config.layersConfig[0]
            },
            {
                xtype: 'cwn2-btn-geostyler-tab-panel',
                rule: config.layersConfig[0].sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[0],
                labelRule: config.layersConfig[0].labelRule,
                columns: config.layersConfig[0].columns,
                geomType: config.layersConfig[0].geomType
            }

        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.LayerCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-layer-combo",
    fieldLabel: 'Layer',
    labelWidth: 40,
    mode: 'local',
    typeAhead: true,
    triggerAction: 'all',
    value: "Scegli un livello...",
    valueField: "name",
    displayField: "label",
    width: 300,
    constructor: function (config) {
        Ext.define('GeostylerLayers', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'name', type: 'string'},
                {name: 'label', type: 'string'},
                {name: 'geomType', type: 'string'},
                {name: 'legendUrl', type: 'string'},
                {name: 'labelRule'},
                {name: 'columns'},
                {name: 'sld'}
            ]
        });
        this.store = Ext.create('Ext.data.Store', {
            model: 'GeostylerLayers',
            data: {"layers": config.layersConfig},
            proxy: {
                type: 'memory',
                reader: {
                    type: 'json',
                    root: 'layers'
                }
            }
        });
        this.superclass.constructor.call(this);
        this.setValue(this.getStore().getAt(0).data.name);
    }
});

Ext.define('CWN2.button.GeoStyler.RuleCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-rule-combo",
    fieldLabel: 'Rule',
    labelWidth: 40,
    queryMode: 'local',
    typeAhead: true,
    triggerAction: 'all',
    width: 300,
    valueField: "Name",
    displayField: "Title",
    constructor: function (config) {
        var rules = [];
        Ext.each(config.layer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule, function (rule) {
            if (rule.name !== "LABEL") {

                rules.push({
                    "Name": rule.Name,
                    "Title": rule.Title,
                    "legendUrl": config.layer.legendUrl + "&RULE=" + rule.Name,
                    "MinScaleDenominator": parseFloat(rule.MinScaleDenominator),
                    "MaxScaleDenominator": parseFloat(rule.MaxScaleDenominator),
                    "Filter": rule.Filter,
                    "PointSymbolizer": rule.PointSymbolizer,
                    "LineSymbolizer": rule.LineSymbolizer,
                    "PolygonSymbolizer": rule.PolygonSymbolizer
                });
            }
        });


        Ext.define('GeostylerRules', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'Name', type: 'string'},
                {name: 'Title', type: 'string'},
                {name: 'legendUrl', type: 'string'},
                {name: 'MinScaleDenominator'},
                {name: 'MaxScaleDenominator'},
                {name: 'Filter'},
                {name: 'PointSymbolizer'},
                {name: 'LineSymbolizer'},
                {name: 'PolygonSymbolizer'}
            ]
        });
        this.store = Ext.create('Ext.data.Store', {
            model: 'GeostylerRules',
            data: {"rules": rules},
            proxy: {
                type: 'memory',
                reader: {
                    type: 'json',
                    root: 'rules'
                }
            }
        });

        this.superclass.constructor.call(this);
        this.setValue(this.getStore().getAt(0).data.Name);
    }
});


Ext.define('CWN2.button.GeoStyler.RuleFieldSet', {
    extend: 'Ext.form.FieldSet',
    alias: "widget.cwn2-btn-geostyler-rule-fieldset",
    title: ' ',
    border: false,
    layout: 'vbox',
    padding: '0',
    constructor: function (config) {
        this.items = [
            {
                xtype: 'fieldset',
                border: false,
                flex: 1,
                width: 350,
                layout: 'hbox',
                padding: '0',
                items: [
                    {
                        xtype: 'cwn2-btn-geostyler-rule-combo',
                        layer: config.layer
                    },
                    {
                        xtype: 'tbfill'
                    },
                    {
                        xtype: 'cwn2-btn-geostyler-rule-legend',
                        legendUrl: config.layer.legendUrl + "&RULE=" + config.layer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[0].Name
                    }
                ]

            }, {
                xtype: 'fieldset',
                border: false,
                flex: 1,
                width: 350,
                layout: 'hbox',
                padding: '0',
                items: [
                    {
                        xtype: 'cwn2-btn-geostyler-add-rule'
                    },
                    {
                        xtype: 'tbfill'
                    },
                    {
                        xtype: 'cwn2-btn-geostyler-delete-rule'
                    },
                    {
                        xtype: 'tbfill'
                    },

                    {
                        xtype: 'cwn2-btn-geostyler-change-rule-order'
                    },
                    {
                        xtype: 'tbfill'
                    },
                    {
                        xtype: 'cwn2-btn-geostyler-generate-rules'
                    }

                ]
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.AddRule', {
    extend: 'Ext.button.Button',
    alias: "widget.cwn2-btn-geostyler-add-rule",
    text: 'Add Rule',
    constructor: function (config) {
        this.superclass.constructor.call(this);
    }
});


Ext.define('CWN2.button.GeoStyler.DeleteRule', {
    extend: 'Ext.button.Button',
    alias: "widget.cwn2-btn-geostyler-delete-rule",
    text: 'Delete Rule',
    constructor: function (config) {
        this.superclass.constructor.call(this);
    }
});


Ext.define('CWN2.button.GeoStyler.ChangeRuleOrder', {
    extend: 'Ext.button.Button',
    alias: "widget.cwn2-btn-geostyler-change-rule-order",
    text: 'Cambia Ordine',
    constructor: function (config) {
        this.superclass.constructor.call(this);
    }
});


Ext.define('CWN2.button.GeoStyler.ChangeRuleOrder.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-btn-geostyler-change-rule-order-window',
    closeAction: 'destroy',
    title: CWN2.I18n.get("Cambia Ordine"),
    height: 500,
    width: 400,
    layout: "fit",
    resizable: false,

    constructor: function (config) {
        var me = this;

        var data = [];
        Ext.each(config.rules, function (rule, index) {
            if (rule.Name !== "LABEL") {
                data.push(rule);
            }
        });
        this.items = [
            {
                xtype: 'cwn2-btn-geostyler-change-rule-order-panel',
                rules: config.rules
            }
        ];

        this.superclass.constructor.call(this);
    }
});


Ext.define('CWN2.button.GeoStyler.ChangeRuleOrder.Panel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.cwn2-btn-geostyler-change-rule-order-panel',
    hideHeaders: true,
    selModel: {
        mode: 'MULTI'
    },
    viewConfig: {
        plugins: {
            ptype: 'gridviewdragdrop'
        }
    },
    columns: [
        {
            dataIndex: "Title",
            width: 380
        }
    ],
    width: 380,
    height: 150,
    buttons: [
        {
            text: CWN2.I18n.get("Salva"),
            action: "change-rule-order-submit"
        },
        {
            text: CWN2.I18n.get("Annulla"),
            action: "change-rule-order-cancel"
        }
    ],
    constructor: function (config) {

        var data = [];
        Ext.each(config.rules, function (rule, index) {
            if (rule.Name !== "LABEL") {
                data.push(rule);
            }
        });

        this.store = Ext.create('Ext.data.Store', {
            fields: [
                {
                    name: "Name", mapping: "Name"
                },
                {
                    name: "Title", mapping: "Title"
                }
            ],
            data: data
        })

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.GenerateRules', {
    extend: 'Ext.button.Button',
    alias: "widget.cwn2-btn-geostyler-generate-rules",
    text: 'Genera Rules',
    constructor: function (config) {
        this.superclass.constructor.call(this);
    }
});


Ext.define('CWN2.button.GeoStyler.GenerateRules.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-btn-geostyler-generate-rules-window',
    closeAction: 'destroy',
    title: CWN2.I18n.get("Genera Classificazione"),
    height: 500,
    width: 400,
    layout: "fit",
    resizable: false,

    constructor: function (config) {
        var me = this;

        this.items = [
            {
                xtype: 'cwn2-btn-geostyler-generate-rules-order-panel',
                columns: config.columns
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.GenerateRules.Panel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-generate-rules-order-panel',
    frame: true,
    labelWidth: 1,
    bodyStyle: "padding:5px 5px 0",
    height: 215,
    buttons: [
        {
            text: CWN2.I18n.get("Salva"),
            action: "change-generate-rules-submit"
        },
        {
            text: CWN2.I18n.get("Annulla"),
            action: "change-rule-order-cancel"
        }
    ],

    constructor: function (config) {
        var me = this;

        this.items = [
            {
                xtype: 'cwn2-btn-geostyler-generate-rules-columns-combo',
                columns: config.columns
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.GenerateRules.ColumnCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-generate-rules-columns-combo",
    fieldLabel: 'Campo',
    labelWidth: 40,
    queryMode: 'local',
    store: [],
    typeAhead: true,
    triggerAction: 'all',
    width: 300,
    previousValue: null,
    constructor: function (config) {
        var columns = [];
        Ext.each(config.columns, function (column) {
            if (column.type === "VARCHAR2") {
                columns.push(column.name);
            }
        });
        this.store = columns;
        this.superclass.constructor.call(this);
    }
});



Ext.define('CWN2.button.GeoStyler.TabPanel', {
    extend: 'Ext.tab.Panel',
    alias: 'widget.cwn2-btn-geostyler-tab-panel',
    activeTab: 0,
    bodyBorder: false,
    deferredRender: false,
    layoutOnTabChange: true,
    border: false,
    flex: 1,
    plain: true,
    items: [],
    constructor: function (config) {
        var me = this;
        me.items = [
            {
                xtype: 'cwn2-btn-geostyler-symbol-tab',
                rule: config.rule,
                geomType: config.geomType
            },
            {
                xtype: 'cwn2-btn-geostyler-advanced-tab',
                rule: config.rule
            },
            {
                xtype: 'cwn2-btn-geostyler-label-tab',
                labelRule: config.labelRule,
                columns: config.columns,
                geomType: config.geomType
            }
        ];

        this.superclass.constructor.call(this);
        this.setActiveTab(config.activeTab);
    }
});


Ext.define('CWN2.button.GeoStyler.LabelTab', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-label-tab',
    frame: false,
    title: "Label",
    labelWidth: 1,
    //height: 250,
    items: [],
    constructor: function (config) {
        var me = this;

        me.items = [
            {
                xtype: "cwn2-btn-geostyler-label-panel",
                labelRule: config.labelRule,
                columns: config.columns,
                geomType: config.geomType
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.LabelPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-label-panel',
    frame: true,
    //height: 250,
    title: "",
    items: [],
    constructor: function (config) {
        var me = this;

        me.items = [
            {
                xtype: "cwn2-btn-geostyler-label-columns-combo",
                columns: config.columns,
                labelRule: config.labelRule
            },
            {
                xtype: "cwn2-btn-geostyler-label-font-panel",
                labelRule: config.labelRule
            },
            {
                xtype: "cwn2-btn-geostyler-label-placement-panel",
                labelRule: config.labelRule,
                geomType: config.geomType
            }
        ];


        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.LabelColumnsCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-label-columns-combo",
    fieldLabel: 'Campo',
    labelWidth: 40,
    queryMode: 'local',
    store: [],
    typeAhead: true,
    triggerAction: 'all',
    width: 400,
    previousValue: null,
    listeners: {
        select: function (comp, record, index) {
            if (comp.getValue() == "" || comp.getValue() == "&nbsp;")
                comp.setValue(null);
        }
    },
    constructor: function (config) {
        var columns = [];
        Ext.each(config.columns, function (column) {
            columns.push(column.name);
        });
        this.store = columns;
        this.superclass.constructor.call(this);
        if (config.labelRule && config.labelRule.TextSymbolizer && config.labelRule.TextSymbolizer.Label && config.labelRule.TextSymbolizer.Label.PropertyName) {
            this.setValue(config.labelRule.TextSymbolizer.Label.PropertyName);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelFontPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-label-font-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this,
            labelRule = config.labelRule,
            fontFamily = null,
            fontSize = null,
            fontStyle = null,
            fontWeight = null,
            haloColor = null,
            haloRadius = null,
            minScale = null,
            maxScale = null,
            color = null;

        if (labelRule && labelRule.TextSymbolizer) {
            fontFamily = getCssParameter(labelRule.TextSymbolizer.Font, "font-family");
            fontSize = getCssParameter(labelRule.TextSymbolizer.Font, "font-size");
            fontStyle = getCssParameter(labelRule.TextSymbolizer.Font, "font-style");
            fontWeight = getCssParameter(labelRule.TextSymbolizer.Font, "font-weight");
            color = getCssParameter(labelRule.TextSymbolizer.Fill, "fill");
            minScale = parseFloat(labelRule.MinScaleDenominator);
            maxScale = parseFloat(labelRule.MaxScaleDenominator);
            haloColor = (labelRule.TextSymbolizer.Halo) ? getCssParameter(labelRule.TextSymbolizer.Halo.Fill, "fill") : null;
            haloRadius = (labelRule.TextSymbolizer.Halo) ? labelRule.TextSymbolizer.Halo.Radius: null;
        }

        me.items = [
            {
                xtype: 'cwn2-btn-geostyler-label-font-family-combo',
                fontFamily: fontFamily
            },
            {
                xtype: 'cwn2-btn-geostyler-label-font-size',
                fontSize: fontSize
            },
            {
                xtype: 'cwn2-btn-geostyler-label-font-style-combo',
                fontStyle: fontStyle
            },
            {
                xtype: 'cwn2-btn-geostyler-label-font-weight-combo',
                fontWeight: fontWeight
            },
            {
                xtype: 'cwn2-btn-geostyler-label-fill-color-field',
                color: color
            },
            {
                xtype: 'cwn2-btn-geostyler-label-halo-radius',
                haloRadius: haloRadius
            },
            {
                xtype: 'cwn2-btn-geostyler-label-halo-color-field',
                haloColor: haloColor
            },
            {
                xtype: "cwn2-btn-geostyler-label-min-scale",
                minScale: minScale
            },
            {
                xtype: "cwn2-btn-geostyler-label-max-scale",
                maxScale: maxScale
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.LabelPlacementPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-label-placement-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this;

        //if (config.geomType === "LINE") {
        //    me.items = [
        //        {
        //            xtype: "cwn2-btn-geostyler-label-point-placement-panel",
        //            labelRule: config.labelRule
        //        },
        //        {
        //            xtype: "cwn2-btn-geostyler-label-line-placement-panel",
        //            labelRule: config.labelRule
        //        }
        //    ]
        //} else {
        me.items = [
            {
                xtype: "cwn2-btn-geostyler-label-point-placement-panel",
                labelRule: config.labelRule
            }
        ]
        //}

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.LabelLinePlacementPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-label-line-placement-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this;
        me.items = [
            {
                xtype: "cwn2-btn-geostyler-label-line-perpendicular-offset",
                labelRule: config.labelRule
            }
        ]
        this.superclass.constructor.call(this);
    }
});


Ext.define('CWN2.button.GeoStyler.LabelPerpendicularOffset', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-label-line-perpendicular-offset",
    fieldLabel: 'Line Offset',
    labelWidth: 80,
    minValue: 1,
    width: 130,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.labelRule && config.labelRule.TextSymbolizer && config.labelRule.TextSymbolizer.LabelPlacement && config.labelRule.TextSymbolizer.LabelPlacement.LinePlacement && config.labelRule.TextSymbolizer.LabelPlacement.LinePlacement.PerpendicularOffset) {
            this.setValue(config.labelRule.TextSymbolizer.LabelPlacement.LinePlacement.PerpendicularOffset);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelPointPlacementPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-label-point-placement-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this;
        me.items = [
            {
                xtype: "cwn2-btn-geostyler-label-anchor-x",
                labelRule: config.labelRule
            },
            {
                xtype: "cwn2-btn-geostyler-label-anchor-y",
                labelRule: config.labelRule
            },
            {
                xtype: "cwn2-btn-geostyler-label-displacement-x",
                labelRule: config.labelRule
            },
            {
                xtype: "cwn2-btn-geostyler-label-displacement-y",
                labelRule: config.labelRule
            }
        ];
        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.LabelFontSize', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-label-font-size",
    fieldLabel: 'Size',
    labelWidth: 40,
    minValue: 1,
    width: 100,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if ((config.fontSize)) {
            this.setValue(parseInt(config.fontSize));
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelFontFamilyCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-label-font-family-combo",
    fieldLabel: 'Font',
    labelWidth: 40,
    queryMode: 'local',
    store: [],
    typeAhead: true,
    triggerAction: 'all',
    width: 250,
    previousValue: null,
    constructor: function (config) {
        this.store = GeoStyler.app.geoServerFontList;
        this.superclass.constructor.call(this);
        if (config.fontFamily) {
            this.setValue(config.fontFamily);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelFontStyleCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-label-font-style-combo",
    fieldLabel: 'Stile',
    labelWidth: 40,
    queryMode: 'local',
    store: ["normal", "italic", "oblique"],
    typeAhead: true,
    triggerAction: 'all',
    value: "normal",
    width: 150,
    previousValue: null,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.fontStyle) {
            this.setValue(config.fontStyle);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelFontWeightCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-label-font-weight-combo",
    fieldLabel: 'Peso',
    labelWidth: 40,
    queryMode: 'local',
    store: ["normal", "bold"],
    typeAhead: true,
    triggerAction: 'all',
    value: "normal",
    width: 150,
    previousValue: null,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.fontWeight) {
            this.setValue(config.fontWeight);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelFillColorField', {
    extend: 'Ext.ux.ColorField',
    alias: "widget.cwn2-btn-geostyler-label-fill-color-field",
    fieldLabel: 'Color',
    labelWidth: 40,
    width: 200,
    value: '#ffffff',
    msgTarget: 'qtip',
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.color) {
            this.setValue(config.color);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelHaloColorField', {
    extend: 'Ext.ux.ColorField',
    alias: "widget.cwn2-btn-geostyler-label-halo-color-field",
    fieldLabel: 'Halo Color',
    labelWidth: 60,
    width: 200,
    value: '#ffffff',
    msgTarget: 'qtip',
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.haloColor) {
            this.setValue(config.haloColor);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelHaloRadius', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-label-halo-radius",
    fieldLabel: 'Halo',
    labelWidth: 60,
    minValue: 0,
    width: 120,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if ((config.haloRadius)) {
            this.setValue(parseInt(config.haloRadius));
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelMinScaleDenominator', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-label-min-scale",
    fieldLabel: 'Denom. Scala Min.',
    labelWidth: 120,
    minValue: 1,
    width: 300,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if ((config.minScale)) {
            this.setValue(config.minScale);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelMaxScaleDenominator', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-label-max-scale",
    fieldLabel: 'Denom. Scala Max.',
    labelWidth: 120,
    minValue: 1,
    width: 300,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if ((config.maxScale)) {
            this.setValue(config.maxScale);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelAnchorX', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-label-anchor-x",
    fieldLabel: 'Anchor X',
    labelWidth: 60,
    minValue: 0,
    maxValue: 1,
    width: 110,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.labelRule && config.labelRule.TextSymbolizer && config.labelRule.TextSymbolizer.LabelPlacement && config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement && config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.AnchorPoint) {
            this.setValue(config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.AnchorPoint.AnchorPointX);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelAnchorY', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-label-anchor-y",
    fieldLabel: 'Anchor Y',
    labelWidth: 60,
    minValue: 0,
    maxValue: 1,
    width: 110,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.labelRule && config.labelRule.TextSymbolizer && config.labelRule.TextSymbolizer.LabelPlacement && config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement && config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.AnchorPoint) {
            this.setValue(config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.AnchorPoint.AnchorPointY);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelDisplacementX', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-label-displacement-x",
    fieldLabel: 'Displacement X',
    labelWidth: 90,
    minValue: 0,
    maxValue: 100,
    width: 140,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.labelRule && config.labelRule.TextSymbolizer && config.labelRule.TextSymbolizer.LabelPlacement && config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement && config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.Displacement) {
            this.setValue(config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.Displacement.DisplacementX);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.LabelDisplacementY', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-label-displacement-y",
    fieldLabel: 'Displacement Y',
    labelWidth: 90,
    minValue: 0,
    maxValue: 100,
    width: 140,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.labelRule && config.labelRule.TextSymbolizer && config.labelRule.TextSymbolizer.LabelPlacement && config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement && config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.Displacement) {
            this.setValue(config.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.Displacement.DisplacementY);
        }
    }
});


Ext.define('CWN2.button.GeoStyler.AdvancedTab', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-advanced-tab',
    frame: false,
    title: "Avanzate",
    labelWidth: 1,
    //height: 250,
    items: [],
    constructor: function (config) {
        var me = this;


        me.items = [
            {
                xtype: "cwn2-btn-geostyler-advanced-panel",
                rule: config.rule
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.AdvancedPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-advanced-panel',
    frame: true,
    //height: 250,
    title: "",
    items: [],
    buttons: [
        {
            text: CWN2.I18n.get("Validazione"),
            action: "geostyler-validate-cql"
        }
    ],
    constructor: function (config) {
        var me = this;


        me.items = [
            {
                xtype: "cwn2-btn-geostyler-rule-title",
                rule: config.rule
            },
            {
                xtype: "cwn2-btn-geostyler-min-scale",
                rule: config.rule
            },
            {
                xtype: "cwn2-btn-geostyler-max-scale",
                rule: config.rule
            },
            {
                xtype: "cwn2-btn-geostyler-cql-filter",
                rule: config.rule
            }

        ];

        this.superclass.constructor.call(this);
    }
});


Ext.define('CWN2.button.GeoStyler.RuleTitle', {
    extend: 'Ext.form.field.Text',
    alias: "widget.cwn2-btn-geostyler-rule-title",
    fieldLabel: 'Titolo',
    labelWidth: 70,
    width: 300,
    value: "Classe Base",
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if ((config.rule.Title)) {
            this.setValue(config.rule.Title);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.MinScaleDenominator', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-min-scale",
    fieldLabel: 'Denom. Scala Min.',
    labelWidth: 120,
    minValue: 1,
    width: 300,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if ((config.rule.MinScaleDenominator)) {
            this.setValue(config.rule.MinScaleDenominator);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.MaxScaleDenominator', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-max-scale",
    fieldLabel: 'Denom. Scala Max.',
    labelWidth: 120,
    minValue: 1,
    width: 300,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if ((config.rule.MaxScaleDenominator)) {
            this.setValue(config.rule.MaxScaleDenominator);
        }
    }
});


Ext.define('CWN2.button.GeoStyler.CQLFilter', {
    extend: 'Ext.form.field.TextArea',
    alias: "widget.cwn2-btn-geostyler-cql-filter",
    fieldLabel: 'Filtro',
    labelWidth: 50,
    width: 450,
    rows: 10,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if ((config.rule.Filter)) {
            var cqlFilter = CWN2.Util.transformFilterJson2CQL(config.rule.Filter);
            this.setValue(cqlFilter);
        }
    }
});


Ext.define('CWN2.button.GeoStyler.SymbolTab', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-symbol-tab',
    frame: false,
    title: "Simbologia",
    labelWidth: 1,
    //height: 250,
    items: [],
    constructor: function (config) {
        var me = this,
            geomType = config.geomType,
            xType = null;

        switch (geomType) {
            case "POLYGON":
                xType = 'cwn2-btn-geostyler-polygon-panel'
                break;
            case "LINE":
                xType = 'cwn2-btn-geostyler-line-panel'
                break;
            case "POINT":
                xType = 'cwn2-btn-geostyler-point-panel'
                break;
        }

        me.items = [
            {
                xtype: xType,
                rule: config.rule
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.PointPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-point-panel',
    frame: true,
    //height: 250,
    title: "POINT",
    items: [],
    constructor: function (config) {
        var me = this,
            rule = config.rule,
            pointType,
            pointTab;

        if (!rule.PointSymbolizer) {
            console.log("Manca elemento <PointSymbolizer>")
            return;
        }
        if (!rule.PointSymbolizer.Graphic) {
            console.log("Manca elemento <Graphic>")
            return;
        }
        if (rule.PointSymbolizer.Graphic.ExternalGraphic) {
            pointType = "Graphic";
            pointTab = {xtype: "cwn2-btn-geostyler-graphic-point-panel", rule: rule};
        }

        if (rule.PointSymbolizer.Graphic.Mark) {
            pointType = "WKN";
            pointTab = {xtype: "cwn2-btn-geostyler-wkn-point-panel", rule: rule};
        }

        me.items = [
            {
                xtype: "cwn2-btn-geostyler-point-type-combo",
                rule: rule,
                pointType: pointType
            },
            pointTab
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.GraphicPointPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-graphic-point-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this,
            graphic = config.rule.PointSymbolizer.Graphic;

        me.items = [
            {
                xtype: 'cwn2-btn-geostyler-external-graphic-url',
                externalGraphic: graphic.ExternalGraphic.OnlineResource["_xlink:href"]
            },
            {
                xtype: 'cwn2-btn-geostyler-graphic-format-combo',
                graphicFormat: graphic.ExternalGraphic.Format
            },
            {
                xtype: 'cwn2-btn-geostyler-symbol-size',
                size: graphic.Size
            },
            {
                xtype: 'cwn2-btn-geostyler-external-graphic-img',
                externalGraphic: graphic.ExternalGraphic.OnlineResource["_xlink:href"],
                size: graphic.Size
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.WknPointPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-wkn-point-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this,
            mark = config.rule.PointSymbolizer.Graphic.Mark;

        setDefaultMark(mark, "POINT");

        var fillColor = getCssParameter(mark.Fill, "fill");
        var fillOpacity = getCssParameter(mark.Fill, "fill-opacity") || "1";
        var strokeColor = getCssParameter(mark.Stroke, "stroke");
        var strokeWidth = getCssParameter(mark.Stroke, "stroke-width");
        var strokeOpacity = getCssParameter(mark.Stroke, "stroke-opacity");

        me.items = [
            {
                xtype: 'cwn2-btn-geostyler-symbol-combo',
                symbol: mark.WellKnownName
            },
            {
                xtype: 'cwn2-btn-geostyler-symbol-size',
                size: config.rule.PointSymbolizer.Graphic.Size
            },
            {
                xtype: 'cwn2-btn-geostyler-fill-color-field',
                color: fillColor
            },
            {
                xtype: 'cwn2-btn-geostyler-fill-opacity-slider',
                opacity: fillOpacity
            },
            {
                xtype: 'cwn2-btn-geostyler-stroke-color-field',
                color: strokeColor
            },
            {
                xtype: 'cwn2-btn-geostyler-stroke-width',
                width: strokeWidth
            },
            {
                xtype: 'cwn2-btn-geostyler-stroke-opacity-slider',
                opacity: strokeOpacity
            }
        ];
        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.LinePanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-line-panel',
    frame: false,
    //height: 250,
    title: "LINE",
    items: [],
    constructor: function (config) {
        var me = this;

        me.items = [
            {
                xtype: "cwn2-btn-geostyler-stroke-panel",
                rule: config.rule
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.PolygonPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-polygon-panel',
    frame: false,
    //height: 250,
    title: "POLYGON",
    items: [],
    constructor: function (config) {
        var me = this;

        me.items = [
            {
                xtype: "cwn2-btn-geostyler-stroke-panel",
                rule: config.rule
            },
            {
                xtype: "cwn2-btn-geostyler-polygon-fill-panel",
                rule: config.rule
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.PolygonFillPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-polygon-fill-panel',
    frame: true,
    //height: 250,
//    title: "Fill",
    items: [],
    constructor: function (config) {
        var me = this,
            rule = config.rule,
            symbolizer = rule.PolygonSymbolizer;

        var fillType,
            fillTab = null;

        if (!symbolizer.Fill) {
            fillType = "None";
            fillTab = null;
        } else {
            if (!symbolizer.Fill.GraphicFill) {
                fillType = "Simple";
                fillTab = {xtype: "cwn2-btn-geostyler-simple-fill-panel", rule: rule};
            } else {
                if (symbolizer.Fill.GraphicFill.Graphic.ExternalGraphic) {
                    fillType = "Graphic";
                    fillTab = {xtype: "cwn2-btn-geostyler-graphic-fill-panel", rule: rule};
                }
                if (symbolizer.Fill.GraphicFill.Graphic.Mark) {
                    fillType = "Hatch";
                    fillTab = {xtype: "cwn2-btn-geostyler-hatch-fill-panel", rule: rule};
                }
            }
        }

        me.items = [
            {
                xtype: "cwn2-btn-geostyler-fill-type-combo",
                rule: rule,
                fillType: fillType
            },
            fillTab
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.SimpleFillPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-simple-fill-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this,
            rule = config.rule,
            symbolizer = rule.PolygonSymbolizer;


        var fillColor = getCssParameter(symbolizer.Fill, "fill");
        var fillOpacity = getCssParameter(symbolizer.Fill, "fill-opacity") || "1";

        me.items = [
            {
                xtype: 'cwn2-btn-geostyler-fill-color-field',
                color: fillColor
            },
            {
                xtype: 'cwn2-btn-geostyler-fill-opacity-slider',
                opacity: fillOpacity
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.HatchFillPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-hatch-fill-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this,
            rule = config.rule,
            symbolizer = rule.PolygonSymbolizer,
            graphic = symbolizer.Fill.GraphicFill.Graphic;

        setDefaultMark(graphic.Mark, "POLYGON");

        var graphicName = graphic.Mark.WellKnownName;
        var symbolSize = graphic.Size;
        var fillColor = getCssParameter(graphic.Mark.Fill, "fill");
        var fillOpacity = getCssParameter(graphic.Mark.Fill, "fill-opacity") || "1";
        var strokeColor = getCssParameter(graphic.Mark.Stroke, "stroke");
        var strokeWidth = getCssParameter(graphic.Mark.Stroke, "stroke-width");
        var strokeOpacity = getCssParameter(graphic.Mark.Stroke, "stroke-opacity");
        var strokeDasharray = getCssParameter(symbolizer.Stroke, "stroke-dasharray");

        me.items = [
            {
                xtype: 'cwn2-btn-geostyler-hatch-combo',
                symbol: graphicName
            },
            {
                xtype: 'cwn2-btn-geostyler-symbol-size',
                size: symbolSize
            },
            {
                xtype: 'cwn2-btn-geostyler-hatch-stroke-color-field',
                color: strokeColor
            },
            {
                xtype: 'cwn2-btn-geostyler-hatch-stroke-width',
                width: strokeWidth
            },
            {
                xtype: 'cwn2-btn-geostyler-hatch-stroke-opacity-slider',
                opacity: strokeOpacity
            },
            {
                xtype: 'cwn2-btn-geostyler-hatch-fill-color-field',
                color: fillColor
            },
            {
                xtype: 'cwn2-btn-geostyler-hatch-fill-opacity-slider',
                opacity: fillOpacity
            }

        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.GraphicFillPanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-graphic-fill-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this,
            rule = config.rule,
            graphic = rule.PolygonSymbolizer.Fill.GraphicFill.Graphic;

        me.items = [
            {
                xtype: 'cwn2-btn-geostyler-external-graphic-url',
                externalGraphic: graphic.ExternalGraphic.OnlineResource["_xlink:href"]
            },
            {
                xtype: 'cwn2-btn-geostyler-graphic-format-combo',
                graphicFormat: graphic.ExternalGraphic.Format
            },
            {
                xtype: 'cwn2-btn-geostyler-symbol-size',
                size: graphic.Size
            }, {
                xtype: 'cwn2-btn-geostyler-external-graphic-img',
                externalGraphic: graphic.ExternalGraphic.OnlineResource["_xlink:href"],
                size: graphic.Size
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.StrokePanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-stroke-panel',
    frame: true,
    //height: 200,
    items: [],
    constructor: function (config) {
        var me = this,
            rule = config.rule,
            symbolizer = rule.LineSymbolizer || rule.PolygonSymbolizer;

        var strokeType,
            strokeTab = null;

        if (symbolizer.Stroke || symbolizer.Stroke === "") {
            if (symbolizer.Stroke.GraphicStroke) {
                strokeType = "WKN";
                strokeTab = {xtype: "cwn2-btn-geostyler-wkn-stroke-panel", rule: rule};
            } else {
                strokeType = "Simple";
                strokeTab = {xtype: "cwn2-btn-geostyler-simple-stroke-panel", rule: rule};
            }
        } else {
            strokeType = "None";
            strokeTab = null;
        }


        me.items = [
            {
                xtype: "cwn2-btn-geostyler-stroke-type-combo",
                strokeType: strokeType,
                rule: rule
            },
            strokeTab
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.SimpleStrokePanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-simple-stroke-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this,
            rule = config.rule,
            symbolizer = rule.LineSymbolizer || rule.PolygonSymbolizer;

        if (symbolizer.Stroke === "") {
            symbolizer.Stroke = {
                "CssParameter": [
                    {
                        "_name": "stroke",
                        "__text": "#000000"
                    },
                    {
                        "_name": "stroke-width",
                        "__text": "1"
                    }
                ]
            }
        }
        var strokeColor = getCssParameter(symbolizer.Stroke, "stroke") || "#000000";
        var strokeWidth = getCssParameter(symbolizer.Stroke, "stroke-width");
        var strokeOpacity = getCssParameter(symbolizer.Stroke, "stroke-opacity");
        var strokeDasharray = getCssParameter(symbolizer.Stroke, "stroke-dasharray");

        me.items = [
            {
                xtype: 'cwn2-btn-geostyler-stroke-color-field',
                color: strokeColor
            },
            {
                xtype: 'cwn2-btn-geostyler-stroke-width',
                width: strokeWidth
            },
            {
                xtype: 'cwn2-btn-geostyler-stroke-opacity-slider',
                opacity: strokeOpacity
            },
            {
                xtype: 'cwn2-btn-geostyler-stroke-dasharray',
                strokeDashstyle: strokeDasharray
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.WknStrokePanel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-geostyler-wkn-stroke-panel',
    frame: true,
    //height: 60,
    items: [],
    constructor: function (config) {
        var me = this,
            rule = config.rule,
            symbolizer = rule.LineSymbolizer || rule.PolygonSymbolizer,
            graphic = symbolizer.Stroke.GraphicStroke.Graphic;

        setDefaultMark(graphic.Mark, "LINE");

        var graphicName = graphic.Mark.WellKnownName;
        var symbolSize = graphic.Size;
        var fillColor = getCssParameter(graphic.Mark.Fill, "fill");
        var fillOpacity = getCssParameter(graphic.Mark.Fill, "fill-opacity") || "1";
        var strokeColor = getCssParameter(graphic.Mark.Stroke, "stroke");
        var strokeWidth = getCssParameter(graphic.Mark.Stroke, "stroke-width");
        var strokeOpacity = getCssParameter(graphic.Mark.Stroke, "stroke-opacity");
        var strokeDasharray = getCssParameter(symbolizer.Stroke, "stroke-dasharray");

        me.items = [
            {
                xtype: 'cwn2-btn-geostyler-symbol-combo',
                symbol: graphicName
            },
            {
                xtype: 'cwn2-btn-geostyler-symbol-size',
                size: symbolSize
            },
            {
                xtype: 'cwn2-btn-geostyler-fill-color-field',
                color: fillColor
            },
            //{
            //    xtype: 'cwn2-btn-geostyler-fill-opacity-slider',
            //    opacity: fillOpacity
            //},
            {
                xtype: 'cwn2-btn-geostyler-stroke-color-field',
                color: strokeColor
            },
            {
                xtype: 'cwn2-btn-geostyler-stroke-width',
                width: strokeWidth
            },
            //{
            //    xtype: 'cwn2-btn-geostyler-stroke-opacity-slider',
            //    opacity: strokeOpacity
            //},
            {
                xtype: 'cwn2-btn-geostyler-stroke-dasharray',
                strokeDashstyle: strokeDasharray
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.FillColorField', {
    extend: 'Ext.ux.ColorField',
    alias: "widget.cwn2-btn-geostyler-fill-color-field",
    fieldLabel: 'Fill Color',
    labelWidth: 50,
    width: 200,
    value: '#ffffff',
    msgTarget: 'qtip',
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.color) {
            this.setValue(config.color);
        }
    }
});


Ext.define('CWN2.button.GeoStyler.HatchFillColorField', {
    extend: 'Ext.ux.ColorField',
    alias: "widget.cwn2-btn-geostyler-hatch-fill-color-field",
    fieldLabel: 'Fill Color',
    labelWidth: 50,
    width: 200,
    value: '#ffffff',
    msgTarget: 'qtip',
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.color) {
            this.setValue(config.color);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.FillOpacitySlider', {
    extend: 'Ext.slider.Single',
    alias: "widget.cwn2-btn-geostyler-fill-opacity-slider",
    fieldLabel: 'Fill Opacity',
    labelWidth: 50,
    width: 200,
    value: 100,
    //increment: 5,
    minValue: 0,
    maxValue: 100,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.opacity) {
            this.setValue(100 * parseFloat(config.opacity));
        }
    }
});


Ext.define('CWN2.button.GeoStyler.HatchFillOpacitySlider', {
    extend: 'Ext.slider.Single',
    alias: "widget.cwn2-btn-geostyler-hatch-fill-opacity-slider",
    fieldLabel: 'Fill Opacity',
    labelWidth: 50,
    width: 200,
    value: 100,
    //increment: 5,
    minValue: 0,
    maxValue: 100,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.opacity) {
            this.setValue(100 * parseFloat(config.opacity));
        }
    }
});
Ext.define('CWN2.button.GeoStyler.StrokeColorField', {
    extend: 'Ext.ux.ColorField',
    alias: "widget.cwn2-btn-geostyler-stroke-color-field",
    fieldLabel: 'Stroke Color',
    labelWidth: 50,
    width: 200,
    value: '#ffffff',
    msgTarget: 'qtip',
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.color) {
            this.setValue(config.color);
        }
    }
});

Ext.define('CWN2.button.GeoStyler.HatchStrokeColorField', {
    extend: 'Ext.ux.ColorField',
    alias: "widget.cwn2-btn-geostyler-hatch-stroke-color-field",
    fieldLabel: 'Stroke Color',
    labelWidth: 50,
    width: 200,
    value: '#ffffff',
    msgTarget: 'qtip',
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.color) {
            this.setValue(config.color);
        }
    }
});


Ext.define('CWN2.button.GeoStyler.StrokeOpacitySlider', {
    extend: 'Ext.slider.Single',
    alias: "widget.cwn2-btn-geostyler-stroke-opacity-slider",
    fieldLabel: 'Stroke Opacity',
    labelWidth: 50,
    width: 200,
    value: 100,
    //increment: 5,
    minValue: 0,
    maxValue: 100,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.opacity) {
            this.setValue(100 * parseFloat(config.opacity));
        }
    }
});

Ext.define('CWN2.button.GeoStyler.HatchStrokeOpacitySlider', {
    extend: 'Ext.slider.Single',
    alias: "widget.cwn2-btn-geostyler-hatch-stroke-opacity-slider",
    fieldLabel: 'Stroke Opacity',
    labelWidth: 50,
    width: 200,
    value: 100,
    //increment: 5,
    minValue: 0,
    maxValue: 100,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.opacity) {
            this.setValue(100 * parseFloat(config.opacity));
        }
    }
});

Ext.define('CWN2.button.GeoStyler.StrokeTypeCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-stroke-type-combo",
    fieldLabel: 'Stroke',
    labelWidth: 40,
    queryMode: 'local',
    store: [],
    typeAhead: true,
    triggerAction: 'all',
    value: "Simple",
    width: 200,
    previousValue: null,
    constructor: function (config) {
        if (config.rule.LineSymbolizer) {
            this.store = [
                ["Simple", "Simple"],
                ["WKN", "WKN"]
            ]
        } else {
            this.store = [
                ["None", "None"],
                ["Simple", "Simple"]
            ]

        }
        this.superclass.constructor.call(this);
        this.setValue(config.strokeType);
        this.previousValue = config.strokeType;
    }

});

Ext.define('CWN2.button.GeoStyler.StrokeWidth', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-stroke-width",
    fieldLabel: 'Width',
    labelWidth: 50,
    width: 100,
    maxValue: 99,
    minValue: 0,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        this.setValue(parseFloat(config.width));
    }
});

Ext.define('CWN2.button.GeoStyler.HatchStrokeWidth', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-hatch-stroke-width",
    fieldLabel: 'Width',
    labelWidth: 50,
    width: 100,
    maxValue: 99,
    minValue: 0.5,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        this.setValue(parseFloat(config.width));
    }
});

Ext.define('CWN2.button.GeoStyler.StrokeDashStyle1', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-stroke-dashstyle1",
    width: 45,
    flex: 1,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        this.setValue(parseFloat(config.value));
    }
});

Ext.define('CWN2.button.GeoStyler.StrokeDashStyle2', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-stroke-dashstyle2",
    width: 45,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        this.setValue(parseFloat(config.value));
    }
});

Ext.define('CWN2.button.GeoStyler.StrokeDashArray', {
    extend: 'Ext.form.FieldContainer',
    alias: "widget.cwn2-btn-geostyler-stroke-dasharray",
    fieldLabel: 'Dash',
    labelWidth: 50,
    width: 190,
    layout: 'hbox',
    items: [],
    constructor: function (config) {

        var dashArray, value1, value2;

        if (config.strokeDashstyle) {
            dashArray = config.strokeDashstyle.split(" ");
            value1 = dashArray[0];
            value2 = dashArray[1];
        }

        this.items = [
            {
                xtype: 'cwn2-btn-geostyler-stroke-dashstyle1',
                flex: 1,
                value: value1
            },
            {
                xtype: 'tbfill'
            },
            {
                xtype: 'cwn2-btn-geostyler-stroke-dashstyle2',
                flex: 1,
                value: value2
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.GeoStyler.SymbolCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-symbol-combo",
    fieldLabel: 'Symbol',
    labelWidth: 40,
    queryMode: 'local',
    store: [
        ["circle", "circle"],
        ["square", "square"],
        ["triangle", "triangle"],
        ["star", "star"],
        ["cross", "cross"],
        ["x", "x"]
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "Simple",
    width: 200,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.symbol) {
            this.setValue(config.symbol);
        } else {
            this.setValue("circle");
        }
    }
});

Ext.define('CWN2.button.GeoStyler.ExternalGraphicUrl', {
    extend: 'Ext.form.field.TextArea',
    alias: "widget.cwn2-btn-geostyler-external-graphic-url",
    fieldLabel: 'Url',
    labelWidth: 50,
    width: 400,
    value: "http://geoportale.regione.liguria.it/geoservices/geoserver_sld/sld/img/point-black.png",
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if ((config.externalGraphic)) {
            this.setValue(config.externalGraphic);
        }
    }
});


Ext.define('CWN2.button.GeoStyler.RuleLegend', {
    extend: 'Ext.Img',
    alias: "widget.cwn2-btn-geostyler-rule-legend",
    width: 20,
    height: 20,
    value: "",
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.legendUrl) {
            this.setSrc(config.legendUrl);
        }
    }
});


Ext.define('CWN2.button.GeoStyler.ExternalGraphicImg', {
    extend: 'Ext.Img',
    alias: "widget.cwn2-btn-geostyler-external-graphic-img",
    fieldLabel: 'Img',
    labelWidth: 50,
    width: 20,
    height: 20,
    value: "http://geoportale.regione.liguria.it/geoservices/geoserver_sld/sld/img/point-black.png",
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.externalGraphic) {
            this.setSrc(config.externalGraphic);
        }
        if (config.size) {
            this.setHeight(parseInt(config.size));
            this.setWidth(parseInt(config.size));
        }
    }
});

Ext.define('CWN2.button.GeoStyler.GraphicFormatCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-graphic-format-combo",
    fieldLabel: 'Formato',
    labelWidth: 50,
    queryMode: 'local',
    store: [
        ["image/png", "png"],
        ["image/jpeg", "jpeg"],
        ["image/gif", "gif"],
        ["image/svg+xml", "svg"]
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "Simple",
    width: 120,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        if (config.graphicFormat) {
            this.setValue(config.graphicFormat);
        } else {
            this.setValue("image/png");
        }
    }
});

Ext.define('CWN2.button.GeoStyler.HatchCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-hatch-combo",
    fieldLabel: 'Symbol',
    labelWidth: 40,
    queryMode: 'local',
    store: [
        ["circle", "circle"],
        ["square", "square"],
        ["triangle", "triagle"],
        ["star", "star"],
        ["cross", "cross"],
        ["x", "x"],
        ["shape://vertline", "shape://vertline"],
        ["shape://horline", "shape://horline"],
        ["shape://slash", "shape://slash"],
        ["shape://backslash", "shape://backslash"],
        ["shape://dot", "shape://dot"],
        ["shape://plus", "shape://plus"],
        ["shape://times", "shape://times"]
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "Simple",
    width: 200,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        this.setValue(config.symbol);
    }
});

Ext.define('CWN2.button.GeoStyler.SymbolSize', {
    extend: 'Ext.form.field.Number',
    alias: "widget.cwn2-btn-geostyler-symbol-size",
    fieldLabel: 'Size',
    labelWidth: 50,
    width: 100,
    maxValue: 99,
    minValue: 0.5,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        this.setValue(parseFloat(config.size));
    }
});

Ext.define('CWN2.button.GeoStyler.PointTypeCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-point-type-combo",
    fieldLabel: 'Type',
    labelWidth: 40,
    queryMode: 'local',
    store: [
        ["WKN", "WKN"],
        ["Graphic", "Graphic"]
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "Simple",
    width: 200,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        this.setValue(config.pointType);
    }
});

Ext.define('CWN2.button.GeoStyler.FillTypeCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-geostyler-fill-type-combo",
    fieldLabel: 'Fill',
    labelWidth: 40,
    queryMode: 'local',
    store: [
        ["None", "None"],
        ["Simple", "Simple"],
        ["Graphic", "Graphic"],
        ["Hatch", "Hatch"]
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "Simple",
    width: 200,
    previousValue: null,
    constructor: function (config) {
        this.superclass.constructor.call(this);
        this.setValue(config.fillType);
        this.previousValue = config.fillType;
    }
});


// CONTROLLER
Ext.define('CWN2.controller.button.geostyler', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.GeoStyler'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-geostyler'
        },
        {
            ref: 'win',
            selector: 'cwn2-btn-geostyler-win'
        },
        {
            ref: 'panel',
            selector: 'cwn2-btn-geostyler-panel'
        },
        {
            ref: 'layerCombo',
            selector: 'cwn2-btn-geostyler-layer-combo'
        },
        {
            ref: 'ruleCombo',
            selector: 'cwn2-btn-geostyler-rule-combo'
        },
        {
            ref: 'ruleFieldset',
            selector: 'cwn2-btn-geostyler-rule-fieldset'
        },
        {
            ref: 'tabPanel',
            selector: 'cwn2-btn-geostyler-tab-panel'
        },
        {
            ref: 'labelPanel',
            selector: 'cwn2-btn-geostyler-label-panel'
        },
        {
            ref: 'labelFontPanel',
            selector: 'cwn2-btn-geostyler-label-font-panel'
        },
        {
            ref: 'labelPlacementPanel',
            selector: 'cwn2-btn-geostyler-label-placement-panel'
        },
        {
            ref: 'pointTypeCombo',
            selector: 'cwn2-btn-geostyler-point-type-combo'
        },
        {
            ref: 'strokeTypeCombo',
            selector: 'cwn2-btn-geostyler-stroke-type-combo'
        },
        {
            ref: 'strokePanel',
            selector: 'cwn2-btn-geostyler-stroke-panel'
        },
        {
            ref: 'fillTypeCombo',
            selector: 'cwn2-btn-geostyler-fill-type-combo'
        },
        {
            ref: 'fillPanel',
            selector: 'cwn2-btn-geostyler-polygon-fill-panel'
        },
        {
            ref: 'pointPanel',
            selector: 'cwn2-btn-geostyler-point-panel'
        },
        {
            ref: 'dashLine',
            selector: 'cwn2-btn-geostyler-stroke-dashstyle1'
        },
        {
            ref: 'dashSpace',
            selector: 'cwn2-btn-geostyler-stroke-dashstyle2'
        },
        {
            ref: 'externalGraphicImg',
            selector: 'cwn2-btn-geostyler-external-graphic-img'
        },
        {
            ref: 'cqlFilter',
            selector: 'cwn2-btn-geostyler-cql-filter'
        },
        {
            ref: 'ruleLegend',
            selector: 'cwn2-btn-geostyler-rule-legend'
        },
        {
            ref: 'changeRuleOrderWin',
            selector: 'cwn2-btn-geostyler-change-rule-order-window'
        },
        {
            ref: 'changeRuleOrderPanel',
            selector: 'cwn2-btn-geostyler-change-rule-order-panel'
        },
        {
            ref: 'generateRulesWin',
            selector: 'cwn2-btn-geostyler-generate-rules-window'
        },
        {
            ref: 'generateRulesColumnCombo',
            selector: 'cwn2-btn-geostyler-generate-rules-columns-combo'
        }


    ],

    init: function (application) {
        CWN2.Util.log('CWN2.controller.button.geostyler: init');

        this.control({
            'button[action=geostyler-submit]': {
                click: this.onSubmitButtonClick
            },
            'button[action=geostyler-cancel]': {
                click: this.onCancelButtonClick
            },
            'button[action=geostyler-validate-cql]': {
                click: this.onValidateCQLButtonClick
            },
            'button[action=change-rule-order-submit]': {
                click: this.onChangeRuleOrderSubmitButtonClick
            },
            'button[action=change-rule-order-cancel]': {
                click: this.onChangeRuleOrderCancelButtonClick
            },
            'button[action=change-generate-rules-submit]': {
                click: this.onChangeGenerateRulesSubmitButtonClick
            },
            'cwn2-btn-geostyler-layer-combo': {
                select: this.onLayerSelect
            },
            'cwn2-btn-geostyler-rule-combo': {
                select: this.onRuleSelect
            },
            'cwn2-btn-geostyler-rule-title': {
                change: this.onRuleTitleChange
            },
            'cwn2-btn-geostyler-min-scale': {
                change: this.onMinScaleChange
            },
            'cwn2-btn-geostyler-max-scale': {
                change: this.onMaxScaleChange
            },
            'cwn2-btn-geostyler-point-type-combo': {
                select: this.onPointTypeSelect
            },
            'cwn2-btn-geostyler-stroke-type-combo': {
                select: this.onStrokeTypeSelect
            },
            'cwn2-btn-geostyler-fill-type-combo': {
                select: this.onFillTypeSelect
            },
            'cwn2-button-geostyler': {
                click: this.onClick
            },
            'cwn2-btn-geostyler-add-rule': {
                click: this.onAddRuleClick
            },
            'cwn2-btn-geostyler-delete-rule': {
                click: this.onDeleteRuleClick
            },
            'cwn2-btn-geostyler-change-rule-order': {
                click: this.onChangeRuleOrderClick
            },
            'cwn2-btn-geostyler-generate-rules': {
                click: this.onGenerateRulesClick
            },
            //
            'cwn2-btn-geostyler-symbol-combo': {
                select: this.onSymbolComboSelect
            },
            'cwn2-btn-geostyler-hatch-combo': {
                select: this.onHatchComboSelect
            },
            'cwn2-btn-geostyler-symbol-size': {
                change: this.onSymbolSizeChange
            },
            'cwn2-btn-geostyler-fill-color-field': {
                select: this.onFillColorFieldChange
            },
            'cwn2-btn-geostyler-hatch-fill-color-field': {
                select: this.onHatchFillColorFieldChange
            },
            'cwn2-btn-geostyler-stroke-color-field': {
                select: this.onStrokeColorFieldChange
            },
            'cwn2-btn-geostyler-hatch-stroke-color-field': {
                select: this.onHatchStrokeColorFieldChange
            },
            'cwn2-btn-geostyler-stroke-width': {
                change: this.onStrokeWidthChange
            },
            'cwn2-btn-geostyler-hatch-stroke-width': {
                change: this.onHatchStrokeWidthChange
            },
            'cwn2-btn-geostyler-stroke-dashstyle1': {
                change: this.onStrokeDashStyleChange
            },
            'cwn2-btn-geostyler-stroke-dashstyle2': {
                change: this.onStrokeDashStyleChange
            },
            'cwn2-btn-geostyler-stroke-opacity-slider': {
                change: this.onStrokeOpacitySliderChange
            },
            'cwn2-btn-geostyler-hatch-stroke-opacity-slider': {
                change: this.onHatchStrokeOpacitySliderChange
            },
            'cwn2-btn-geostyler-fill-opacity-slider': {
                change: this.onFillOpacitySliderChange
            },
            'cwn2-btn-geostyler-hatch-fill-opacity-slider': {
                change: this.onHatchFillOpacitySliderChange
            },
            'cwn2-btn-geostyler-external-graphic-url': {
                change: this.onExternalGraphicUrlChange
            },
            'cwn2-btn-geostyler-graphic-format-combo': {
                select: this.onGraphicFormatSelect
            },
            'cwn2-btn-geostyler-cql-filter': {
                change: this.onCQLFilterChange
            },
            'cwn2-btn-geostyler-label-font-size': {
                change: this.onLabelFontSizeChange
            },
            'cwn2-btn-geostyler-label-font-family-combo': {
                select: this.onLabelFontFamilySelect
            },
            'cwn2-btn-geostyler-label-font-style-combo': {
                select: this.onLabelFontStyleSelect
            },
            'cwn2-btn-geostyler-label-font-weight-combo': {
                select: this.onLabelFontWeightSelect
            },
            'cwn2-btn-geostyler-label-fill-color-field': {
                select: this.onLabelFillColorFieldChange
            },
            'cwn2-btn-geostyler-label-halo-color-field': {
                select: this.onLabelHaloColorFieldChange
            },
            'cwn2-btn-geostyler-label-halo-radius': {
                change: this.onLabelHaloRadiusChange
            },
            'cwn2-btn-geostyler-label-min-scale': {
                change: this.onLabelMinScaleChange
            },
            'cwn2-btn-geostyler-label-max-scale': {
                change: this.onLabelMaxScaleChange
            },
            'cwn2-btn-geostyler-label-anchor-x': {
                change: this.onLabelAnchorXChange
            },
            'cwn2-btn-geostyler-label-anchor-y': {
                change: this.onLabelAnchorYChange
            },
            'cwn2-btn-geostyler-label-displacement-x': {
                change: this.onLabelDisplacementXChange
            },
            'cwn2-btn-geostyler-label-displacement-y': {
                change: this.onLabelDisplacementYChange
            },
            'cwn2-btn-geostyler-label-line-perpendicular-offset': {
                change: this.onLabelPerpendicularOffsetChange
            },
            'cwn2-btn-geostyler-label-columns-combo': {
                change: this.onLabelColumnSelect
            }
            //

        });
    },

    onAddRuleClick: function (button, e, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var rules = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule;

        var ind = 0;
        var indLabel = rules.length;
        Ext.each(rules, function (rule, index) {
            if (rule.Name !== "LABEL") {
                ind = parseInt(rule.Name.replace("R", ""));
            } else {
                indLabel = index;
            }
        });
        var ruleName = "R" + parseInt(ind + 1);

        var pointSymbolizer = null,
            lineSymbolizer = null,
            polygonSymbolizer = null,
            rule = {
                Name: ruleName,
                Title: "Nuova Rule"
            };

        switch (selectedLayer.geomType) {
            case "POLYGON":
                rule.PolygonSymbolizer = {
                    Stroke: this.defaultSimpleStrokeStyle
                };
                break;
            case "LINE":
                rule.LineSymbolizer = {
                    Stroke: this.defaultSimpleStrokeStyle
                };
                break;
            case "POINT":
                rule.PointSymbolizer = {
                    Graphic: this.defaultWKNPointStyle
                };
                break;
        }

        rules.splice(indLabel, 0, rule);

        //ricarico panel
        me.selectedRule = me.getSelectedRuleIndex(me.selectedLayer, ruleName);
        this.reloadRuleCombo();
        this.getRuleCombo().setValue(ruleName);
        this.reloadTabPanel();
    },

    getNumRules: function (rules) {
        var numRules = 0;
        Ext.each(rules, function (rule, index) {
            if (rule.Name !== "LABEL") {
                numRules++;
            }
        });
        return numRules;
    },

    onChangeRuleOrderClick: function (button, e, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var rules = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule;

        var indLabel = rules.length;
        var numRules = me.getNumRules(rules);
        if (numRules < 2) {
            CWN2.Util.msgBox("Attenzione: Non posso riordinare le rule perchè unica");
            return;
        }

        var win = this.getChangeRuleOrderWin();

        if (!win) {
            win = Ext.create('CWN2.button.GeoStyler.ChangeRuleOrder.Window', {
                rules: rules
            });
        }
        this.showHideWin(win, CWN2.app.layout.mapPanel);
    },


    onGenerateRulesClick: function (button, e, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var columns = selectedLayer.columns;

        var win = this.getGenerateRulesWin();


        if (!win) {
            win = Ext.create('CWN2.button.GeoStyler.GenerateRules.Window', {
                columns: columns
            });
        }
        this.showHideWin(win, CWN2.app.layout.mapPanel);
    },


    onDeleteRuleClick: function (button, e, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var rules = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule;

        var indLabel = rules.length;
        var numRules = me.getNumRules(rules);
        if (numRules < 2) {
            CWN2.Util.msgBox("Attenzione: Non posso cancellare la rule perchè unica");
            return;
        }

        Ext.MessageBox.confirm(
            CWN2.I18n.get('Conferma'),
            CWN2.I18n.get('Sei sicuro?'),
            function (btn) {
                if (btn === "yes") {
                    rules.splice(me.selectedRule, 1);
                    me.selectedRule = 0;
                    me.reloadRuleCombo();
                    me.reloadTabPanel();
                }
            }
        );


    },

    onLabelColumnSelect: function (combo, records, eOpts) {
        var newValue = records;
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];

        if (newValue === "&nbsp;") {
            return;
        }
        if (newValue === null) {
            Ext.MessageBox.confirm(
                CWN2.I18n.get('Conferma'),
                CWN2.I18n.get('Sei sicuro?'),
                function (btn) {
                    if (btn === "yes") {
                        me.deleteLabelRule();
                        me.reloadLabelPanel();
                        me.setEditedLayerFlag(selectedLayer.name);
                    }
                }
            );
        } else {
            if (!selectedLayer.labelRule) {
                me.createLabelRule();
                me.reloadLabelPanel();
            }
            selectedLayer.labelRule.TextSymbolizer.Label.PropertyName = newValue;
            me.setEditedLayerFlag(selectedLayer.name);
        }
    },

    reloadLabelPanel: function () {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];

        Ext.suspendLayouts();
        var panel = this.getLabelPanel();
        panel.remove(this.getLabelFontPanel());
        panel.remove(this.getLabelPlacementPanel());

        panel.add({
            xtype: "cwn2-btn-geostyler-label-font-panel",
            labelRule: selectedLayer.labelRule
        });
        panel.add({
            xtype: "cwn2-btn-geostyler-label-placement-panel",
            labelRule: selectedLayer.labelRule,
            geomType: selectedLayer.geomType
        });

        Ext.resumeLayouts(true);
    },

    createLabelRule: function () {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        selectedLayer.labelRule = Ext.clone(me.defaultLabel);

        Ext.each(me.layersConfig, function (layerConfig) {
            if (layerConfig.name === selectedLayer.name) {
                layerConfig.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule.push(selectedLayer.labelRule);
            }
        });
    },

    deleteLabelRule: function () {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];

        delete selectedLayer.labelRule;

        Ext.each(me.layersConfig, function (layerConfig) {
            if (layerConfig.name === selectedLayer.name) {
                delete layerConfig.labelRule;
                var labelRuleIndex = -1;
                Ext.each(layerConfig.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule, function (rule, index) {
                    if (rule.Name === "LABEL") {
                        labelRuleIndex = index;
                    }
                });
                if (labelRuleIndex > -1) {
                    layerConfig.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule.splice(labelRuleIndex, 1);
                }
            }
        });
    },


    onLabelPerpendicularOffsetChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.LabelPlacement && selectedLayer.labelRule.TextSymbolizer.LabelPlacement.LinePlacement) {
            selectedLayer.labelRule.TextSymbolizer.LabelPlacement.LinePlacement.PerpendicularOffset = newValue;
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onLabelDisplacementXChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.LabelPlacement && selectedLayer.labelRule.TextSymbolizer.LabelPlacement.PointPlacement) {
            selectedLayer.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.Displacement.DisplacementX = newValue;
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },
    onLabelDisplacementYChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.LabelPlacement && selectedLayer.labelRule.TextSymbolizer.LabelPlacement.PointPlacement) {
            selectedLayer.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.Displacement.DisplacementY = newValue;
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onLabelAnchorXChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.LabelPlacement && selectedLayer.labelRule.TextSymbolizer.LabelPlacement.PointPlacement) {
            selectedLayer.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.AnchorPoint.AnchorPointX = newValue;
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },
    onLabelAnchorYChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.LabelPlacement && selectedLayer.labelRule.TextSymbolizer.LabelPlacement.PointPlacement) {
            selectedLayer.labelRule.TextSymbolizer.LabelPlacement.PointPlacement.AnchorPoint.AnchorPointY = newValue;
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onLabelMaxScaleChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (newValue) {
            if (selectedLayer.labelRule) {
                selectedLayer.labelRule.MaxScaleDenominator = newValue;
            }
        } else {
            delete selectedLayer.labelRule['MaxScaleDenominator'];
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },
    onLabelMinScaleChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (newValue) {
            if (selectedLayer.labelRule) {
                selectedLayer.labelRule.MinScaleDenominator = newValue;
            }
        } else {
            delete selectedLayer.labelRule['MinScaleDenominator'];
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onLabelHaloRadiusChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.Halo) {
            selectedLayer.labelRule.TextSymbolizer.Halo.Radius = newValue;
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },
    onLabelHaloColorFieldChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.Halo) {
            setCssParameter(selectedLayer.labelRule.TextSymbolizer.Halo.Fill, "fill", newValue);
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },
    onLabelFillColorFieldChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.Fill) {
            setCssParameter(selectedLayer.labelRule.TextSymbolizer.Fill, "fill", newValue);
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onSymbolComboSelect: function (combo, records, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];
        // POINT_WNK
        if (selectedRule.PointSymbolizer) {
            selectedRule.PointSymbolizer.Graphic.Mark.WellKnownName = records[0].data.field1;
        }
        // LINE_WKN
        if (selectedRule.LineSymbolizer) {
            selectedRule.LineSymbolizer.Stroke.GraphicStroke.Graphic.Mark.WellKnownName = records[0].data.field1;
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },


    onLabelFontWeightSelect: function (combo, records, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var newValue = records[0].data.field1;
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.Font) {
            setCssParameter(selectedLayer.labelRule.TextSymbolizer.Font, "font-weight", newValue);
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onLabelFontStyleSelect: function (combo, records, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var newValue = records[0].data.field1;
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.Font) {
            setCssParameter(selectedLayer.labelRule.TextSymbolizer.Font, "font-style", newValue);
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },
    onLabelFontFamilySelect: function (combo, records, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var newValue = records[0].data.field1;
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.Font) {
            setCssParameter(selectedLayer.labelRule.TextSymbolizer.Font, "font-family", newValue);
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onLabelFontSizeChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        if (selectedLayer.labelRule && selectedLayer.labelRule.TextSymbolizer && selectedLayer.labelRule.TextSymbolizer.Font) {
            setCssParameter(selectedLayer.labelRule.TextSymbolizer.Font, "font-size", newValue);
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onCQLFilterChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        try {
            if (newValue) {
                selectedRule.Filter = CWN2.Util.transformFilterCQL2json(newValue);
            } else {
                delete selectedRule['Filter'];
            }
        } catch (exception) {
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onExternalGraphicUrlChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        // POINT_GRAPHIC
        if (selectedRule.PointSymbolizer) {
            selectedRule.PointSymbolizer.Graphic.ExternalGraphic.OnlineResource["_xlink:href"] = newValue;
        }
        // POLYGON_GRAPHIC
        if (selectedRule.PolygonSymbolizer) {
            selectedRule.PolygonSymbolizer.Fill.GraphicFill.Graphic.ExternalGraphic.OnlineResource["_xlink:href"] = newValue;
        }
        var externalGraphicImg = this.getExternalGraphicImg()
        if (externalGraphicImg) {
            externalGraphicImg.setSrc(newValue);
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onRuleTitleChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        selectedRule.Title = newValue;
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onMinScaleChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        if (newValue) {
            selectedRule.MinScaleDenominator = newValue;
        } else {
            delete selectedRule['MinScaleDenominator'];
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onMaxScaleChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        if (newValue) {
            selectedRule.MaxScaleDenominator = newValue;
        } else {
            delete selectedRule['MaxScaleDenominator'];
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    setFillParam: function (param, newValue) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        // POINT_WNK
        if (selectedRule.PointSymbolizer) {
            setCssParameter(selectedRule.PointSymbolizer.Graphic.Mark.Fill, param, newValue);
        }
        // LINE_WKN
        if (selectedRule.LineSymbolizer) {
            setCssParameter(selectedRule.LineSymbolizer.Stroke.GraphicStroke.Graphic.Mark.Fill, param, newValue);
        }
        // POLYGON_SIMPLE_FILL
        if (selectedRule.PolygonSymbolizer) {
            setCssParameter(selectedRule.PolygonSymbolizer.Fill, param, newValue);
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onFillColorFieldChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        this.setFillParam("fill", newValue);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onHatchFillColorFieldChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        setCssParameter(selectedRule.PolygonSymbolizer.Fill.GraphicFill.Graphic.Mark.Fill, "fill", newValue);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onFillOpacitySliderChange: function (slider, newValue, thumb, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        this.setFillParam("fill-opacity", newValue / 100);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onHatchFillOpacitySliderChange: function (slider, newValue, thumb, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        setCssParameter(selectedRule.PolygonSymbolizer.Fill.GraphicFill.Graphic.Mark.Fill, "fill-opacity", newValue / 100);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onSymbolComboSelect: function (combo, records, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        // POINT_WNK
        if (selectedRule.PointSymbolizer) {
            selectedRule.PointSymbolizer.Graphic.Mark.WellKnownName = records[0].data.field1;
        }
        // LINE_WKN
        if (selectedRule.LineSymbolizer) {
            selectedRule.LineSymbolizer.Stroke.GraphicStroke.Graphic.Mark.WellKnownName = records[0].data.field1;
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onHatchComboSelect: function (combo, records, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        selectedRule.PolygonSymbolizer.Fill.GraphicFill.Graphic.Mark.WellKnownName = records[0].data.field1;
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onGraphicFormatSelect: function (combo, records, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        if (selectedRule.PointSymbolizer) {
            selectedRule.PointSymbolizer.Graphic.ExternalGraphic.Format = records[0].data.field1;
        }
        if (selectedRule.PolygonSymbolizer) {
            selectedRule.PolygonSymbolizer.Fill.GraphicFill.Graphic.ExternalGraphic.Format = records[0].data.field1;
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onSymbolSizeChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        if (selectedRule.PointSymbolizer) {
            selectedRule.PointSymbolizer.Graphic.Size = newValue;
        }
        if (selectedRule.LineSymbolizer) {
            selectedRule.LineSymbolizer.Stroke.GraphicStroke.Graphic.Size = newValue;
        }
        if (selectedRule.PolygonSymbolizer) {
            //selectedRule.PolygonSymbolizer.Fill.GraphicFill.Graphic.Size =  newValue;
        }
        var externalGraphicImg = this.getExternalGraphicImg()
        if (externalGraphicImg) {
            externalGraphicImg.setWidth(newValue);
            externalGraphicImg.setHeight(newValue);
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    setStrokeParam: function (param, newValue) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        // POINT_WNK
        if (selectedRule.PointSymbolizer) {
            setCssParameter(selectedRule.PointSymbolizer.Graphic.Mark.Stroke, param, newValue);
        }
        // LINE
        if (selectedRule.LineSymbolizer && selectedRule.LineSymbolizer.Stroke) {
            if (selectedRule.LineSymbolizer && selectedRule.LineSymbolizer.Stroke.GraphicStroke) {
                // LINE_WNK
                setCssParameter(selectedRule.LineSymbolizer.Stroke.GraphicStroke.Graphic.Mark.Stroke, param, newValue);
            } else {
                // LINE_SIMPLE
                setCssParameter(selectedRule.LineSymbolizer.Stroke, param, newValue);
            }
        }
        // POLYGON_STROKE
        if (selectedRule.PolygonSymbolizer) {
            setCssParameter(selectedRule.PolygonSymbolizer.Stroke, param, newValue);
        }
    },


    onStrokeColorFieldChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        this.setStrokeParam("stroke", newValue);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onHatchStrokeColorFieldChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        setCssParameter(selectedRule.PolygonSymbolizer.Fill.GraphicFill.Graphic.Mark.Stroke, "stroke", newValue);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onStrokeWidthChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        this.setStrokeParam("stroke-width", newValue);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onHatchStrokeWidthChange: function (field, newValue, oldValue, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        setCssParameter(selectedRule.PolygonSymbolizer.Fill.GraphicFill.Graphic.Mark.Stroke, "stroke-width", newValue);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onStrokeOpacitySliderChange: function (slider, newValue, thumb, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        this.setStrokeParam("stroke-opacity", newValue / 100);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onHatchStrokeOpacitySliderChange: function (slider, newValue, thumb, eOpts) {
        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        setCssParameter(selectedRule.PolygonSymbolizer.Fill.GraphicFill.Graphic.Mark.Stroke, "stroke-opacity", newValue / 100);
        this.setEditedLayerFlag(selectedLayer.name);
    },

    onStrokeDashStyleChange: function (field, newValue, thumb, eOpts) {
        var dashStyleLine = this.getDashLine(),
            dashStyleSpace = this.getDashSpace();

        var me = this;
        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        if (dashStyleLine && dashStyleSpace) {
            if (dashStyleLine.getValue() && dashStyleSpace.getValue()) {
                var strokeDasharray = dashStyleLine.getValue() + " " + dashStyleSpace.getValue();
                // LINE
                if (selectedRule.LineSymbolizer) {
                    setCssParameter(selectedRule.LineSymbolizer.Stroke, "stroke-dasharray", strokeDasharray);
                }
                // POLYGON_SIMPLE_STROKE
                if (selectedRule.PolygonSymbolizer) {
                    setCssParameter(selectedRule.PolygonSymbolizer.Stroke, "stroke-dasharray", strokeDasharray);
                }
            }
            else {
                // LINE
                if (selectedRule.LineSymbolizer) {
                    setCssParameter(selectedRule.LineSymbolizer.Stroke, "stroke-dasharray", "");
                }
                // POLYGON_SIMPLE_STROKE
                if (selectedRule.PolygonSymbolizer) {
                    setCssParameter(selectedRule.PolygonSymbolizer.Stroke, "stroke-dasharray", "");
                }
            }
        }
        this.setEditedLayerFlag(selectedLayer.name);
    },

    setEditedLayerFlag: function (layerName) {
        var layersConfig = this.layersConfig;
        Ext.each(layersConfig, function (layerConfig) {
            if (layerConfig.name === layerName) {
                layerConfig.edited = true;
            }
        });
    },

    onClick: function () {
        var win = this.getWin(),
            button = this.getButton(),
            me = this;

        if (!win) {
            var layers = me.buildLayersConfig(button.config);
            if (!layers) {
                CWN2.Util.msgBox("Attenzione: Nessun livello disponibile");
                return;
            }
            win = Ext.create('CWN2.button.GeoStyler.Window', {
                layersConfig: me.layersConfig
            });
        }
        this.showHideWin(win, CWN2.app.layout.mapPanel);

    },

    showHideWin: function (win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    },

    buildLayersConfig: function (config) {
        var me = this;
        var idMap = parseInt(config.options.idMap);
        var layersConfig = CWN2.app.map.layerManager.overlayLayersConfig;
        me.layersConfig = [];
        Ext.each(layersConfig, function (layerConfig) {
            var layer = Ext.clone(layerConfig);
            if (layer.geomType === "VECTOR" && layer.idMap === idMap) {
                var rules = layer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule;
                var labelRule = null;
                Ext.each(rules, function (rule) {
                    if (rule.Name === 'LABEL') {
                        labelRule = rule;
                        return false;
                    }
                });
                var columns = [{name: "&nbsp;",type: null}];
                Ext.each(layer.dbSchema.columns, function (column) {
                    columns.push(column);
                });
                var legendUrl = layerConfig.wmsParams.url + "LAYER=" + layer.name + "&REQUEST=GetLegendGraphic&VERSION=1.0.0&FORMAT=image/png&WIDTH=20&HEIGHT=20&LEGEND_OPTIONS=forceLabels:off";
                me.layersConfig.push({
                    name: layer.name,
                    label: layer.legend.label,
                    legendUrl: legendUrl,
                    id: layer.id,
                    sld: layer.sld,
                    labelRule: labelRule,
                    columns: columns,
                    edited: false,
                    geomType: layer.geomSubType
                })
            }
        });
        if (me.layersConfig.length > 0) {
            me.layersConfig.reverse();
            me.selectedLayer = 0;
            me.selectedRule = 0;
            return true;
        } else {
            return false;
        }

    },

    onLayerSelect: function (combo, records, eOpts) {
        var me = this;

        me.selectedLayer = me.getSelectedLayerIndex(records[0].data.name);
        me.selectedRule = 0;

        //ricarico panel
        this.reloadRuleCombo();
        this.reloadTabPanel();
    },

    getSelectedLayerIndex: function (layerName) {
        var me = this,
            layerIndex = 0;

        Ext.each(me.layersConfig, function (layerConfig, index) {
            if (layerConfig.name === layerName) {
                layerIndex = index;
                return false;
            }
        });

        return layerIndex;
    },

    getSelectedRuleIndex: function (layerIndex, ruleName) {
        var me = this,
            ruleIndex = 0;

        var rules = me.layersConfig[layerIndex].sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule;
        Ext.each(rules, function (ruleConfig, index2) {
            if (ruleConfig.Name === ruleName) {
                ruleIndex = index2;
                return false;
            }
        });

        return ruleIndex;
    },

    onRuleSelect: function (combo, records, eOpts) {
        var me = this;
        // imposto la rule selezionata
        me.selectedRule = me.getSelectedRuleIndex(me.selectedLayer, records[0].data.Name);
        // imposto immagine legenda
        this.getRuleLegend().setSrc(records[0].data.legendUrl);
        //ricarico panel
        this.reloadTabPanel();
    },

    reloadRuleCombo: function () {
        var me = this;

        Ext.suspendLayouts();
        var panel = me.getPanel();
        panel.remove(me.getRuleFieldset());
        panel.add({
            xtype: 'cwn2-btn-geostyler-rule-fieldset',
            layer: me.layersConfig[me.selectedLayer]
        });

        var ruleCombo = me.getRuleCombo();
        ruleCombo.setValue(ruleCombo.getStore().getAt(me.selectedRule).data.Name);

        Ext.resumeLayouts(true);

    },

    reloadTabPanel: function () {
        var me = this;
        Ext.suspendLayouts();
        var panel = this.getPanel();
        var tabPanel = this.getTabPanel();

        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        var idx = (tabPanel.items) ? tabPanel.items.indexOf(tabPanel.getActiveTab()) : 0;
        panel.remove(tabPanel);
        panel.add({
            xtype: 'cwn2-btn-geostyler-tab-panel',
            rule: selectedRule,
            geomType: selectedLayer.geomType,
            labelRule: selectedLayer.labelRule,
            columns: selectedLayer.columns,
            activeTab: idx
        });
        Ext.resumeLayouts(true);
    },

    onStrokeTypeSelect: function (combo, records, eOpts) {
        var me = this,
            strokeType = records[0].data.field1,
            strokeTab;

        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        //controllo fill/stroke
        if (me.getFillTypeCombo()) {
            var fillType = me.getFillTypeCombo().getValue();
            if (fillType === "None" && strokeType === "None") {
                CWN2.Util.msgBox("Attenzione: Stroke e Fill non possono essere entrambi non impostati");
                combo.setValue(combo.previousValue);
                return;
            }
        }

        combo.previousValue = strokeType;

        //ricarico panel
        Ext.suspendLayouts();
        var panel = this.getStrokePanel();
        panel.remove(panel.items.items[1]);
        var symbolizer = selectedRule.LineSymbolizer || selectedRule.PolygonSymbolizer;

        if (strokeType === "None") {
            // Se stile attuale è di tipo STROKE_* levo elemento Stroke
            if (selectedRule.PolygonSymbolizer && selectedRule.PolygonSymbolizer.Stroke) {
                var fill = selectedRule.PolygonSymbolizer.Fill;
                selectedRule.PolygonSymbolizer = {
                    "Fill": fill
                }
            }
        }
        if (strokeType === "Simple") {
            // Se stile attuale è di tipo STROKE_NONE o STROKE_GRAPHIC cambio in STROKE_SIMPLE di default
            if ((!symbolizer.Stroke) || (symbolizer.Stroke.GraphicStroke)) {
                symbolizer.Stroke = Ext.clone(this.defaultSimpleStrokeStyle);
            }
            strokeTab = {xtype: "cwn2-btn-geostyler-simple-stroke-panel", rule: selectedRule};
            panel.add(strokeTab);
        }
        if (strokeType === "WKN") {
            // Se stile attuale è di tipo STROKE_NONE o STROKE_SIMPLE cambio in STROKE_SIMPLE di default
            if ((!symbolizer.Stroke) || (!symbolizer.Stroke.GraphicStroke)) {
                symbolizer.Stroke = Ext.clone(this.defaultWKNStrokeStyle);
            }
            strokeTab = {xtype: "cwn2-btn-geostyler-wkn-stroke-panel", rule: selectedRule};
            panel.add(strokeTab);
        }

        Ext.resumeLayouts(true);
    },

    onFillTypeSelect: function (combo, records, eOpts) {
        var me = this,
            fillType = records[0].data.field1,
            fillTab;

        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        //controllo fill/stroke
        var strokeType = me.getStrokeTypeCombo().getValue();
        if (fillType === "None" && strokeType === "None") {
            CWN2.Util.msgBox("Attenzione: Stroke e Fill non possono essere entrambi non impostati");
            combo.setValue(combo.previousValue);
            return;
        }

        combo.previousValue = fillType;

        //ricarico panel
        Ext.suspendLayouts();
        var panel = this.getFillPanel();
        panel.remove(panel.items.items[1]);

        var symbolizer = selectedRule.PolygonSymbolizer;

        if (fillType === "None") {
            // Se stile attuale è di tipo STROKE_* levo elemento Stroke
            if (symbolizer && symbolizer.Fill) {
                var stroke = symbolizer.Stroke;
                symbolizer = {
                    "Stroke": stroke
                }
            }
        }
        if (fillType === "Simple") {
            // Se stile attuale non è di tipo FILL_SIMPLE imposto FILL_SIMPLE di default
            if ((!symbolizer.Fill) || (symbolizer.Fill.GraphicFill)) {
                symbolizer.Fill = Ext.clone(this.defaultSimpleFillStyle);
            }
            fillTab = {xtype: "cwn2-btn-geostyler-simple-fill-panel", rule: selectedRule};
            panel.add(fillTab);
        }
        if (fillType === "Graphic") {
            // Se stile attuale non è di tipo FILL_GRAPHIC imposto FILL_GRAPHIC di default
            if ((!symbolizer.Fill) || (!symbolizer.Fill.GraphicFill) || (!symbolizer.Fill.GraphicFill.Graphic.ExternalGraphic)) {
                symbolizer.Fill = Ext.clone(this.defaultGraphicFillStyle);
            }
            fillTab = {xtype: "cwn2-btn-geostyler-graphic-fill-panel", rule: selectedRule};
            panel.add(fillTab);
        }
        if (fillType === "Hatch") {
            // Se stile attuale non è di tipo FILL_HATCH imposto FILL_HATCH di default
            if ((!symbolizer.Fill) || (!symbolizer.Fill.GraphicFill) || (!symbolizer.Fill.GraphicFill.Graphic.Mark)) {
                symbolizer.Fill = Ext.clone(this.defaultHatchFillStyle);
            }
            fillTab = {xtype: "cwn2-btn-geostyler-hatch-fill-panel", rule: selectedRule};
            panel.add(fillTab);
        }
        Ext.resumeLayouts(true);
    },

    onPointTypeSelect: function (combo, records, eOpts) {
        var me = this,
            pointType = records[0].data.field1,
            pointTab;

        var selectedLayer = me.layersConfig[me.selectedLayer];
        var selectedRule = selectedLayer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule];

        //ricarico panel
        Ext.suspendLayouts();
        var panel = this.getPointPanel();
        panel.remove(panel.items.items[1]);
        if (pointType === "WKN") {
            // Se stile attuale è di tipo POINT_GRAPHIC cambio stile e imposto lo stile POINT_WKN di default
            if (selectedRule.PointSymbolizer.Graphic.ExternalGraphic) {
                selectedRule.PointSymbolizer.Graphic = Ext.clone(this.defaultWKNPointStyle);
            }
            pointTab = {xtype: "cwn2-btn-geostyler-wkn-point-panel", rule: selectedRule};
        }
        if (pointType === "Graphic") {
            // Se stile attuale è di tipo POINT_WKN cambio stile e imposto lo stile POINT_GRAPHIC di default
            if (selectedRule.PointSymbolizer.Graphic.Mark) {
                selectedRule.PointSymbolizer.Graphic = Ext.clone(this.defaultGraphicPointStyle);
            }
            pointTab = {xtype: "cwn2-btn-geostyler-graphic-point-panel", rule: selectedRule};
        }
        panel.add(pointTab);
        Ext.resumeLayouts(true);
    },


    defaultLabel: {
        "Name": "LABEL",
        "Title": "",
        "TextSymbolizer": {
            "Label": {
                "PropertyName": "NUMERO_PRATICA"
            },
            "Font": {
                "CssParameter": [
                    {
                        "_name": "font-family",
                        "__text": "Verdana"
                    },
                    {
                        "_name": "font-size",
                        "__text": 8
                    },
                    {
                        "_name": "font-style",
                        "__text": "normal"
                    },
                    {
                        "_name": "font-weight",
                        "__text": "normal"
                    }
                ]
            },
            "LabelPlacement": {
                "PointPlacement": {
                    "AnchorPoint": {
                        "AnchorPointX": 0,
                        "AnchorPointY": 0
                    }
                }
            },
            "Halo": {
                "Radius": 2,
                "Fill": {
                    "CssParameter": [{
                        "_name": "fill",
                        "__text": "#F5FFFA"
                    }]
                }
            },
            "Fill": {
                "CssParameter": [{
                    "_name": "fill",
                    "__text": "#000000"
                }]
            },
            "VendorOption": {
                "_name": "conflictResolution",
                "__text": "false"
            }
        }
    },

    defaultSimpleFillStyle: {
        "CssParameter": [
            {
                "_name": "fill",
                "__text": "#FFFFFF"
            },
            {
                "_name": "fill-opacity",
                "__text": "1"
            }
        ]
    },

    defaultGraphicFillStyle: {
        "GraphicFill": {
            "Graphic": {
                "ExternalGraphic": {
                    "OnlineResource": {
                        "_xmlns:xlink": "http://www.w3.org/1999/xlink",
                        "_xlink:type": "simple",
                        "_xlink:href": "http://geoportale.regione.liguria.it/geoservices/geoserver_sld/sld/img/point-black.png"
                    },
                    "Format": "image/png"
                },
                "Size": "6"
            }
        }
    },

    defaultHatchFillStyle: {
        "GraphicFill": {
            "Graphic": {
                "Mark": {
                    "WellKnownName": "shape://slash",
                    "Stroke": {
                        "CssParameter": [
                            {
                                "_name": "stroke",
                                "__text": "#000000"
                            }
                        ]
                    }
                },
                "Size": "8"
            }
        }
    },


    defaultSimpleStrokeStyle: {
        "CssParameter": [
            {
                "_name": "stroke",
                "__text": "#000000"
            },
            {
                "_name": "stroke-opacity",
                "__text": "1"
            },
            {
                "_name": "stroke-width",
                "__text": "1"
            }
        ]
    },


    defaultWKNStrokeStyle: {
        "GraphicStroke": {
            "Graphic": {
                "Mark": {
                    "WellKnownName": "circle",
                    "Fill": {
                        "CssParameter": [
                            {
                                "_name": "fill",
                                "__text": "#FF0000"
                            }
                        ]
                    },
                    "Stroke": {
                        "CssParameter": [
                            {
                                "_name": "stroke",
                                "__text": "#000000"
                            }
                        ]
                    }
                },
                "Size": "6"
            }
        }
    },


    defaultWKNPointStyle: {
        "Mark": {
            "WellKnownName": "circle",
            "Fill": {
                "CssParameter": [
                    {
                        "_name": "fill",
                        "__text": "#FF0000"
                    },
                    {
                        "_name": "fill-opacity",
                        "__text": "1"
                    }
                ]
            },
            "Stroke": {
                "CssParameter": [
                    {
                        "_name": "stroke",
                        "__text": "#000000"
                    },
                    {
                        "_name": "stroke-opacity",
                        "__text": "1"
                    },
                    {
                        "_name": "stroke-width",
                        "__text": "1"
                    }
                ]
            }
        },
        "Size": "10"
    },

    defaultGraphicPointStyle: {
        "ExternalGraphic": {
            "OnlineResource": {
                "_xmlns:xlink": "http://www.w3.org/1999/xlink",
                "_xlink:type": "simple",
                "_xlink:href": "http://geoportale.regione.liguria.it/geoservices/geoserver_sld/sld/img/point-black.png"
            },
            "Format": "image/png"
        },
        "Size": "10"
    },

    onCancelButtonClick: function () {
        var me = this;
        Ext.MessageBox.confirm(
            CWN2.I18n.get('Conferma'),
            CWN2.I18n.get('Sei sicuro?'),
            function (btn) {
                if (btn === "yes") {
                    //Rispristino configurazione salvata
                    me.buildLayersConfig(me.getButton().config);
                    //Ricostruisco finestra
                    var win = me.getWin();
                    win.destroy();
                    win = Ext.create('CWN2.button.GeoStyler.Window', {
                        layersConfig: me.layersConfig
                    });
                    me.showHideWin(win, CWN2.app.layout.mapPanel);
                }
            }
        );
    },

    onValidateCQLButtonClick: function () {
        var cqlFilter = this.getCqlFilter().getValue();
        if (cqlFilter) {
            try {
                var testFilter = CWN2.Util.transformFilterCQL2json(cqlFilter);
                CWN2.Util.msgBox("Parsing Corretto");
            } catch (exception) {
                CWN2.Util.msgBox("Errore parsing del filtro.<br> " + exception);
            }
        }
    },

    onSubmitButtonClick: function (button, e, eOpts) {
        var me = this;

        Ext.MessageBox.confirm(
            CWN2.I18n.get('Conferma'),
            CWN2.I18n.get('Sei sicuro?'),
            function (btn) {
                if (btn === "yes") {
                    // aggiorno configurazione sld del LayerManager
                    Ext.each(me.layersConfig, function (layerConfig) {
                        if (layerConfig.edited) {
                            // controllo stroke-width se = 0 cancello elemento <Stroke>
                            me.checkStrokeWidth(layerConfig)
                            // controllo che scala_min sia minore di scala max
                            if (me.checkScale(layerConfig) && me.checkExternalGraphic(layerConfig)) {
                                var layerConfig2 = Ext.clone(layerConfig);
                                var layerManagerConfig = CWN2.app.map.layerManager.getLayerConfigByName(layerConfig2.name);
                                layerManagerConfig.sld = layerConfig2.sld
                                //mando sld a geoserver
                                var sldXml = GeoStyler.app.x2js.json2xml_str(layerConfig2.sld);
                                Ext.Ajax.request({
                                    url: "/geoservices/REST/geoserver/geoserver_sld?id=" + layerConfig2.id,
                                    headers: {'Content-Type': 'application/xml; charset=UTF-8'},
                                    xmlData: sldXml,
                                    success: function (response) {
                                        if (response.responseText.substring(0, 2) === "OK") {
                                            layerConfig.edited = false;
                                        }
                                        // Aggiorno il layer sulla mappa
                                        var olLayer = CWN2.app.map.getLayerByName(layerConfig.name);
                                        olLayer.redraw(true);
                                        // Aggiorno l'immmagine sulla legenda
                                        var legendImg = document.getElementById("legend_img_" + layerConfig.name);
                                        legendImg.src = layerManagerConfig.legend.icon + "?" + new Date().getTime();
                                    }
                                });
                                // imposto flag multiclasse
                                var rules = layerConfig2.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule;
                                var numRules = me.getNumRules(rules);
                                CWN2.Util.ajaxRequest({
                                    type: "JSON",
                                    url: "/geoservices/REST/geoserver/set_flag_multiclasse?id=" + layerConfig2.id + "&num_rules=" + numRules,
                                    callBack: function (response) {
                                        console.log(response.message);
                                    }
                                });

                            }
                        }
                    });
                    me.reloadRuleCombo();

                    me.reloadTabPanel();
                    var layer = me.layersConfig[me.selectedLayer]
                    var legendUrl = layer.legendUrl + "&RULE=" + layer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule].Name + '&dc=' + new Date().getTime();
                    ;
                    me.getRuleLegend().setSrc(legendUrl);
                }
            }
        );
    },

    checkScale: function (layerConfig) {
        var rules = layerConfig.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule;
        var isValid = true;
        Ext.each(rules, function (rule) {
            if (rule.MinScaleDenominator && rule.MaxScaleDenominator && rule.MinScaleDenominator >= rule.MaxScaleDenominator) {
                CWN2.Util.msgBox("Attenzione: la Scala Min. deve essere minore di Scala Max. <br>Layer: " + layerConfig.name + " - " + layerConfig.label);
                isValid = false;
                return false;
            }
        });
        return isValid;
    },

    checkStrokeWidth: function (layerConfig) {
        var rules = layerConfig.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule;
        Ext.each(rules, function (rule) {
            // POINT_GRAPHIC
            if (rule.PointSymbolizer && rule.PointSymbolizer.Graphic.Mark && rule.PointSymbolizer.Graphic.Mark.Stroke) {
                if (getCssParameter(rule.PointSymbolizer.Graphic.Mark.Stroke, "stroke-width") === 0) {
                    // se stroke-width = 0 levo elemento stroke
                    rule.PointSymbolizer.Graphic.Mark = {
                        WellKnownName: rule.PointSymbolizer.Graphic.Mark.WellKnownName,
                        Fill: rule.PointSymbolizer.Graphic.Mark.Fill
                    };
                }
            }
        });
    },

    checkExternalGraphic: function (layerConfig) {
        var rules = layerConfig.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule;
        var isValid = true;
        var imgUrl = null;
        Ext.each(rules, function (rule) {
            // POINT_GRAPHIC
            if (rule.PointSymbolizer && rule.PointSymbolizer.Graphic.ExternalGraphic) {
                imgUrl = rule.PointSymbolizer.Graphic.ExternalGraphic.OnlineResource["_xlink:href"];
            }
            // POLYGON_GRAPHIC
            if (rule.PolygonSymbolizer && rule.PolygonSymbolizer.Fill && rule.PolygonSymbolizer.Fill.GraphicFill && rule.PolygonSymbolizer.Fill.GraphicFill.Graphic && rule.PolygonSymbolizer.Fill.GraphicFill.Graphic.ExternalGraphic) {
                imgUrl = rule.PolygonSymbolizer.Fill.GraphicFill.Graphic.ExternalGraphic.OnlineResource["_xlink:href"];
            }
            if (imgUrl) {
                var nImg = document.createElement('img');
                nImg.onerror = function () {
                    CWN2.Util.msgBox("Attenzione: l'immagine " + imgUrl + " non esiste!");
                    isValid = false;
                    return false;
                }
                nImg.src = imgUrl;
            }
        });
        return isValid;
    },

    checkFilter: function (rule, layerConfig) {
        if (rule.Filter) {
            try {
                var testFilter = CWN2.Util.transformFilterJson2CQL(rule.Filter);
            } catch (exception) {
                CWN2.Util.msgBox("Attenzione: Errore Parsing del filtro. <br>Layer: " + layerConfig.name + " - " + layerConfig.label + "<br>Rule: " + rule.Name + " - " + rule.Title + "<br>Errore: " + exception);
            }
        }
    },

    onChangeGenerateRulesSubmitButtonClick: function (button, e, eOpts) {
        var me = this;

        Ext.MessageBox.confirm(
            CWN2.I18n.get('Conferma'),
            CWN2.I18n.get('Sei sicuro?'),
            function (btn) {
                if (btn === "yes") {
                    var column = me.getGenerateRulesColumnCombo().getValue(),
                        layer = me.layersConfig[me.selectedLayer];

                    if (column) {
                        CWN2.Util.ajaxRequest({
                            type: "JSONP",
                            url: "/geoservices/REST/config/query_layer_valuelist/" + layer.name.replace("L", "") + "?column=" + column,
                            callBack: function(response) {
                                if (response && !response.success) {
                                    CWN2.Util.msgBox("Attenzione: - " + response.message);
                                    return;
                                }
                                (response.data && response.data.length > 0) ?
                                    me.generateRules(column, response.data) :
                                    CWN2.Util.msgBox("Nessun oggetto trovato");
                            }
                        });

                    } else {
                        CWN2.Util.msgBox("Attenzione: Selezionare una colonna");
                        return;

                    }
                    var win = me.getGenerateRulesWin();
                    win.destroy();
                }
            }
        );
    },

    generateRules: function(column,values) {
        var me = this,
            layer = me.layersConfig[me.selectedLayer],
            rules = [];

        Ext.each(values, function (value,index) {
            if (value.value) {
                var rule = {};
                rule.Name = "R" + index;
                rule.Title = column + " = " + value.value;
                rule.Filter = CWN2.Util.transformFilterCQL2json(column + " = '" + value.value + "'");
                var colorIndex = (index < 9)? index : index - 9;
                var color = CWN2.Globals.COLOR_SCALES["Random"]["9"][colorIndex];
                switch (layer.geomType) {
                    case "POLYGON":
                        rule.PolygonSymbolizer = {
                            Stroke: me.defaultSimpleStrokeStyle,
                            Fill: {
                                "CssParameter": [
                                    {
                                        "_name": "fill",
                                        "__text": color
                                    },
                                    {
                                        "_name": "fill-opacity",
                                        "__text": "1"
                                    }
                                ]
                            }
                        };
                        break;
                    case "LINE":
                        rule.LineSymbolizer = {
                            Stroke: {
                                "CssParameter": [
                                    {
                                        "_name": "stroke",
                                        "__text": color
                                    },
                                    {
                                        "_name": "stroke-opacity",
                                        "__text": "1"
                                    },
                                    {
                                        "_name": "stroke-width",
                                        "__text": "1"
                                    }
                                ]
                            }
                        };
                        break;
                    case "POINT":
                        rule.PointSymbolizer = {
                            Graphic:{
                                "Mark": {
                                    "WellKnownName": "circle",
                                    "Fill": {
                                        "CssParameter": [
                                            {
                                                "_name": "fill",
                                                "__text": color
                                            },
                                            {
                                                "_name": "fill-opacity",
                                                "__text": "1"
                                            }
                                        ]
                                    }
                                },
                                "Size": "10"
                            }
                        };
                        break;
                }
                rules.push(rule);
            }
        });
        layer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule = rules;
        me.reloadRuleCombo();
        me.reloadTabPanel();
        var legendUrl = layer.legendUrl + "&RULE=" + layer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule].Name + '&dc=' + new Date().getTime();
        me.getRuleLegend().setSrc(legendUrl);


    },

    onChangeRuleOrderSubmitButtonClick: function (button, e, eOpts) {
        var me = this;

        Ext.MessageBox.confirm(
            CWN2.I18n.get('Conferma'),
            CWN2.I18n.get('Sei sicuro?'),
            function (btn) {
                if (btn === "yes") {
                    var layer = me.layersConfig[me.selectedLayer],
                        rules = layer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule,
                        items = me.getChangeRuleOrderPanel().store.data.items,
                        newRules = [];

                    Ext.each(items, function (item) {
                        Ext.each(rules, function (rule) {
                            if (rule.Name === item.data.Name) {
                                newRules.push(rule);
                            }
                        });
                    });
                    Ext.each(rules, function (rule) {
                        if (rule.Name === "LABEL") {
                            newRules.push(rule);
                        }
                    });
                    layer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule = newRules;

                    me.reloadRuleCombo();
                    me.reloadTabPanel();
                    var legendUrl = layer.legendUrl + "&RULE=" + layer.sld.StyledLayerDescriptor.NamedLayer.UserStyle.FeatureTypeStyle.Rule[me.selectedRule].Name + '&dc=' + new Date().getTime();
                    me.getRuleLegend().setSrc(legendUrl);
                    var win = me.getChangeRuleOrderWin();
                    win.destroy();
                }
            }
        );
    },

    onChangeRuleOrderCancelButtonClick: function () {
        var me = this;
        Ext.MessageBox.confirm(
            CWN2.I18n.get('Conferma'),
            CWN2.I18n.get('Sei sicuro?'),
            function (btn) {
                if (btn === "yes") {
                    var win = me.getChangeRuleOrderWin();
                    win.destroy();
                }
            }
        );
    },
    layersConfig: [],

    selectedLayer: null,

    selectedRule: null
});


function getCssParameter(element, paramName) {
    var params = (element) ? element.CssParameter : null,
        value = null;

    Ext.each(params, function (param) {
        if (param["_name"] === paramName) {
            value = param["__text"];
            return false;
        }
    });

    return value;
};

function setCssParameter(element, paramName, paramValue) {
    if (!element) return;

    var params = element.CssParameter,
        flagFound = false;

    Ext.each(params, function (param) {
        if (param["_name"] === paramName) {
            // se esiste parametro lo aggiorno
            param["__text"] = paramValue;
            flagFound = true;
            return false;
        }
    });

    if (!flagFound) {
        if (!element.CssParameter) {
            element.CssParameter = [];
        }
        // se non esiste parametro lo inserisco
        element.CssParameter.push({
            "_name": paramName,
            "__text": paramValue
        })
    }

};

function setDefaultMark(mark, type) {
    // se non esiste fill lo creo
    if (!mark.Fill) {
        mark.Fill = {
            CssParameter: [
                {
                    "_name": "fill",
                    "__text": "#000000"
                }
            ]
        }
        if (type === "POINT") {
            mark.Fill.CssParameter.push(
                {
                    "_name": "fill-opacity",
                    "__text": "1"
                }
            );
        }

    }

    // se non esiste stroke lo creo
    if (typeof mark.Stroke === 'undefined') {
        if (type === "POINT") {
            var stroke = getCssParameter(mark.Fill, "fill");
            mark.Stroke = {
                CssParameter: [
                    {
                        "_name": "stroke",
                        "__text": stroke
                    },
                    {
                        "_name": "stroke-width",
                        "__text": "0"
                    },
                    {
                        "_name": "stroke-opacity",
                        "__text": "1"
                    }
                ]
            }
        } else {
            mark.Stroke = {
                CssParameter: [
                    {
                        "_name": "stroke",
                        "__text": "#000000"
                    },
                    {
                        "_name": "stroke-width",
                        "__text": "1"
                    }
                ]
            }
        }
    }

    // se esiste ma è vuoto (<Stroke />) lo creo
    if (mark.Stroke === "") {
        if (type === "POINT") {
            mark.Stroke = {
                CssParameter: [
                    {
                        "_name": "stroke",
                        "__text": "#000000"
                    },
                    {
                        "_name": "stroke-width",
                        "__text": "1"
                    },
                    {
                        "_name": "stroke-opacity",
                        "__text": "1"
                    }
                ]
            }
        } else {
            mark.Stroke = {
                CssParameter: [
                    {
                        "_name": "stroke",
                        "__text": "#000000"
                    },
                    {
                        "_name": "stroke-width",
                        "__text": "1"
                    }
                ]
            }
        }
    }

    // se Stroke è impostato ma stroke-width non è impostato lo imposto a default (1)
    var strokeWidth = getCssParameter(mark.Stroke, "stroke-width");
    if (mark.Stroke && !strokeWidth && strokeWidth !== 0) {
        setCssParameter(mark.Stroke, "stroke-width", "1");
    }

};

Ext.define('CWN2.button.GeocoderCombo', {
    alias: 'widget.cwn2-combo-geocoder',

    constructor: function(config) {

        var btnOptions = config.options || {};

        return Ext.create("CWN2.GeocoderComboBox", {
            id: 'combo-geocoder',
            map: CWN2.app.map,
            hilite: btnOptions.hilite,
            service: "google",
            width: btnOptions.width || 200
        });
    }
});

/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
Ext.define('CWN2.button.InfoWms', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-infowms',

    constructor: function (config) {
        "use strict";

        var btnOptions = config.options || {},
            map = CWN2.app.map,
            id = "infowms",
            me = this,
            hiliteLayerName = "_wmsInfo";

        // --------------------------------------------------------------------------------//

        // instanzio il gestore del layer di evidenziazione
        if (!btnOptions.disableHilite) {
            this.wmsSldHiliter = new CWN2.WmsSldHiliter(map, hiliteLayerName);
        }

        function setQueryLayersByName(layers) {
            if (layers) {
                var len = layers.length,
                    match = {},
                    i;
                match.test = function (name) {
                    for (i = 0; i < len; i++) {
                        if (name === layers[i]) {
                            return true;
                        }
                    }
                    return false;
                };
                return map.getLayersByName(match);
            } else {
                return null;
            }
        }

        // ritorna l'array con i layer della mappa
        function setQueryLayersByConfig() {
            var layers = map.layers,
                queryLayers = [];
            for (var i = 0; i < layers.length; i++) {
                if (layers[i].config && layers[i].config.type === "WMS" && layers[i].config.queryable) {
                    queryLayers.push(layers[i]);
                }
            }
            return queryLayers;
        }

        var vendorParams = btnOptions.vendorParams || {};
        if (btnOptions.radius) {
            vendorParams.radius = btnOptions.radius;
        }

        var control = new OpenLayers.Control.WMSGetFeatureInfo(
            {
                id: "infoWmsControl",
                layers: (btnOptions.layers) ? setQueryLayersByName(btnOptions.layers.split(",")) : setQueryLayersByConfig(),
                queryVisible: true,
                drillDown: true,
                maxFeatures: btnOptions.maxFeatures || CWN2.Globals.INFO_WMS_MAX_FEATURES,
                infoFormat: "application/vnd.ogc.gml",
                //vendorParams: vendorParams,
                output: "object",
                eventListeners: {
                    getfeatureinfo: function (event) {
                        me.fireEvent("getfeatureinfo", event);
                    }
                }
            }
        );

        map.addControl(control);

        this.options = btnOptions;

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Info"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            enableToggle: true,
            control: control,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});

Ext.define('CWN2.button.InfoWms.featureList.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-infowms-featurelist-win',
    title: CWN2.I18n.get("Risultato Interrogazione"),
    height: 350,
    width: 480,
    layout: "fit",
    resizable: false,
    constructor: function (config) {
        this.items = config.items;
        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.InfoWms.featureList.GridPanel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.cwn2-infowms-featurelist-grid',
    header: false,
    frame: true,
    width: 440,
    height: 300,
    iconCls: "icon-grid",
    columns: [
        {
            header: "Livello",
            id: "layerLabel",
            sortable: true,
            dataIndex: "layerLabel",
            renderer: function (legend, metaData, record) {
                var label = record.data.layerLabel;
                var cssStyle = "cursor:pointer; text-decoration:underline";
                return "<div style='" + cssStyle + "'>" + label + " </div>";
            },
            width: 240
        },
        {
            header: "Feature",
            id: "label",
            sortable: true,
            dataIndex: "label",
            renderer: function (legend, metaData, record) {
                var label = record.data.label;
                var cssStyle = "cursor:pointer; text-decoration:underline;font-weight: bold";
                return "<div style='" + cssStyle + "'>" + label + " </div>";
            },
            width: 200
        }
    ],

    constructor: function (config) {
        this.store = Ext.create('CWN2.button.InfoWms.featureList.Store', {
            data: config.data
        });

        this.superclass.constructor.call(this);
    }


});

Ext.define('CWN2.button.InfoWms.featureList.Store', {
    extend: 'Ext.data.Store',
    fields: [
        {
            name: "featureId", mapping: "featureId"
        },
        {
            name: "layerLabel", mapping: "layerLabel"
        },
        {
            name: "layerName", mapping: "layerName"
        },
        {
            name: "label", mapping: "label"
        },
        {
            name: "attributes", mapping: "attributes"
        },
        {
            name: "doc", mapping: "doc"
        },
        {
            name: "feature", mapping: "feature"
        }
    ],
    sortInfo: {field: "layerName", direction: "ASC"},

    constructor: function (config) {
        this.data = config.data;
        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.InfoWms.baseInfo.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-infowms-baseinfo-win',
    height: 400,
    width: 360,
    layout: "fit",
    resizable: false,
    constructor: function (config) {
        this.title = config.title;
        this.items = config.items;
        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.InfoWms.baseInfo.GridPanel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.cwn2-infowms-baseinfo-grid',
    frame: true,
    width: 300,
    header: false,
    height: 300,
    hideHeaders: true,
    iconCls: "icon-grid",
    columns: [
        {
            header: "Campo",
            id: "infoLabelAttr",
            dataIndex: "infoLabelAttr",
            renderer: function (val) {
                return '<div style="white-space:normal !important;"><b>' + val + '</b></div>';
            },
            width: 150
        },
        {
            header: "Valore",
            id: "fieldValue",
            dataIndex: "fieldValue",
            renderer: function (val) {
                return '<div style="white-space:normal !important;">' + val + '</div>';
            },
            width: 150
        }
    ],

    constructor: function (config) {
        this.id = config.id;

        this.store = Ext.create('CWN2.button.InfoWms.baseInfo.Store', {
            data: config.data
        });

        this.superclass.constructor.call(this);
    }

});

Ext.define('CWN2.button.InfoWms.baseInfo.Store', {
    extend: 'Ext.data.Store',
    fields: [
        {
            name: "infoLabelAttr", mapping: "infoLabelAttr"
        },
        {
            name: "fieldValue", mapping: "fieldValue"
        }
    ],

    constructor: function (config) {
        this.data = config.data;
        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.InfoWms.html.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-infowms-html-win',
    title: "Info",
    resizable: false,
//    layout: "fit",
    autoScroll: true,

    constructor: function (config) {
        this.height = config.height;
        this.width = config.width;
        this.items = config.items;
        this.superclass.constructor.call(this);
    }
});

// CONTROLLER
Ext.define('CWN2.controller.button.infowms', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.InfoWms'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-infowms'
        },
        {
            ref: 'featureListWin',
            selector: 'cwn2-infowms-featurelist-win'
        },
        {
            ref: 'featureListGrid',
            selector: 'cwn2-infowms-featurelist-grid'
        },
        {
            ref: 'baseInfoWin',
            selector: 'cwn2-infowms-baseinfo-win'
        },
        {
            ref: 'htmlWin',
            selector: 'cwn2-infowms-html-win'
        }
    ],

    init: function (application) {
        CWN2.Util.log('CWN2.controller.button.infowms: init');

        this.control({
            'cwn2-button-infowms': {
                toggle: this.onButtonPress,
                getfeatureinfo: this.onGetFeatureInfo
            },
            'cwn2-infowms-featurelist-win': {
                destroy: this.onWinDestroy
            },
            'cwn2-infowms-baseinfo-win': {
                destroy: this.onWinDestroy
            },
            'cwn2-infowms-html-win': {
                destroy: this.onWinDestroy
            },
            '#infoWmsMediaWin': {
                destroy: this.onWinDestroy
            },
            'cwn2-infowms-featurelist-grid': {
                select: this.onFeatureListGridSelect
            }

        });
    },

    onGetFeatureInfo: function (event) {
        this.showFeatureList(event);

    },

    onWinDestroy: function () {
        var wmsSldHiliter = this.getButton().wmsSldHiliter;
        if (wmsSldHiliter) {
            wmsSldHiliter.cleanHiliteLayer();
        }
    },

    onFeatureListGridSelect: function (RowModel, record) {
        this.showFeatureInfo(record);
        this.getFeatureListGrid().getSelectionModel().clearSelections();
    },

    onButtonPress: function () {
    },

    showHideWin: function (win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    },

    // Costruisce una finestra con una grid contenente le feature trovate raggruppate per livello
    // Richiamata dalla getFeatureInfo
    showFeatureList: function (event) {
        var me = this,
            button = this.getButton();

        var layers = event.object.findLayers(),                             // elenco dei layer
            layersLabelList = setLayersLabelList(layers),                   // lista delle label dei layer
            groupFeature = event.features,                                  // gruppi di feature
            featureList = setFeatureList(groupFeature, layersLabelList, layers);     // array delle feature

        // se nessuna feature esco
        if (featureList.length === 0) {
            return;
        }

        // se esiste la finestra la distruggo
        if (this.getFeatureListWin()) {
            this.getFeatureListWin().destroy();
        }

        Ext.create("CWN2.button.InfoWms.featureList.Window", {
            items: [
                Ext.create("CWN2.button.InfoWms.featureList.GridPanel", {
                    data: featureList
                })
            ]
        }).show().alignTo(CWN2.app.layout.mapPanel.body, "tl-tl", [10, 10]);

        // se solo una riga apro la finestra della info
        if (featureList.length === 1) {
            this.getFeatureListGrid().getSelectionModel().select(0);
            // commentato per problemi di evidenziazione
            if (button.options.hideFeatureList) {
                this.getFeatureListWin().close();
            }
            //this.getFeatureListWin().close();
        }

        // imposta una lista con le etichette dei layer
        function setLayersLabelList(layers) {
            var label,
                layersLabelList = {},
                len = layers.length;

            for (var i = 0; i < len; i++) {
                if (layers[i].legend && layers[i].legend.label) {
                    label = layers[i].legend.label;
                } else {
                    label = layers[i].name;
                }
                layersLabelList[layers[i].name] = label;
            }

            return layersLabelList;

        }

        // imposta l'array delle feature
        function setFeatureList(groupFeature, layersLabelList, layers) {

            var featureId = 0,
                featureList = [],
                features = null,
                feature = null,
                len2 = groupFeature.length,
                len3 = null;

            for (var j = 0; j < len2; j++) {
                features = groupFeature[j].features;
                len3 = features.length;
                for (var j2 = 0; j2 < len3; j2++) {
                    feature = updateFeatureAttr(featureId, features[j2], groupFeature[j], layersLabelList, layers);
                    featureList.push(feature);
                    featureId++;
                }
            }

            return featureList;

        }

        // aggiorna gli attributi della feature
        function updateFeatureAttr(featureId, feature, group, layersLabelList, layers) {

            var featureType = (feature.gml && feature.gml.featureType) ? feature.gml.featureType : feature.type,
                layerName = getFeatureLayer(featureType, layers),
                attributes = feature.attributes,
                newFeature = {};

            newFeature.featureId = featureId;
            newFeature.layerLabel = layersLabelList[layerName];
            newFeature.layerName = layerName;
            newFeature.attributes = attributes;
            newFeature.feature = feature;
            newFeature.url = group.url;
            newFeature.label = setFeatureLabel(layerName, attributes);

            return newFeature;
        }

        // imposta il nome del layer di riferimento della feature
        // in base al nome del layer WMS/WFS (feature.type) cerca nei layer OL passati (layers)
        // quello che ha l'attributo params.NAME contenente la stringa contenuta in feature.type
        function getFeatureLayer(featureType, layers) {
            var len = layers.length;
            for (var i = 0; i < len; i++) {
                if (!layers[i].params.LAYERS) {
                    return featureType;
                }
                if (layers[i].params.LAYERS.indexOf(featureType) !== -1) {
                    return layers[i].name;
                }
            }
        }

        // ritorna la label della feature
        // se impostato uso il campo infoLabelAttr altrimenti uso il campo infoIdAttr altrimenti uso il primo attributo
        function setFeatureLabel(layerName, attributes) {
            var infoLabelAttr,
                infoIdAttr;
            infoLabelAttr = getField(layerName, "infoLabelAttr");
            infoIdAttr = getField(layerName, "infoIdAttr");
            if (infoLabelAttr && attributes[infoLabelAttr]) {
                return attributes[infoLabelAttr];
            } else {
                if (infoIdAttr && attributes[infoIdAttr]) {
                    return attributes[infoIdAttr];
                } else {
                    return attributes[getFirstAttribute(attributes)];
                }
            }
        }

        // ritorna il campo del layer corrispondente al fildName se non trovato ritorna null
        function getField(layerName, fieldName) {
            try {
                var layerConfig = CWN2.app.map.layerManager.getLayerConfigByName(layerName);
                if (!layerConfig) {
                    throw {
                        name: "BadConfiguration",
                        message: "CWN2.button.InfoWms: layer non esistente",
                        level: 1
                    };
                }
                if (layerConfig.infoOptions && layerConfig.infoOptions[fieldName]) {
                    return layerConfig.infoOptions[fieldName];
                } else {
                    return null;
                }
            } catch (exception) {
                CWN2.Util.handleException(exception);
                return null;
            }
        }

        // ritorna il primo attributo dalla lista di attributi della feature
        function getFirstAttribute(attributes) {

            for (var i in attributes) {
                if (attributes.hasOwnProperty(i) && typeof(i) !== "function") {
                    return i;
                }
            }
            return null;
        }
    },

    showFeatureInfo: function (rec) {
        var data = rec.data,
            layerName = data.layerName,
            layerConfig = CWN2.app.map.layerManager.getLayerConfigByName(layerName),
            me = this,
            btnOptions = me.getButton().options,
            configOptions = layerConfig.infoOptions,
            exception = {};

        if (!layerConfig) {
            return;
        }

        checkLayerConfig();

        if (me.getButton().wmsSldHiliter) {
            hiliteFeature();
        }


        // gestione infoUrl: se impostato attributo infoUrl gestisco la info con la url altrimenti costruisco scheda base con pannello extjs
        (configOptions && configOptions.infoUrl) ? showInfoUrlWiew(configOptions, data) : showBaseInfoWin(configOptions, data);

        // controlli
        function checkLayerConfig() {
            if (layerConfig.infoOptions && !layerConfig.infoOptions.infoIdAttr) {
                CWN2.Util.log("CWN2.button.InfoWms - parametro di configurazione del layer non impostato: infoIdAttr ", 0);
            }
            if (!layerConfig.geomSubType) {
                CWN2.Util.log("CWN2.button.InfoWms - parametro di configurazione del layer non impostato: geomSubType ", 0);
            }
        }

        // costruisce un pannello extjs con la scheda della feature
        // (se esiste oggetto "configOptions.infoScheda.mapping" in configurazione)
        function showBaseInfoWin(configOptions, data) {

            var attributes = data.attributes,
                attrList = [],
                gridTitle = data.layerLabel,
                fieldMapping = configOptions ? configOptions.fieldMapping : null,
                infoLabelAttr,
                fieldValue;

            // costruisco l'array con gli attributi della feature
            for (var attr in attributes) {
                if (attributes.hasOwnProperty(attr)) {
                    infoLabelAttr = fieldMapping ? fieldMapping[attr] : attr;
                    fieldValue = attributes[attr] || '';
                    attrList.push({"infoLabelAttr": infoLabelAttr, "fieldValue": fieldValue});
                }
            }

            // se esiste la finestra la distruggo
            if (me.getBaseInfoWin()) {
                me.getBaseInfoWin().destroy();
            }

            var win = Ext.create("CWN2.button.InfoWms.baseInfo.Window", {
                title: data.layerLabel,
                items: [
                    Ext.create("CWN2.button.InfoWms.baseInfo.GridPanel", {
                        data: attrList
                    })
                ]
            });

            win.show().alignTo(CWN2.app.layout.mapPanel.body, "tl-tl", [500, 10]);

            //Ext.WindowManager.register(win);
            //Ext.WindowManager.bringToFront(win);

        }

        // costruisce la scheda con una url remota
        function showInfoUrlWiew(configOptions, data) {
            // sostituisco variabile con valore - prerequisito: deve esistere un attributo con nome uguale alla variabile
            // es: se infoUrl e' http://pippo/pluto.asp?id=${gid} deve esistere attributo "gid" in attributes della feature
            var infoUrl = OpenLayers.String.format(configOptions.infoUrl, data.attributes);

            // gestione formattazione QPG
            if (CWN2.app.configuration.qpgRequest) {
                var tematismi = CWN2.app.configuration.qpgRequest.tematismi;
                Ext.each(tematismi, function (tematismo) {
                    if (data.layerName === tematismo.olLayer.name && tematismo.separatoreDecimale === ",") {
                        numeral.language('it');
                        var valore = parseFloat(data.attributes["VALORE"]);
                        if (!isNaN(valore)) {
                            data.attributes["VALORE"] =  numeral(valore).format('0000.00')
                        }
                    }
                });
            }

            if ((infoUrl.substr(infoUrl.length - 4) === ".xsl") || (infoUrl.substr(infoUrl.length - 5) === ".xslt")) {
                buildHtmlDoc(configOptions, data);
            } else {
                if (!configOptions.infoTarget || configOptions.infoTarget === "panel") {
                    showIframeWin(infoUrl, configOptions);
                } else {
                    showPopupUrl(infoUrl, configOptions);
                }
            }

// costruisce una scheda html nel caso di info xsl
            function buildHtmlDoc(configOptions, data) {
                var xslUrl = "/geoservices/REST/config/xsl_info_service?";
                // costruisco il gml in formato getFeatureInfo Mapserver
                var xmlDoc = buildGml(data);

                var jsonData = {
                    xslUrl: configOptions.infoUrl,
                    ambiente: CWN2.Globals.AMBIENTE,
                    idLayer: data.layerName.replace("L", ""),
                    featureAttributes: data.attributes
                }

                CWN2.Util.ajaxRequest({
                    type: "XML",
                    url: xslUrl,
                    jsonData: jsonData,
                    callBack: function (xslDoc) {
                        try {
                            // scrivo il titolo del layer
                            var td = Ext.DomQuery.select("td", xslDoc);
                            Ext.each(td, function (el) {
                                if (el.id === "Titolo") {
                                    el.textContent = data.layerLabel;
                                    return false;
                                }
                                // Gestione IE
                                Ext.each(el.attributes, function (attr) {
                                        if (attr.text === "Titolo") {
                                            el.text = data.layerLabel; // IE8/9
                                            return false;
                                        }
                                    }
                                );
                            })
                            // applico la trasformazione xslt
                            var result = xslTransform(xmlDoc, xslDoc);
                            // levo i caratteri di encoding %0A e %09 dai link
                            result = result.replace(new RegExp('%0A', 'g'), '').replace(new RegExp('%09', 'g'), '').replace(new RegExp('%20', 'g'), '');
                            // visualizzo il risultato
                            if (!configOptions.infoTarget || configOptions.infoTarget === "panel") {
                                showHtmlPanel(result, configOptions);
                            } else {
                                showHtmlPopup(result, configOptions);
                            }
                        } catch (exception) {
                            CWN2.Util.handleException(exception);
                        }
                    }
                });

                // costruisce un documento GML in formato getFeatureInfo Mapserver
                function buildGml(feature) {
                    try {
                        var baseXml = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><msGMLOutput xmlns:gml=\"http://www.opengis.net/gml\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"></msGMLOutput>",
                            xmlDoc = CWN2.Util.parseXML(baseXml),
                            layerName = feature.layerName + "_layer",
                            layerNode = xmlDoc.createElement(layerName),
                            featureName = feature.layerName + "_feature",
                            featureNode = xmlDoc.createElement(featureName),
                            attributes = feature.attributes;

                        for (var key in attributes) {
                            if (attributes.hasOwnProperty(key)) {
                                var text = null;
                                if (attributes[key]) {
                                    text = xmlDoc.createTextNode(attributes[key]);
                                } else {
                                    text = xmlDoc.createTextNode("");
                                }
                                var attrNode = xmlDoc.createElement(key);
                                attrNode.appendChild(text);
                                featureNode.appendChild(attrNode);
                            }
                        }
                        layerNode.appendChild(featureNode);
                        xmlDoc.documentElement.appendChild(layerNode);
                        return xmlDoc;
                    } catch (exception) {
                        throw {
                            name: "gmlTransformation",
                            message: "CWN2.button.infoWms.buildGml: errore costruzione xmlDoc gml - " + exception.message,
                            level: 1
                        };
                    }
                }

                // trasformo xml in html applicando xslt
                function xslTransform(xmlDoc, xslDoc) {
                    try {
                        if (window.XSLTProcessor) {
                            var xsltProcessor = new XSLTProcessor();
                            xsltProcessor.importStylesheet(xslDoc);
                            var transformedDoc = xsltProcessor.transformToDocument(xmlDoc);
                            return (new XMLSerializer()).serializeToString(transformedDoc);
                        } else {
                            return xmlDoc.transformNode(xslDoc);
                        }
                    } catch (exception) {
                        throw {
                            name: "gmlTransformation",
                            message: "CWN2.button.infoWms.xslTransform: errore trasformazione xslt - " + exception.message,
                            level: 1
                        };
                    }
                }

                // apre una panel extjs con un documento html
                function showHtmlPanel(html, configOptions) {
                    var width = configOptions.infoWidth || 400,
                        height = configOptions.infoHeight || 500;

                    // se esiste la finestra la distruggo
                    if (me.getHtmlWin()) {
                        me.getHtmlWin().destroy();
                    }

                    var win = Ext.create('CWN2.button.InfoWms.html.Window', {
                        height: height,
                        width: width,
                        items: [
                            {
                                xtype: 'panel',
                                manageHeight: false,
                                border: false,
                                title: "",
                                html: html
                            }
                        ]
                    }).show().alignTo(CWN2.app.layout.mapPanel.body, "tl-tl", [20, 20]);
                }

                // apre una popup con un documento html
                function showHtmlPopup(htmlString, configOptions) {
                    var width = configOptions.infoWidth || 400,
                        height = configOptions.infoHeight || 500,
                        popup = window.open("", null, "status=yes, toolbar=yes, menubar=no, width=" + width + ", height=" + height + ", resizable=yes, scrollbars=yes");
                    popup.document.open();
                    popup.document.write(htmlString);
                    popup.document.close();
                    popup.focus();
                }
            }

// costruisce la scheda con una documento in un Iframe
            function showIframeWin(infoUrl, configOptions) {
                var win = new CWN2.IframeWindow({
                    url: infoUrl,
                    width: configOptions.infoWidth,
                    height: configOptions.infoHeight,
                    id: "infoWmsMediaWin"
                }).alignTo(CWN2.app.layout.mapPanel.body, "tl-tl", [10, 10]);
            }

// apre una popup con una url remota
            function showPopupUrl(url, configOptions) {
                var width = configOptions.infoWidth || 400,
                    height = configOptions.infoHeight || 500,
                    popup = window.open(url, configOptions.infoTarget, "status=yes, toolbar=yes, menubar=no, width=" + width + ", height=" + height + ", resizable=yes, scrollbars=yes");
                popup.focus();
            }

        }

        // evidenziazione feature
        function hiliteFeature() {
            if (!layerConfig.infoOptions) {
                return null;
            }
            var idField = layerConfig.infoOptions.infoIdAttr;
            var values = [];
            if (data.feature && data.feature.attributes) {
                values.push(data.feature.attributes[idField]);
            }
            if (typeof values[0] === "undefined") {
                CWN2.Util.log("Parametro layerConfig.infoOptions.infoIdAttr non impostato", 0);
                return;
            }
            var bounds = null,
                zoomLevel = null;
            if (btnOptions && btnOptions.zoomToSelected) {
                bounds = data.feature.bounds;
            }
            if (btnOptions && btnOptions.zoomLevel) {
                zoomLevel = btnOptions.zoomLevel;
            }
            return me.getButton().wmsSldHiliter.hiliteFeature({
                layers: [layerConfig.name],
                fields: idField,
                values: values,
                bounds: bounds,
                zoomLevel: zoomLevel
            });
        }

    }

});



Ext.define('CWN2.button.LoadLayers', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-loadlayers',

    constructor: function(config) {
        var btnOptions = config.options,
            id = "loadlayers";

        this.config = config;

        this.superclass.constructor.call(this, {
            tooltip: CWN2.I18n.get("Aggiunta Livelli"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            pressed: false,
            id: id
        });
    }
});

Ext.define('CWN2.button.LoadLayers.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-loadlayers-win',

    title: CWN2.I18n.get("Aggiunta Livelli"),
    height: 500,
    width: 700,
    resizable: true,
    layout: "fit",
    closeAction: "hide",
    buttons: [
        {
            text: CWN2.I18n.get("Aggiungi"),
            action: "loadlayers-submit"
        },
        {
            text: CWN2.I18n.get("Annulla"),
            action: "loadlayers-cancel"
        }
    ],
    constructor: function(config) {
        this.items = Ext.create('CWN2.button.LoadLayers.TabPanel', {
            items: config.items
        });

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.LoadLayers.TabPanel', {
    extend: 'Ext.tab.Panel',
    alias: 'widget.cwn2-loadlayers-tabpanel',
    activeTab: 0,
    bodyBorder: false,
    deferredRender: false,
    layoutOnTabChange: false,
    border: false,
    flex: 1,
    plain: true,

    constructor: function(config) {
        this.items = config.items;

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.LoadLayers.TreePanel', {
    extend: 'Ext.tree.Panel',
    alias: 'widget.cwn2-loadlayers-tree',
    layout: 'anchor',
    rootVisible: false,
    animate: true,
    autoScroll: true,
    nodeType: "async",
    containerScroll: true,
    border: false,
    bodyStyle: "padding:10px",
    bodyBorder: true,
    height: 530,
    useArrows: true,
    multiSelect: true,

    constructor: function(config) {
        this.title = config.title;
        this.store = config.store;
        this.type = config.type;
        this.panelConfig = config.panelConfig;

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.LoadLayers.WmsCapabilitiesUrl', {
    extend: 'Ext.form.field.Text',
    alias: "widget.cwn2-btn-loadlayers-wmsurl-field",
    allowBlank: false,
    value: "",
    width: 500
});



Ext.define('CWN2.button.LoadLayers.WmsPanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.cwn2-loadlayers-wmspanel',
    height: 530,
    title: "Servizi WMS",
    bodyStyle: "padding:5px 5px 0",


    constructor: function(config) {
        this.type = "wms";
        this.panelConfig = config.panelConfig;

        this.items = [
            {
                xtype: 'fieldcontainer',
                border: false,
                width: 600,
                flex: 1,
                layout: 'hbox',
                items: [
                    {
                        xtype: 'cwn2-btn-loadlayers-wmsurl-field',
                        fieldLabel: 'URL Capabilities'
                    },
                    {
                        xtype: 'tbfill'
                    },
                    {
                        xtype: 'button',
                        text: 'Lista Layer',
                        handler: function() {
                            var store = Ext.data.StoreManager.lookup('wmscapsStore')
                            var url = Ext.ComponentQuery.query("cwn2-btn-loadlayers-wmsurl-field")[0].value;
                            if (url.indexOf("?") === -1) {
                                url += "?"
                            }
                            if (url.toUpperCase().indexOf("REQUEST=GETCAPABILITIES") === -1) {
                                url += "&REQUEST=GETCAPABILITIES"
                            }
                            if (url.toUpperCase().indexOf("SERVICE=WMS") === -1) {
                                url += "&SERVICE=WMS"
                            }
                            store.getProxy().url = CWN2.Globals.proxy + url;
                            store.load();
                        }
                    }
                ]
            },
            Ext.create('CWN2.button.LoadLayers.WmsGrid', {
                panelConfig: config.panelConfig
            })
        ]
        this.superclass.constructor.call(this);
    }

});

Ext.define('CWN2.button.LoadLayers.WmsGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.cwn2-loadlayers-wmsgrid',
    height: 380,
    multiSelect: true,
    columns: [
        {header: "Titolo", dataIndex: "title", sortable: true},
        {id: "description", header: "Descrizione", dataIndex: "abstract", flex: 1}
    ],

    constructor: function(config) {

        this.store = Ext.create('GeoExt.data.WmsCapabilitiesStore', {
            storeId: 'wmscapsStore',
            url: null,
            autoLoad: false
        });
        this.type = "wms";
        this.superclass.constructor.call(this);
    }
});


Ext.define('CWN2.button.LoadLayers.KmlPanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.cwn2-loadlayers-kmlpanel',
    height: 530,
    title: "File KML/GPX",
    bodyStyle: "padding:5px 5px 0",


    constructor: function(config) {
        this.type = "kml";
        this.panelConfig = config.panelConfig;

        this.items = [
            {
                xtype: 'displayfield',
                //fieldLabel: 'Indicare la URL di un file kml/kmz/gpx oppure selezionare un file ca caricare',
                name: 'home_score',
                value: '<br><b>Selezionare un file da caricare oppure indicare la URL di un file KML/KMZ o GPX (anche zippato)</b><br><br>'
            },
            {
                xtype: 'filefield',
                emptyText: 'Seleziona un file kml/kmz o gpx',
                width: 500,
                regex     : (/.(kml|kmz|gpx|zip)$/i),
                regexText : 'Sono ammessi solo i file con estensione kml/kmz/gpx/zip',
                msgTarget : 'under',
                //buttonOnly: true,
                //allowBlank: false,
                validator: function() {
                    var form = this.up('form').getForm();
                    var urlField = form.findField("kml-url").getValue();
                    if (!this.value && !urlField) {
                        return false;
                    }
                    return true;
                },
                fieldLabel: 'File',
                name: 'kml-file',
                buttonText: 'Browse'
            },
            {
                xtype: 'textfield',
                fieldLabel: 'URL',
                name: 'kml-url',
                allowBlank: true,
                vtype:'url',
                msgTarget : 'under',
                value: "",
                width: 500,
                validator: function() {
                    var form = this.up('form').getForm();
                    var fileField = form.findField("kml-file").getValue();
                    if (!this.value && !fileField) {
                        return false;
                    }
                    return true;
                }
            }

        ]
        this.superclass.constructor.call(this);
    }

});

// CONTROLLER
Ext.define('CWN2.controller.button.loadlayers', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.LoadLayers',
        'CWN2.button.LoadLayers.Window'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-loadlayers'
        },
        {
            ref: 'win',
            selector: 'cwn2-loadlayers-win'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.loadlayers: init');

        this.control({
            'cwn2-button-loadlayers': {
                click: this.onClick
            },
            'button[action=loadlayers-submit]': {
                click: this.onSubmitButtonClick
            },
            'button[action=loadlayers-cancel]': {
                click: this.onCancelButtonClick
            }

        });
    },

    onSubmitButtonClick: function() {
        var activeTab = Ext.ComponentQuery.query('cwn2-loadlayers-tabpanel')[0].getActiveTab();

        switch (activeTab.type) {
            case "map":
                this.mapTreeSubmitHandler(activeTab);
                break;
            case "layer":
                this.layerTreeSubmitHandler(activeTab);
                break;
            case "wms":
                this.wmsSubmitHandler(activeTab);
                break;
            case "kml":
                this.kmlSubmitHandler(activeTab);
                break;
        }
    },

    mapTreeSubmitHandler: function(activeTab) {
        var selNode = activeTab.getSelectionModel().getSelection()[0],
            me = this;

        if (!selNode || !selNode.data.idMap) {
            Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), CWN2.I18n.get("Nessuna carta selezionata"));
            return;
        }

        CWN2.loadingScreen = Ext.getBody().mask('Caricamento Livelli', 'loadingscreen');
        CWN2.Util.ajaxRequest({
            type: "JSONP",
            url: CWN2.Globals.RL_MAP_CONFIG_SERVICE + selNode.data.idMap,
            callBack: function(response) {
                CWN2.app.map.layerManager.addLayers(response.data.layers);
                me.getWin().hide();
            }
        });
    },

    layerTreeSubmitHandler: function(activeTab) {
        var selNodes = activeTab.getSelectionModel().getSelection(),
            me = this,
            layerList = "";

        // costruisco la stringa con i codici dei layer concatenati da virgole
        Ext.each(selNodes, function(node) {
            if (node.data.idLayer) {
                layerList += node.data.idLayer + ",";
            }
        });

        if ((layerList.length) === 0) {
            Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), CWN2.I18n.get("Nessun livello selezionato"));
            return;
        }
        layerList = layerList.substr(0, layerList.length - 1);

        // chiamo il servizio che mi ritorna la configurazione dei layer
        Ext.MessageBox.wait('Caricamento', 'Attendere');
        CWN2.Util.ajaxRequest({
            type: "JSONP",
            url: activeTab.panelConfig.options["layersConfigServiceUrl"] + layerList,
            callBack: function(response) {
                CWN2.app.map.layerManager.addLayers(response.data);
                me.getWin().hide();
                Ext.MessageBox.hide();
            }
        });
    },


    wmsSubmitHandler: function(activeTab) {
        var selNodes = activeTab.items.items[1].getSelectionModel().getSelection(),
            me = this,
            layerList = "",
            srsDefined = true;

        // costruisco la stringa con i codici dei layer concatenati da virgole
        Ext.each(selNodes, function(node) {
            // controllo che srs della mappa sia gestito dal servizio wms
            if (!node.data.srs[CWN2.app.map.projection]) {
                srsDefined = false;
                return false;
            }
            CWN2.app.map.layerManager.addLayers(
                {
                    type: "WMS",
                    name: node.data.name,
                    minScale: node.data.minScale,
                    maxScale: node.data.maxScale,
                    queryable: node.data.queryable,
                    visible: true,
                    wmsParams: {
                        url: node.raw.url,
                        transparent: true,
                        name: node.data.name
                    },
                    legend: {
                        label: node.data.title,
                        icon: "http://geoportale.regione.liguria.it/geoviewer/img/legend/classi.gif"
                    }
                }
            );

        });

        if (!srsDefined) {
            Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), CWN2.I18n.get("Sistema di riferimento non gestito"));
        }
        me.getWin().hide();

    },

    kmlSubmitHandler: function(activeTab) {
        var me = this;
        var form = activeTab.form;
        //TODO controllo estensione kml/kmz/gpz/zip
        if(form.isValid()){
            if (form.getValues()["kml-url"]) {
                if (form.getValues()["kml-url"].indexOf("kmz") > -1) {
                    form.submit({
                        url: '/geoservices/REST/utils/kmz_upload_and_unzip/?url=' + form.getValues()["kml-url"],
                        waitMsg: 'Caricamento file....',
                        success: function(fp, o) {
                            me.kmlLoadLayer(o.result.file);
                        },
                        failure: function(form, response) {
                            Ext.Msg.alert(CWN2.I18n.get("Attenzione"), response.result.error);
                        }
                    });
                } else {
                    me.kmlLoadLayer(form.getValues()["kml-url"]);
                }
            } else {
                form.submit({
                    url: '/geoservices/REST/utils/file_upload',
                    waitMsg: 'Caricamento file....',
                    success: function(fp, o) {
                        me.kmlLoadLayer(o.result.file);
                    },
                    failure: function(form, response) {
                        Ext.Msg.alert(CWN2.I18n.get("Attenzione"), response.result.error);
                    }
                });
            }
            me.getWin().hide();
        } else {
            Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), "Indicare una URL o un file da caricare");
        }
    },

    kmlLoadLayer: function(url) {
        if (url.indexOf("kml") === -1 && url.indexOf("gpx") === -1) {
            Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), "Indicare una URL o un file da caricare");
        }
        var type = (url.indexOf("kml") > -1)? "KML" : "GPX";
        var name = url.substring(url.lastIndexOf("/") + 1 , url.length - 4);

        var layerConfig = {
            name: name,
            type: type,
            projection: "EPSG:4326",
            url: url,
            visible: true,
            legend: {
                label: name,
                icon: "http://geoportale.regione.liguria.it/geoviewer/img/legend/classi.gif"
            },
            infoOptions: {
                infoPopUp: "simple",
                infoWidth: 300,
                infoHeight: 300

            }
        };

        if (!CWN2.app.map.layerManager.isLayerInConfigWithTitle(layerConfig)) {
            CWN2.app.map.layerManager.addLayers(layerConfig);
        } else {
            Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), "File già presente come livello sulla mappa");
        }
    },

    onCancelButtonClick: function() {
        this.getWin().hide();
    },

    onClick: function() {
        var mapPanel = CWN2.app.layout.mapPanel,
            win = this.getWin(),
            button = this.getButton(),
            me = this;

        if (!win) {
            var tabs = [];
            // ciclo sull'array dei pannelli per costruirli
            Ext.each(button.config.panels, function(panel) {
                switch (panel.type) {
                    case "layerTree":
                        tabs.push(me.buildTreePanel(panel, "layer"));
                        break;
                    case "mapTree":
                        tabs.push(me.buildTreePanel(panel, "map"));
                        break;
                    case "wms":
                        tabs.push(me.buildWmsPanel(panel));
                        break;
                    case "kml":
                        tabs.push(me.buildKmlPanel(panel));
                        break;
                }
            });
            win = Ext.create('CWN2.button.LoadLayers.Window', {
                items: tabs
            });
        }
        this.showHideWin(win, mapPanel);

    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    },

    // costruisce un panel di tipo tree per aggiunta mappe o layer
    buildTreePanel: function(panelConfig, type) {
        var idField = (type === "map") ? "idMap" : "idLayer";
        var me = this;

        Ext.define('CWN2.button.LoadLayers.Tree', {
            extend: 'Ext.data.Model',
            fields: [idField, 'text']
        });

        var store = Ext.create('Ext.data.TreeStore', {
            model: 'CWN2.button.LoadLayers.Tree',
            proxy: {
                type: 'jsonp',
                url: panelConfig.options.treeServiceUrl,
                root: 'data'
            },
            root: 'data'
        });
        this.loadTree(store, panelConfig.options.treeServiceUrl);

        return Ext.create('CWN2.button.LoadLayers.TreePanel', {
            title: CWN2.I18n.get(panelConfig.name),
            store: store,
            type: type,
            panelConfig: panelConfig
        });
    },

    loadTree: function(treePanel, treeServiceUrl) {
        CWN2.Util.ajaxRequest({
            type: "JSONP",
            url: treeServiceUrl,
            callBack: function(response) {
                var root = response.data;
                treePanel.setRootNode(root);
            }
        });
    },

    // costruisce un panel per i servizi wms
    buildWmsPanel: function(panelConfig) {
        var me = this;
        return Ext.create('CWN2.button.LoadLayers.WmsPanel', {
            panelConfig: panelConfig
        });
    },

    // costruisce un panel per i servizi wms
    buildKmlPanel: function(panelConfig) {
        var me = this;
        return Ext.create('CWN2.button.LoadLayers.KmlPanel', {
            panelConfig: panelConfig
        });
    }



});Ext.define('CWN2.button.MeasureArea', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-measurearea',

    constructor: function(config) {
        var btnOptions = config.options,
            map = CWN2.app.map,
            id = "measurearea",
            statusBarItemName = "cwn2-measure-div",
            control = new OpenLayers.Control.Measure(OpenLayers.Handler.Polygon, {
                persist: true,
                geodesic: true,
                eventListeners: {
                    measure: function(evt) {
                        var text = CWN2.I18n.get("Area") + ": " + evt.measure.toFixed(3) + " " + evt.units + "2";
                        Ext.ComponentQuery.query('cwn2-statusbar')[0].setStatusbarItemText(statusBarItemName, text);
                    },
                    measurepartial: function(evt) {
                        var text = CWN2.I18n.get("Area") + ": " + evt.measure.toFixed(3) + " " + evt.units + "2";
                        Ext.ComponentQuery.query('cwn2-statusbar')[0].setStatusbarItemText(statusBarItemName, text);
                    }
                }
            });

        // aggiungo alla statusbar il campo per la visualizzazione delle misure
        Ext.ComponentQuery.query('cwn2-statusbar')[0].addStatusbarItem({
            id: statusBarItemName,
            text: "",
            width: 200,
            xtype: "tbtext"
        });

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Misure Areali"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            enableToggle: true,
            control: control,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});


Ext.define('CWN2.button.MeasureLine', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-measureline',

    constructor: function(config) {
        var btnOptions = config.options,
            map = CWN2.app.map,
            statusBarItemName = "cwn2-measure-div",
            id = "measureline",
            control = new OpenLayers.Control.Measure(OpenLayers.Handler.Path, {
                persist: true,
                geodesic: true,
                eventListeners: {
                    measure: function(evt) {
                        var text = CWN2.I18n.get("Distanza") + ": " + evt.measure.toFixed(3) + " " + evt.units;
                        Ext.ComponentQuery.query('cwn2-statusbar')[0].setStatusbarItemText(statusBarItemName, text);
                    },
                    measurepartial: function(evt) {
                        var text = CWN2.I18n.get("Distanza") + ": " + evt.measure.toFixed(3) + " " + evt.units;
                        Ext.ComponentQuery.query('cwn2-statusbar')[0].setStatusbarItemText(statusBarItemName, text);
                    }
                }
            });

        // aggiungo alla statusbar il campo per la visualizzazione delle misure
        Ext.ComponentQuery.query('cwn2-statusbar')[0].addStatusbarItem({
            id: statusBarItemName,
            text: "",
            width: 200,
            xtype: "tbtext"
        });

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Misure Lineari"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            enableToggle: true,
            control: control,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});


Ext.define('CWN2.button.ModifyFeature', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-modifyfeature',

    constructor: function(config) {
        var btnOptions = config.options,
            map = CWN2.app.map,
            id = "modifyFeature",
            mode = OpenLayers.Control.ModifyFeature.RESHAPE,
            ctrlOptions = {
                mode: mode,
                createVertices: true
            },
            control = new OpenLayers.Control.ModifyFeature(CWN2.Editor.createEditingLayer(map), ctrlOptions);

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Modifica geometria"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            control: control,
            enableToggle: true,
            toggleGroup: "mapInteractToggleGroup"
        }));

    }
});

Ext.define('CWN2.button.Pan', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-pan',

    constructor: function(config) {
        var id = "pan",
            btnOptions = config.options,
            btnPanels = config.panels,
            map = CWN2.app.map,
            control = new OpenLayers.Control.Navigation();

        map.addControl(control);
        map.getControlsByClass("OpenLayers.Control.Navigation")[0].deactivate();

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            tooltip: CWN2.I18n.get("Pan"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            //width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            scale: config.scale,
            enableToggle: true,
            control: control,
            id: id,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});


Ext.define('CWN2.button.Print', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-print',

    constructor: function(config) {
        var btnOptions = config.options;

        this.superclass.constructor.call(this, {
            id: "print",
            tooltip: CWN2.I18n.get("Stampa"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : "print",
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            pressed: false
        });
    }
});

Ext.define('CWN2.button.Print.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-print-win',
    closeAction: 'hide',
    title: CWN2.I18n.get("Stampa"),
    height: 400,
    width: 400,
    layout: "fit",
    resizable: false,

    constructor: function(config) {

        this.items = [
            {
                xtype: 'panel',
                height: "auto",
                width: "auto",
                frame: true,
                items: [
                    {
                        xtype: 'fieldset',
                        title: ' ',
                        width: 350,
                        border: false,
                        labelWidth: 20,
                        flex: 1,
                        //layout: 'hbox',
                        items: [
                            {
                                xtype: 'cwn2-btn-print-format-combo'
                            },
                            {
                                xtype: 'cwn2-btn-print-scale-field'
                            }
                        ]
                    },
                    {
                        xtype: 'cwn2-btn-print-pngfieldset'
                    },
                    {
                        xtype: 'cwn2-btn-print-pdffieldset'
                    }

                ],
                buttons: [
                    {
                        text: CWN2.I18n.get("Stampa"),
                        action: "print-submit"
                    },
                    {
                        text: CWN2.I18n.get("Annulla"),
                        action: "print-cancel"
                    }
                ],
                autoScroll: true
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.Print.PngFieldSet', {
    extend: 'Ext.form.FieldSet',
    alias: "widget.cwn2-btn-print-pngfieldset",
    title: 'Dimensione PNG',
    width: 370,
    flex: 1,
    //layout: 'hbox',
    items: [
        {
            xtype: 'cwn2-btn-print-width-field'
        },
        {
            xtype: 'cwn2-btn-print-height-field'
        }
    ]

});

Ext.define('CWN2.button.Print.PdfFieldSet', {
    extend: 'Ext.form.FieldSet',
    alias: "widget.cwn2-btn-print-pdffieldset",
    title: 'Pagina PDF',
    width: 370,
    flex: 1,
    //layout: 'hbox',
    items: [
        {
            xtype: 'cwn2-btn-print-pagesize-combo'
        },
        {
            xtype: 'cwn2-btn-print-orientation-combo'
        },
        {
            xtype: 'cwn2-btn-print-title-field'
        }
    ]

});

Ext.define('CWN2.button.Print.OrientationCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-print-orientation-combo",
    fieldLabel: 'Orientazione',
    queryMode: 'local',
    store: [
        ["portrait", "Verticale"],
        ["landscape", "Orizzontale"]
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "portrait",
    width: 200
});

Ext.define('CWN2.button.Print.PageSizeCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-print-pagesize-combo",
    fieldLabel: 'Dimensione',
    queryMode: 'local',
    store: [
        ["A3", "A3"],
        ["A4", "A4"],
        ["A5", "A5"]
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "A4",
    width: 160
});

Ext.define('CWN2.button.Print.FormatCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-print-format-combo",
    fieldLabel: 'Formato',
    labelWidth: 50,
    queryMode: 'local',
    store: [
        ["pdf", "File PDF"],
        ["png", "Immagine PNG"]
    ],
    typeAhead: true,
    triggerAction: 'all',
    value: "pdf",
    width: 160
});

Ext.define('CWN2.button.Print.TitleField', {
    extend: 'Ext.form.TextArea',
    alias: "widget.cwn2-btn-print-title-field",
    fieldLabel: 'Titolo',
    allowBlank: true,
    width: 340,
    value: null
});

Ext.define('CWN2.button.Print.WidthField', {
    extend: 'Ext.form.NumberField',
    alias: "widget.cwn2-btn-print-width-field",
    fieldLabel: 'Larghezza (pixel)',
    allowBlank: false,
    value: "1",
    minValue: 1,
    maxValue: 2024,
    width: 160
});

Ext.define('CWN2.button.Print.ScaleField', {
    extend: 'Ext.form.field.Checkbox',
    alias: "widget.cwn2-btn-print-scale-field",
    boxLabel: 'Mantieni Scala',
    checked   : true
});

Ext.define('CWN2.button.Print.HeightField', {
    extend: 'Ext.form.NumberField',
    alias: "widget.cwn2-btn-print-height-field",
    fieldLabel: 'Altezza (pixel)',
    allowBlank: false,
    value: "1",
    minValue: 1,
    maxValue: 2024,
    width: 160
});

// CONTROLLER
Ext.define('CWN2.controller.button.print', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.Print'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-print'
        },
        {
            ref: 'win',
            selector: 'cwn2-print-win'
        },
        {
            ref: 'format',
            selector: 'cwn2-btn-print-format-combo'
        },
        {
            ref: 'width',
            selector: 'cwn2-btn-print-width-field'
        },
        {
            ref: 'height',
            selector: 'cwn2-btn-print-height-field'
        },
        {
            ref: 'title',
            selector: 'cwn2-btn-print-title-field'
        },
        {
            ref: 'orientation',
            selector: 'cwn2-btn-print-orientation-combo'
        },
        {
            ref: 'pageSize',
            selector: 'cwn2-btn-print-pagesize-combo'
        },
        {
            ref: 'scale',
            selector: ' cwn2-btn-print-scale-field'
        },
        {
            ref: 'pngFieldSet',
            selector: ' cwn2-btn-print-pngfieldset'
        },
        {
            ref: 'pdfFieldSet',
            selector: ' cwn2-btn-print-pdffieldset'
        }



    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.print: init');

        this.control({
            'button[action=print-submit]': {
                click: this.onSubmitButtonClick
            },
            'button[action=print-cancel]': {
                click: this.onCancelButtonClick
            },
            'cwn2-btn-print-format-combo': {
                select: this.onFormatSelect
            },
            'cwn2-button-print': {
                click: this.onClick
            }
        });
    },

    onClick: function() {
        var mapPanel = CWN2.app.layout.mapPanel,
            win = this.getWin(),
            button = this.getButton(),
            me = this;

        if (!win) {
            win = Ext.create('CWN2.button.Print.Window', {
            });
        }
        this.showHideWin(win, mapPanel);

    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            this.setFieldValues();
            this.enableFieldSets();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    },

    setFieldValues: function() {
        var widthField = this.getWidth(),
            heightField = this.getHeight(),
            titleField = this.getTitle();
        if (widthField.value === 1) {
            widthField.setValue(CWN2.app.map.div.scrollWidth);
        }
        if (heightField.value === 1) {
            heightField.setValue(CWN2.app.map.div.scrollHeight);
        }
        if (titleField.value === null || titleField.value === "") {
            titleField.setValue(CWN2.app.layout.mapTitle);
        }
    },

    enableFieldSets: function() {
        var fileType = this.getFormat().value;
        if (fileType === "png") {
            this.getPngFieldSet().enable();
            this.getPdfFieldSet().disable();
        } else {
            this.getPngFieldSet().disable();
            this.getPdfFieldSet().enable();
        }
    },

    onFormatSelect: function() {
        this.enableFieldSets();
    },


    onCancelButtonClick: function() {
        this.getWin().hide();
    },

    onSubmitButtonClick: function(button, e, eOpts) {
        var me = this,
            win = this.getWin(),
            fileType = this.getFormat().value,
            width = this.getWidth().value,
            height = this.getHeight().value,
            title = this.getTitle().value || null,
            scale = this.getScale().value,
            orientation = this.getOrientation().value,
            pageSize = this.getPageSize().value;


        if (fileType === "pdf") {
            var ratio = CWN2.app.map.div.scrollHeight/CWN2.app.map.div.scrollWidth;
            switch (pageSize) {
                case "A4":
                    if (orientation === "portrait") {
                        width = 900;
                        height = parseInt(width*ratio);
                    } else {
                        height = 800;
                        width = parseInt(height/ratio)
                    }
                    break;
                case "A3":
                    if (orientation === "portrait") {
                        width = 1400;
                        height = parseInt(width*ratio);
                    } else {
                        height = 1150;
                        width = parseInt(height/ratio)
                    }
                    break;
                case "A5":
                    if (orientation === "portrait") {
                        width = 750;
                        height = parseInt(width*ratio);
                    } else {
                        height = 600;
                        width = parseInt(height/ratio)
                    }
                    break;
            }

        }

        // costruisco configurazione
        var data = {
            printConfig: {
                fileType : fileType,
                title: title,
                width : width,
                height : height,
                pageSize : pageSize,
                orientation : orientation
            },
            mapOptions: {
                projection : CWN2.app.map.projection,
                extent : CWN2.app.map.getExtent().toString(),
                center : {
                    lon: CWN2.app.map.center.lon,
                    lat: CWN2.app.map.center.lat
                },
                zoom : CWN2.app.map.zoom,
                flagSameScale : scale,
                scale: CWN2.app.map.getScale()
            },
            baseLayers: [
                CWN2.app.map.layerManager.getActiveBaseLayerConfig()
            ],
            layers: CWN2.app.map.layerManager.overlayLayersConfig
        };

        CWN2.loadingScreen = Ext.getBody().mask('Preparazione Stampa', 'loadingscreen');

        // chiamo servizio di stampa della mappa
        CWN2.Util.ajaxRequest({
            type: "JSON",
            url: "/geoservices/REST/gv_print/print",
            callBack: function(response) {
                //CWN2.loadingScreen = Ext.getBody().mask('Preparazione Stampa', 'loadingscreen');
                var exception = {};
                if (!response ) {
                    exception.message = response.responseText;
                    exception.level = 2;
                    CWN2.Util.handleException(exception);
                    return;
                }
                if (response.success === false) {
                    exception.message = response.message;
                    exception.level = 2;
                    CWN2.Util.handleException(exception);
                    return;
                }
                CWN2.Util.log('Preparato file di stampa: ' + response.url);
                var strWindowFeatures = "menubar=yes,location=no,resizable=no,scrollbars=no,status=no";
                var popup = window.open(response.url, '', strWindowFeatures);
                popup.focus();
                win.hide();
            },
            jsonData: data
        });

        if (fileType === "pdf") {
            // chiamo servizio di stampa della legenda
            CWN2.Util.ajaxRequest({
                type: "JSON",
                url: "/geoservices/REST/gv_print/print_legend",
                callBack: function(response) {
                    var exception = {};
                    if (!response ) {
                        exception.message = response.responseText;
                        exception.level = 2;
                        CWN2.Util.handleException(exception);
                        return;
                    }
                    if (response.success === false) {
                        exception.message = response.message;
                        exception.level = 2;
                        CWN2.Util.handleException(exception);
                        return;
                    }
                    Ext.each(response.url, function(url,index) {
                        //CWN2.Util.log('Preparato file di stampa della legenda: ' + url);
                        var strWindowFeatures = "menubar=yes,location=no,resizable=no,scrollbars=no,status=no";
                        window.open(url, '', strWindowFeatures);
                        win.hide();
                    });


                },
                jsonData: data
            });
        }
    }

});
Ext.define('CWN2.button.QpgTematismi', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-qpgtematismi',

    constructor: function(config) {
        var btnOptions = config.options;

        this.config = config;
        this.superclass.constructor.call(this, {
            id: "qpgtematismi",
            tooltip: CWN2.I18n.get("Tematismi"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : "tematismi",
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            pressed: false
        });
    }
});

Ext.define('CWN2.button.QpgTematismi.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-btn-qpgtematismi-win',
    closeAction: 'hide',
    title: CWN2.I18n.get("Modifica Tematismo"),
    height: 450,
    width: 350,
    layout: "fit",
    resizable: false,

    constructor: function(config) {
        var me = this;

        this.items = [

            {
                xtype: 'cwn2-btn-qpgtematismi-panel',
                tematismi: config.tematismi
            }
        ];

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.QpgTematismi.Panel', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-qpgtematismi-panel',
    height: "auto",
    width: "auto",
    frame: true,
    buttons: [
        {
            text: CWN2.I18n.get("Ricalcola Classi"),
            action: "qpgtematismi-recalc"
        },
        {
            text: CWN2.I18n.get("Modifica Tema"),
            action: "qpgtematismi-submit"
        }
/*
        ,{
            text: CWN2.I18n.get("Annulla"),
            action: "qpgtematismi-cancel"
        }
*/
    ],
    autoScroll: true,
    constructor: function(config) {
        this.items = [
            {
                xtype: 'cwn2-btn-qpgtematismi-temi-combo',
                tematismi: config.tematismi
            },
            {
                xtype: 'cwn2-btn-qpgtematismi-tipo-combo',
                tematismo: config.tematismi[0]
            },
            {
                xtype: 'cwn2-btn-qpgtematismi-classi-combo',
                tematismo: config.tematismi[0]
            },
            {
                xtype: 'cwn2-btn-qpgtematismi-scala-colore-combo',
                tematismo: config.tematismi[0]
            },
            {
                xtype: 'cwn2-btn-qpgtematismi-grid-panel',
                tematismo: config.tematismi[0]
            }
        ];
        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.QpgTematismi.TemiCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-qpgtematismi-temi-combo",
    fieldLabel: 'Tematismo',
    labelWidth: 70,
    mode: 'local',
    typeAhead: true,
    triggerAction: 'all',
    valueField: "idTema",
    displayField: "descrizione",
    width: 300,
    constructor: function(config) {
        Ext.define('QpgTematismi', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'idTema', type: 'number'},
                {name: 'descrizione', type: 'string'}
            ]
        });
        this.store = Ext.create('Ext.data.Store', {
            model: 'QpgTematismi',
            data: {"tematismi": config.tematismi},
            proxy: {
                type: 'memory',
                reader: {
                    type: 'json',
                    root: 'tematismi'
                }
            }
        });
        this.superclass.constructor.call(this);
        this.setValue(this.getStore().getAt(0).data.descrizione);
    }
});

Ext.define('CWN2.button.QpgTematismi.TipoCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-qpgtematismi-tipo-combo",
    fieldLabel: 'Tipo',
    labelWidth: 70,
    mode: 'local',
    typeAhead: true,
    triggerAction: 'all',
    valueField: "id",
    displayField: "tipo",
    width: 300,
    constructor: function(config) {

        this.store = [
            [1, "Uguale Ampiezza degli Intervalli"],
            [2, "Uguale numero di occorrenze (quantili)"],
            [3, "Personalizzata"]
        ];

        this.superclass.constructor.call(this);
        this.setValue(config.tematismo.idTipoClassificazione);
    }
});

Ext.define('CWN2.button.QpgTematismi.ClassiCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-qpgtematismi-classi-combo",
    fieldLabel: 'Num. Classi',
    labelWidth: 70,
    mode: 'local',
    typeAhead: true,
    triggerAction: 'all',
    //valueField: "numClassi",
    //displayField: "numClassi",
    width: 200,
    constructor: function(config) {
        this.store = [
            [2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9]
        ];

        this.superclass.constructor.call(this);
        this.setValue(config.tematismo.numClassi);
    }
});

Ext.define('CWN2.button.QpgTematismi.ScalaColoreCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-qpgtematismi-scala-colore-combo",
    fieldLabel: 'Scala Colore',
    labelWidth: 70,
    mode: 'local',
    typeAhead: true,
    triggerAction: 'all',
    width: 200,
    constructor: function(config) {
        this.store = [
            ["Rosso","Rosso"],["Verde","Verde"],["Blu","Blu"]
            //,["Random","Random"]
        ];

        this.superclass.constructor.call(this);
        this.setValue(config.tematismo.scalaColore);
    }
});

Ext.define('CWN2.button.QpgTematismi.GridPanel', {

    extend: 'Ext.grid.Panel',
    alias: "widget.cwn2-btn-qpgtematismi-grid-panel",

    constructor: function(config) {


        function getRenderIcon(value, metaData, record) {
            return "<img id='legend_img_" + record.internalId + "' src='" + record.data.legendIcon + "' >";
        }

        Ext.define('QpgTematismiGridClassi', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'legendIcon', type: 'string'},
                {name: 'from', type: 'number'},
                {name: 'to', type: 'number'},
                {name: 'count', type: 'number'}
            ]
        });

        var store = Ext.create('Ext.data.Store', {
            model: 'QpgTematismiGridClassi',
            data: {"classes": config.tematismo.legendClasses},
            proxy: {
                type: 'memory',
                reader: {
                    type: 'json',
                    root: 'classes'
                }
            }
        });


        this.superclass.constructor.call(this, {
            store: store,
            viewConfig: {
                forceFit: true
            },
            width: 230,
            height: 250,
            margin: '15 0 0 0',
            title: null,
            hideHeaders: true,
            disableSelection: true,
            columns: [
                {
                    xtype: 'actioncolumn',
                    dataIndex: "legendIcon",
                    renderer: getRenderIcon,
                    width: 30
                },
                {
                    dataIndex: "from",
                    editor: {
                        xtype:'numberfield',
                        allowBlank:false
                    },
                    renderer :  function(val) {
                        if (config.tematismo.separatoreDecimale === ",") {
                            numeral.language('it');
                        } else {
                            numeral.language('en');
                        }
                        return numeral(val).format('0000.00');
                    },
                    width: 60
                },
                {
                    dataIndex: "to",
                    editor: {
                        xtype:'numberfield',
                        allowBlank:false
                    },
                    renderer :  function(val) {
                        if (config.tematismo.separatoreDecimale === ",") {
                            numeral.language('it');
                        } else {
                            numeral.language('en');
                        }
                        return numeral(val).format('0000.00');
                    },
                    width: 60
                },
                {
                    dataIndex: "count",
                    renderer :  function(val) {
                        return "(" + val + ")";
                    },
                    width: 60
                }
            ],
            //autoScroll: true,
            frame: true,
            plugins: [
                Ext.create('Ext.grid.plugin.CellEditing', {
                    clicksToEdit: 1
                })
            ]
        });

        var grid = this;

/*        this.on('edit', function(editor, e) {
            // modifico il valore della classe adiacente
            if (e.colIdx === 1 && e.rowIdx > 0) {
                var record = grid.getView().getRecord(grid.getView().getNode(e.rowIdx-1));
                record.set("to",e.value)
            }
            if (e.colIdx === 2 && e.rowIdx < e.store.data.length) {
                var record = grid.getView().getRecord(grid.getView().getNode(e.rowIdx+1));
                record.set("from",e.value)
            }
        });*/
    }



});

// CONTROLLER
Ext.define('CWN2.controller.button.qpgtematismi', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.QpgTematismi',
        'CWN2.button.QpgTematismi.GridPanel'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-qpgtematismi'
        },
        {
            ref: 'win',
            selector: 'cwn2-btn-qpgtematismi-win'
        },
        {
            ref: 'panel',
            selector: 'cwn2-btn-qpgtematismi-panel'
        },
        {
            ref: 'gridPanel',
            selector: 'cwn2-btn-qpgtematismi-grid-panel'
        },
        {
            ref: 'temi',
            selector: 'cwn2-btn-qpgtematismi-temi-combo'
        },
        {
            ref: 'tipo',
            selector: 'cwn2-btn-qpgtematismi-tipo-combo'
        },
        {
            ref: 'classi',
            selector: 'cwn2-btn-qpgtematismi-classi-combo'
        },
        {
            ref: 'scalaColore',
            selector: 'cwn2-btn-qpgtematismi-scala-colore-combo'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.qpgtematismi: init');

        this.control({
            'cwn2-button-qpgtematismi': {
                click: this.onClick
            },
            'cwn2-btn-qpgtematismi-temi-combo': {
                select: this.onThemesSelect
            },
            'cwn2-btn-qpgtematismi-grid-panel': {
                edit: this.onGridEdit
            },
            'button[action=qpgtematismi-recalc]': {
                click: this.onRecalcButtonClick
            },
            'button[action=qpgtematismi-submit]': {
                click: this.onSubmitButtonClick
            }

        });
    },

    onGridEdit: function(editor, e) {
        var me = this;
        var grid = this.getGridPanel();
        if (e.colIdx === 1 && e.rowIdx > 0) {
            var record = grid.getView().getRecord(grid.getView().getNode(e.rowIdx-1));
            if (record && record.data.to !== e.value) {
                record.set("to",e.value);
            }
        }
        if (e.colIdx === 2 && e.rowIdx < e.store.data.length) {
            var record = grid.getView().getRecord(grid.getView().getNode(e.rowIdx+1));
            if (record && record.data.from !== e.value) {
                record.set("from", e.value);
            }
        }

        if (this.checkChangedBounds()) {
            // imposto tipo personalizzato in combo
            this.getTipo().setValue(3);
        }

    },


    checkChangedBounds: function() {
        var me = this;

        var records = this.getGridPanel().getStore().getRange();
        var oldData = this.getTematismo(this.selectedTheme).legendClasses;
        var changed = false;

        Ext.each(records, function(record, index) {
            if (record.data.from !== oldData[index].from || record.data.to !== oldData[index].to) {
                changed = true;
            }
        });

        return changed;

    },


    calculateStats: function (tematismo) {
        var records = this.getGridPanel().getStore().getRange();
        var bounds = []
        Ext.each(records, function (record, index) {
            if (index === 0) {
                bounds.push(record.data.from);
            }
            bounds.push(record.data.to);
        });
        CWN2.QPG.calculateStats(tematismo, bounds);
    },

    onRecalcButtonClick: function() {
        var me = this;

        var tema = this.getTematismo(this.selectedTheme);

        var tematismo = {};

        // imposto proprietà
        tematismo.tipoTematismo = tema.tipoTematismo;
        tematismo.descrizione = tema.descrizione;
        tematismo.valori = tema.valori;
        tematismo.separatoreDecimale = tema.separatoreDecimale;
        tematismo.livello = Ext.clone(tema.livello);
        tematismo.idTipoClassificazione = this.getTipo().getValue();
        tematismo.numClassi = this.getClassi().getValue();
        tematismo.scalaColore = this.getScalaColore().getValue();

        // calcolo statistiche
        this.calculateStats(tematismo);

        // chiamo servizio di scrittura SLD
        CWN2.Util.ajaxRequest({
            type: "JSON",
            url: CWN2.Globals.RL_CREATE_SLD_SERVICE,
            callBack: function (response) {
                CWN2.QPG.loadQPGLayer(tematismo, response.data.sldUrl);
                // ricarico panel grid
                me.reloadGridPanel(tematismo);
            },
            jsonData: {"sldBody": tematismo.stat.sldBody, "sldCleanBody": ""},
            disableException: true
        });

    },


    onSubmitButtonClick: function() {
        var me = this;

        var tematismo = this.getTematismo(this.selectedTheme);

        // imposto proprietà modificate
        tematismo.idTipoClassificazione = this.getTipo().getValue();
        tematismo.numClassi = this.getClassi().getValue();
        tematismo.scalaColore = this.getScalaColore().getValue();

        // calcolo statistiche
        this.calculateStats(tematismo);

        // chiamo servizio di scrittura SLD
        CWN2.Util.ajaxRequest({
            type: "JSON",
            url: CWN2.Globals.RL_CREATE_SLD_SERVICE,
            callBack: function (response) {
                // calcolo rules
                tematismo.layerConfig.classes = CWN2.QPG.getRules(tematismo, "http://geoservizi.regione.liguria.it/geoserver/QPG_TEMI/", response.data.sldUrl);
                // cambio stylemap
                tematismo.olLayer.styleMap = CWN2.LayerFactory.createVectorStyleMap(tematismo.layerConfig);
                // cambio url
                tematismo.olLayer.url = "http://geoservizi.regione.liguria.it/geoserver/QPG_TEMI/wms?VIEWPARAMS=ID_RICHIESTA:" + tematismo.idRichiesta + ";ID_TEMA:" + tematismo.idTema + "&SLD=" + response.data.sldUrl;
                //refresh layer
                tematismo.olLayer.redraw(true);
                //refresh grid panel
                me.reloadGridPanel(tematismo);
            },
            jsonData: {"sldBody": tematismo.stat.sldBody, "sldCleanBody": ""},
            disableException: true
        });
    },

    getTematismo: function (idTema) {
        var tematismo;

        var tematismi = CWN2.app.configuration.qpgRequest.tematismi;
        Ext.each(tematismi, function(tema) {
            if (tema.idTema === idTema) {
                tematismo = tema;
                return false;
            }
        });
        return tematismo;
    },

    onThemesSelect: function(combo, records, eOpts) {
        var me = this;

        this.selectedTheme = records[0].data.idTema;

        var tematismo = this.getTematismo(records[0].data.idTema);

        // aggiorno le combo
        me.getTipo().setValue(tematismo.idTipoClassificazione);
        me.getClassi().setValue(tematismo.numClassi);
        me.getScalaColore().setValue(tematismo.scalaColore);

        // ricarico panel grid
        this.reloadGridPanel(tematismo);
    },

    reloadGridPanel: function(tematismo) {
        var me = this;
        Ext.suspendLayouts();
        var panel = this.getPanel();
        var gridPanel = this.getGridPanel();
        panel.remove(gridPanel);
        panel.add({
            xtype: 'cwn2-btn-qpgtematismi-grid-panel',
            tematismo: tematismo
        });

        Ext.resumeLayouts(true);
    },

    onClick: function() {
        var win = this.getWin(),
            button = this.getButton(),
            me = this;

        var tematismi = CWN2.app.configuration.qpgRequest.tematismi;
        var flagTematismi = false;
        Ext.each(tematismi, function(tematismo) {
            if (tematismo.idTipoClassificazione > 0) {
                flagTematismi = true;
                return false;
            }
        });
        if (flagTematismi) {
            if (!win) {
                win = Ext.create('CWN2.button.QpgTematismi.Window', {
                    tematismi: tematismi
                });
            }
            this.showHideWin(win, CWN2.app.layout.mapPanel);
        } else {
            CWN2.Util.msgBox("Nessun tematismo editabile");
            return;
        }
        this.selectedTheme = tematismi[0].idTema;

    },

    selectedTheme: null,

    showHideWin: function(win, mapPanel) {
    if (!win.isVisible()) {
        win.show();
        win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
    } else {
        win.hide();
    }
}
});




Ext.define('CWN2.button.RemoveLayers', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-removelayers',

    constructor: function(config) {
        var btnOptions = config.options,
            id = "removelayers",
            map = CWN2.app.map;

        this.config = config;

        this.superclass.constructor.call(this, {
            tooltip: CWN2.I18n.get("Togli Livelli"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            pressed: false,
            id: id,
            handler: function() {

            }
        });

    }
});

Ext.define('CWN2.button.RemoveLayers.GridPanel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.cwn2-removelayers-grid',
    id: "remove-layer-panel",
    disableSelection: true,
    header: false,
    hideHeaders: true,
    columns: [
        {
            dataIndex: "name",
            renderer: function(id) {
                return "<input name='" + id + "' id='rm_check_" + id + "' type='checkbox' >";
            },
            width: 25
        },
        {
            dataIndex: "legend",
            renderer: function(legend, metaData, record) {
                var label = record.data.legendLabel;
                return "<div>" + label + " </div>";
            },
            width: 275
        }
    ],
    autoScroll: true,
    width: 320,
    frame: true,

    constructor: function(config) {
        this.store = config.store;

        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.RemoveLayers.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-removelayers-win',
    title: CWN2.I18n.get("Seleziona i livelli da eliminare"),
    height: 300,
    width: 360,
    layout: "fit",
    resizable: false,
    closable: false,
    closeAction: "hide",

    constructor: function(config) {
        this.items = [
            {
                xtype: 'cwn2-removelayers-grid',
                store: config.store
            }
        ];
        this.buttons = config.buttons;

        this.superclass.constructor.call(this);
    }
});

// CONTROLLER
Ext.define('CWN2.controller.button.removelayers', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.RemoveLayers',
        'CWN2.button.RemoveLayers.Window'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-removelayers'
        },
        {
            ref: 'win',
            selector: 'cwn2-removelayers-win'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.removelayers: init');

        this.control({
            'cwn2-button-removelayers': {
                click: this.onClick
            },
            'button[action=removelayers-submit]': {
                click: this.onSubmitButtonClick
            },
            'button[action=removelayers-cancel]': {
                click: this.onCancelButtonClick
            }
        });
    },

    onSubmitButtonClick: function() {
        var rmLayerArray = [];
        Ext.each(CWN2.app.map.layerManager.getLayersConfig(), function(layer) {
            var check = window.document.getElementById("rm_check_" + layer.name);
            if (check && check.checked) {
                rmLayerArray.push(layer.name);
            }
        });
        // aggiorno la applicazione
        CWN2.app.map.layerManager.remove(rmLayerArray);
        // nascondo la finestra
        this.getWin().hide();
    },

    onCancelButtonClick: function() {
        this.getWin().hide();
    },

    onClick: function() {
        var mapPanel = CWN2.app.layout.mapPanel,
            win = this.getWin(),
            button = this.getButton(),
            me = this;

        if (!win) {
            win = Ext.create('CWN2.button.RemoveLayers.Window', {
                store: CWN2.app.map.layerManager.getLayerStore("overlay"),
                buttons: [
                    {
                        action: "removelayers-submit",
                        text: CWN2.I18n.get("Rimuovi")
                    },
                    {
                        action: "removelayers-cancel",
                        text: CWN2.I18n.get("Annulla")
                    }
                ]
            });
        }
        this.showHideWin(win, mapPanel);

    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    }

});Ext.define('CWN2.button.Risknat', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-risknat',

    constructor: function(config) {
        var btnOptions = config.options,
            id = "risknat";

        this.config = config;

        this.superclass.constructor.call(this, {
            tooltip: CWN2.I18n.get("Caricamento Livelli Risknat"),
            pressed: false,
            id: id,
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26
        });

    }
});

Ext.define('CWN2.button.Risknat.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-risknat-win',
    title: CWN2.I18n.get("Caricamento Livelli Risknat"),
    height: 205,
    width: 335,
    resizable: false,
    layout: "fit",
    closeAction: "hide",
    buttons: [
        {
            text: CWN2.I18n.get("Carica"),
            action: "risknat-submit"
        },
        {
            text: CWN2.I18n.get("Annulla"),
            action: "risknat-cancel"
        }
    ]
});

Ext.define('CWN2.button.Risknat.TabPanel', {
    extend: 'Ext.tab.Panel',
    alias: 'widget.cwn2-btn-risknat-tab-panel',
    activeTab: 0,
    bodyBorder: false,
    deferredRender: false,
    layoutOnTabChange: true,
    border: false,
    flex: 1,
    plain: true
});

Ext.define('CWN2.button.Risknat.Target', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-risknat-target-panel',
    frame: true,
    labelWidth: 1,
//    bodyStyle: "padding:10px 5px 0",
    height: 215,
    type: 'target'
});

Ext.define('CWN2.button.Risknat.Aree', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.cwn2-btn-risknat-aree-panel',
    frame: true,
    labelWidth: 1,
    height: 215,
    type: 'aree'
});


Ext.define('CWN2.button.Risknat.DatasetCombo', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-risknat-dataset-combo",
    mode: 'remote',
    typeAhead: true,
    triggerAction: 'all',
    value: "Scegli un dataset...",
    valueField: "codice",
    displayField: "label",
    margin: '10 0 0 0',

    width: 300,
    constructor: function(config) {
        var url = "/geoservices/REST/risknat/ds_list?type=" + config.type;
        Ext.define('DatasetModel', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'codice', type: 'integer'},
                {name: 'label', type: 'string'},
                {name: 'extent', type: 'string'}
            ]
        });
        this.store = Ext.create('Ext.data.Store', {
            fields: [
                'codice',
                'label',
                'extent'
            ],
            proxy: {
                type: 'ajax',
                url: url,
                reader: {
                    type: 'json',
                    root: 'dataset'
                },
                listeners: {
                    exception: {
                        fn: function (el, response, operation, eOpts) {
                            var exception = {};
                            exception.message = "Errore caricamento dataset";
                            exception.level = 2;
                            CWN2.Util.handleException(exception);
                        }
                    }
                }
            },
            autoLoad: true
        });
        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.Risknat.DatasetComboAree', {
    extend: 'Ext.form.field.ComboBox',
    alias: "widget.cwn2-btn-risknat-dataset-combo-aree",
    mode: 'local',
    typeAhead: true,
    triggerAction: 'all',
    value: "Scegli un dataset...",
    valueField: "codice",
    displayField: "label",
    margin: '10 0 0 0',

    width: 300,
    constructor: function(config) {
        var url = "/geoservices/REST/risknat/ds_list?type=" + config.type;
        Ext.define('DatasetModel', {
            extend: 'Ext.data.Model',
            fields: [
                {name: 'codice', type: 'integer'},
                {name: 'label', type: 'string'},
                {name: 'extent', type: 'string'}
            ]
        });
        this.store = Ext.create('Ext.data.Store', {
            fields: [
                'codice',
                'label',
                'extent'
            ],
            proxy: {
                type: 'ajax',
                url: url,
                reader: {
                    type: 'json',
                    root: 'dataset'
                },
                listeners: {
                    exception: {
                        fn: function (el, response, operation, eOpts) {
                            var exception = {};
                            exception.message = "Errore caricamento dataset";
                            exception.level = 2;
                            CWN2.Util.handleException(exception);
                        }
                    }
                }
            },
            autoLoad: true
        });
        this.superclass.constructor.call(this);
    }
});

Ext.define('CWN2.button.Risknat.TargetSubmit', {
    extend: 'Ext.button.Button',
    alias: "widget.cwn2-btn-risknat-target-submit",
    text: "Carica..."
});

// CONTROLLER
Ext.define('CWN2.controller.button.risknat', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.Risknat'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-risknat'
        },
        {
            ref: 'win',
            selector: 'cwn2-risknat-win'
        },
        {
            ref: 'datasetCombo',
            selector: 'cwn2-btn-risknat-dataset-combo'
        },
        {
            ref: 'datasetComboAree',
            selector: 'cwn2-btn-risknat-dataset-combo-aree'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.risknat: init');

        this.control({
            'cwn2-button-risknat': {
                click: this.onClick
            },
            'button[action=risknat-submit]': {
                click: this.onSubmitButtonClick
            },
            'button[action=risknat-cancel]': {
                click: this.onCancelButtonClick
            }
        });
    },

    onSubmitButtonClick: function() {
        var activeTab = Ext.ComponentQuery.query('cwn2-btn-risknat-tab-panel')[0].getActiveTab();

        var me = this,
            dsCombo = (activeTab.type === "target")? this.getDatasetCombo() : this.getDatasetComboAree(),
            id_dataset = dsCombo.value;


        if (isNaN(parseInt(id_dataset))) {
            Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), CWN2.I18n.get("Nessun Dataset selezionato"));
        } else {
            var label = dsCombo.findRecordByValue(id_dataset).data["label"];
            var extent = dsCombo.findRecordByValue(id_dataset).data["extent"];
            // carico layer
            switch (activeTab.type) {
                case "target":
                    me.caricaTarget(id_dataset,label);
                    break;
                case "aree":
                    me.caricaAree(id_dataset,label);
                    break;
            }

            // faccio eventuale zoom
            if (Ext.getCmp('risknat-zoom-checkbox').value) {
                CWN2.app.map.zoomToExtent(OpenLayers.Bounds.fromString(CWN2.Util.transformStrBounds("EPSG:3003", CWN2.app.map.projection, extent)));
            }

            this.getWin().hide();
        }


    },

    caricaAree: function(id_dataset,label) {
        var me = this,
            button = this.getButton();


        //var wmsUrl = "http://geoservizi.regione.liguria.it/geoserver/RISKNAT/wms?"
        //var wmsUrl = "http://geoservizi.datasiel.net:8080/geoserver/RISKNAT/wms?";
        var wmsUrl = button.config.options.serviceUrl || "http://geoservizi.datasiel.net:8080/geoserver/RISKNAT/wms?";

        wmsUrl += "VIEWPARAMS=ID_DATASET:" + id_dataset
        var layerName = "AREE_DS" + id_dataset;

/*
        var value = "" + id_dataset + "";
        var sld = CWN2.WmsSldHiliter.getStyle({
            layers: layerName,
            geomType: ["POLYGON"],
            fields: "ID_DATASET",
            values: [value]
        });
*/

        CWN2.app.map.layerManager.addLayers(
            {
                type: "WMS",
                name: layerName,
                queryable: true,
                flagGeoserver: true,
                visible: true,
                geomSubType: "POLYGON",
                multiClasse: true,
                wmsParams: {
                    url: wmsUrl,
                    transparent: true,
                    //sld_body: sld,
                    name: "AREE_ANOMALE",
                    format: "image/png8"
                },
                "infoOptions": {
                    "infoUrl": "http://www.cartografiarl.regione.liguria.it/mapfiles/info/repertoriocartografico/RISKNATAreePubblico.xsl",
                    "infoTarget": "info",
                    "infoIdAttr": "ID_AREA",
                    "infoLabelAttr": "ID_AREA"
                },
                legend: {
                    label: label + " - Aree Anomale",
                    icon: "http://geoportale.regione.liguria.it/geoviewer/img/legend/classi.gif"
                }
            }
        );
    },

    caricaTarget: function(id_dataset,label) {
        var me = this,
            button = this.getButton();

        //var wmsUrl = "http://geoservizi.regione.liguria.it/geoserver/RISKNAT/wms?"
        //var wmsUrl = "http://geoservizi.datasiel.net:8080/geoserver/RISKNAT/wms?";
        var wmsUrl = button.config.options.serviceUrl || "http://geoservizi.datasiel.net:8080/geoserver/RISKNAT/wms?";
        var layerName =  "TARGET_DS" + id_dataset;

        CWN2.app.map.layerManager.addLayers(
            {
                type: "WMS",
                name: layerName,
                minScale: "150000",
                queryable: true,
                flagGeoserver: true,
                visible: true,
                multiClasse: true,
                wmsParams: {
                    url: wmsUrl,
                    transparent: true,
                    name: layerName,
                    format: "image/png8"
                },
                "infoOptions": {
                    "infoUrl": "http://www.cartografiarl.regione.liguria.it/mapfiles/info/repertoriocartografico/RisknatTarget.xsl",
                    "infoTarget": "info",
                    "infoIdAttr": "ID",
                    "infoLabelAttr": "CODE_TARGET"
                },
                legend: {
                    label: label + " - Target",
                    icon: "http://geoportale.regione.liguria.it/geoviewer/img/legend/classi.gif"
                }
            }
        );
    },

    onCancelButtonClick: function() {
        this.getWin().hide();
    },

    onClick: function() {
        var mapPanel = CWN2.app.layout.mapPanel,
            win = this.getWin(),
            button = this.getButton(),
            me = this;

        if (!win) {
            var tabs = [];
            tabs.push({
                xtype: 'cwn2-btn-risknat-target-panel',
                title: "Target",
                items: [
                    {
                        xtype: 'cwn2-btn-risknat-dataset-combo',
                        type: "target"
                    },
                    {
                        xtype: 'button',
                        text : 'Info sul Dataset',
                        margin: '10 0 0 0',
                        handler: function() {
                            var id_dataset = me.getDatasetCombo().value;

                            if (isNaN(parseInt(id_dataset))) {
                                Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), CWN2.I18n.get("Nessun Dataset selezionato"));
                            } else {
                                var label = me.getDatasetCombo().findRecordByValue(id_dataset).data["label"];
                                window.open('http://www.cartografiarl.regione.liguria.it/RiskNat/pdf/' + label + '.pdf');
                            }

                        }
                    },
                    {
                        xtype: 'checkbox',
                        boxLabel  : 'Zoom sul Dataset',
                        name      : 'risknat-zoom-checkbox',
                        inputValue: '1',
                        margin: '10 0 0 0',
                        id        : 'risknat-zoom-checkbox'
                    }
                ]
            });
            tabs.push({
                xtype: 'cwn2-btn-risknat-aree-panel',
                title: "Aree Anomale",
                items: [
                    {
                        xtype: 'cwn2-btn-risknat-dataset-combo-aree',
                        type: "aree"
                    },
                    {
                        xtype: 'button',
                        text : 'Info sul Dataset',
                        margin: '10 0 0 0',
                        handler: function() {
                            var id_dataset = me.getDatasetCombo().value;

                            if (isNaN(parseInt(id_dataset))) {
                                Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), CWN2.I18n.get("Nessun Dataset selezionato"));
                            } else {
                                var label = me.getDatasetCombo().findRecordByValue(id_dataset).data["label"];
                                window.open('http://www.cartografiarl.regione.liguria.it/RiskNat/pdf/' + label + '.pdf');
                            }

                        }
                    },
                    {
                        xtype: 'checkbox',
                        boxLabel  : 'Zoom sul Dataset',
                        name      : 'risknat-zoom-checkbox',
                        inputValue: '1',
                        margin: '10 0 0 0',
                        id        : 'risknat-zoom-checkbox'
                    }
                ]
            });
            win = Ext.create('CWN2.button.Risknat.Window', {
                items: [
                    {
                        xtype: 'cwn2-btn-risknat-tab-panel',
                        id: "risknat-tabpanel",
                        items: tabs
                    }
                ]

            });
        }
        this.showHideWin(win, mapPanel);
    },

    showHideWin: function(win, mapPanel) {
        if (win.isVisible()) {
            win.hide();
        } else {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        }
    }


});
Ext.define('CWN2.button.RoutePlanner', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-routeplanner',

    constructor: function(config) {
        this.config = config;

        var btnOptions = config.options,
            id = "routeplanner";

        this.superclass.constructor.call(this, {
            tooltip: CWN2.I18n.get("Calcolo Percorsi"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 20,
            pressed: false,
            id: id
        });

    }
});

Ext.define('CWN2.button.RoutePlanner.Store', {
    extend: 'Ext.data.Store',
    fields: [
        {name: "id"},
        {name: "instructions"},
        {name: "distance"},
        {name: "duration"}
    ]
});

Ext.define('CWN2.button.RoutePlanner.OutputPanel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.cwn2-routeplanner-outputpanel',
    title: "",
    viewConfig: {
        forceFit: true
    },
    split: true,
    hideHeaders: true,
    autoScroll: true,
    width: 220,
    region: "center",
    visible: false,
    frame: true,
    store: Ext.create('CWN2.button.RoutePlanner.Store'),
    columns: [
        {
            id: "instructions",
            dataIndex: "instructions",
            renderer: function(legend, metaData, record) {
                if (record.data.instructions) {
                    return "<div style='white-space:normal'>" + record.data.instructions + " </div>";
                }
                return null;
            },
            width: 250
        },
        {
            id: "distance",
            dataIndex: "distance",
            renderer: function(legend, metaData, record) {
                if (record.data.distance) {
                    return "<div>" + record.data.distance + " </div>";
                }
                return null;
            },
            width: 40
        },
        {
            id: "duration",
            dataIndex: "duration",
            renderer: function(legend, metaData, record) {
                if (record.data.duration) {
                    return "<div>" + record.data.duration + " </div>";
                }
                return null;
            },
            width: 30
        }
    ],
    tbar: [
        new Ext.form.field.Text(
            {
                id: "cwn2-routeplanner-output-panel-title",
                width: 270,
                readOnly: true
            }
        ),
        "->",
        {
            text: "Zoom",
            action: "routeplanner-zoom"
        }
    ]
});

Ext.define('CWN2.button.RoutePlanner.ModeComboBox', {
    extend: 'Ext.form.field.ComboBox',
    alias: 'widget.cwn2-routeplanner-modecombo',
    store: [
        ["DRIVING", CWN2.I18n.get("In auto")],
        ["WALKING", CWN2.I18n.get("A piedi")]
    ],
    autoSelect: true,
    fieldLabel: CWN2.I18n.get("Mezzo"),
    width: 160,
    labelWidth: 35,
    displayField: "descrizione",
    valueField: "codice",
    typeAhead: true,
    mode: "local",
    forceSelection: true,
    triggerAction: "all",
    value: "DRIVING",
    selectOnFocus: true
});

Ext.define('CWN2.button.RoutePlanner.InputPanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.cwn2-routeplanner-inputpanel',
    title: "",
    method: "GET",
    defaults: {
        labelWidth: 15,
        labelPad: 10
    },
    bodyStyle: "padding:5px 5px 0",
    region: "north",
    height: 130,

    constructor: function() {

        this.items = [
            {
                xtype: "container",
                border: false,
                layout: "column",
                anchor: "100%",
                labelWidth: 15,
                items: [
                    {
                        xtype: "cwn2-geocoder-combobox",
                        id: "cwn2-routeplanner-start-combo",
                        width: 300,
                        fieldLabel: "A",
                        labelWidth: 35,
                        map: CWN2.app.map,
                        service: "google"

                    },
                    {
                        xtype: "component",
                        width: 5,
                        html: "&nbsp;"
                    },
                    {
                        xtype: 'button',
                        action: 'routeplanner-start',
                        layout: "form",
                        iconCls: "routeplanner-map",
                        tooltip: CWN2.I18n.get("Seleziona punto di partenza sulla mappa"),
                        enableToggle: true,
                        toggleGroup: "mapInteractToggleGroup"
                    }
                ]
            },
            {
                xtype: "container",
                border: false,
                layout: "column",
                anchor: "100%",
                items: [
                    {
                        xtype: "cwn2-geocoder-combobox",
                        id: "cwn2-routeplanner-end-combo",
                        width: 300,
                        fieldLabel: "B",
                        labelWidth: 35,
                        map: CWN2.app.map,
                        service: "google"

                    },
                    {
                        xtype: "component",
                        width: 5,
                        html: "&nbsp;"
                    },
                    {
                        xtype: 'button',
                        action: 'routeplanner-end',
                        layout: "form",
                        iconCls: "routeplanner-map",
                        tooltip: CWN2.I18n.get("Seleziona punto di arrivo sulla mappa"),
                        enableToggle: true,
                        toggleGroup: "mapInteractToggleGroup"
                    }
                ]
            },
            {
                xtype: "container",
                border: false,
                layout: "column",
                anchor: "100%",
                items: [
                    {
                        xtype: 'cwn2-routeplanner-modecombo'
                    }
                    ,
                    {
                        xtype: "component",
                        width: 145,
                        html: "&nbsp;"
                    }
                ]
            }
        ];

        this.buttons = [
            {
                text: CWN2.I18n.get("Calcola"),
                action: "routeplanner-submit"
            },
            {
                text: CWN2.I18n.get("Reset"),
                action: "routeplanner-reset"
            }
        ];

        this.superclass.constructor.call(this);

    }
});

Ext.define('CWN2.button.RoutePlanner.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-routeplanner-win',
    title: CWN2.I18n.get("Calcolo Percorsi"),
    frame: true,
    width: 370,
    height: 160,
    resizable: false,
    layout: "border",
    closeAction: "hide",
    items: [
        {
            xtype: 'cwn2-routeplanner-inputpanel'                    },
        {
            xtype: 'cwn2-routeplanner-outputpanel'
        }
    ]
});

// CONTROLLER
Ext.define('CWN2.controller.button.routeplanner', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.RoutePlanner',
        'CWN2.button.RoutePlanner.Window',
        'CWN2.button.RoutePlanner.InputPanel',
        'CWN2.button.RoutePlanner.OutputPanel'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-routeplanner'
        },
        {
            ref: 'win',
            selector: 'cwn2-routeplanner-win'
        },
        {
            ref: 'inputPanel',
            selector: 'cwn2-routeplanner-inputpanel'
        },
        {
            ref: 'outputPanel',
            selector: 'cwn2-routeplanner-outputpanel'
        },
        {
            ref: 'outputPanelTitle',
            selector: "#cwn2-routeplanner-output-panel-title"
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.routeplanner: init');

        this.control({
            'cwn2-button-routeplanner': {
                click: this.onClick
            },
            'cwn2-routeplanner-inputpanel': {
                render: this.onRenderInputPanel
            },
            '#cwn2-routeplanner-start-combo': {
                select: this.onStartComboSelect
            },
            '#cwn2-routeplanner-end-combo': {
                select: this.onEndComboSelect
            },
            'cwn2-routeplanner-modecombo': {
                select: this.onModeComboSelect
            },
            'button[action=routeplanner-start]': {
                click: this.onStartButtonClick
            },
            'button[action=routeplanner-end]': {
                click: this.onEndButtonClick
            },
            'button[action=routeplanner-submit]': {
                click: this.onSubmitButtonClick
            },
            'button[action=routeplanner-reset]': {
                click: this.onResetButtonClick
            },
            'button[action=routeplanner-zoom]': {
                click: this.onZoomButtonClick
            },
            'cwn2-routeplanner-outputpanel': {
                select: this.onOutputPanelSelect,
                itemmouseenter: this.onItemMouseEnter,
                itemmouseleave: this.onItemMouseLeave
            }
        });

        this.initRouteMngr();

    },

    onItemMouseEnter: function(elem, record) {
        this.hiliteStep(record, false);
    },

    onItemMouseLeave: function(elem, record) {
        this.hiliteStep(record, true);
    },

    hiliteStep: function hiliteStep(record, unSelect) {
        var id = record.data.id;

        var layer = CWN2.app.map.getLayerByName("routingLayer");
        var foundFeatures = layer.getFeaturesByAttribute("id", id);
        if (foundFeatures.length > 0) {
            var feature = foundFeatures[0];

            // imposto lo stile
            if (unSelect) {
                if (feature.isSelected()) {
                    feature.renderStyle = "select";
                } else {
                    feature.renderStyle = "default";
                }
            } else {
                feature.renderStyle = "hover";
            }
            layer.drawFeature(feature, feature.renderStyle);
            // disegno la popup
            this.showStepPopup(feature);
        }
    },

    onRenderInputPanel: function() {
        var me = this;
        me.clickMapCtrl = new CWN2.Control.GetMapCoordinatesOnClick(function(mapCoord, displayCoord, wgs84Coord, options) {
            var decimalPlaces = 6;
            if (options.type === "start") {
                Ext.ComponentQuery.query("#cwn2-routeplanner-start-combo")[0].setValue("Coordinate: " + displayCoord.lon.toFixed(decimalPlaces) + " , " + displayCoord.lat.toFixed(decimalPlaces));
                me.setOrigin(null, wgs84Coord.lat, wgs84Coord.lon);
            } else {
                Ext.ComponentQuery.query("#cwn2-routeplanner-end-combo")[0].setValue("Coordinate: " + displayCoord.lon.toFixed(decimalPlaces) + " , " + displayCoord.lat.toFixed(decimalPlaces));
                me.setDestination(null, wgs84Coord.lat, wgs84Coord.lon);
            }
        });
        CWN2.app.map.addControl(this.clickMapCtrl);
    },

    onClick: function() {
        var mapPanel = CWN2.app.layout.mapPanel,
            win = this.getWin(),
            button = this.getButton(),
            me = this;

        if (!win) {
            win = Ext.create("CWN2.button.RoutePlanner.Window", {});
        }

        this.showHideWin(win, mapPanel);

    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    },

    onStartComboSelect: function(combo, records) {
        var address,
            lat,
            lon,
            record = records[0];
        try {
            address = record.data.name;
            lat = record.data.lonlat[1];
            lon = record.data.lonlat[0];
            // controllo che il punto ricada dentro il maxExtent
            if (!CWN2.app.map.isPointInMaxExtent(lat, lon)) {
                Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), CWN2.I18n.get("Il punto è fuori dai limiti geografici della mappa"));
                return;
            }
            this.setOrigin(address, lat, lon);
            Ext.ComponentQuery.query("#cwn2-routeplanner-end-combo")[0].focus("", 100);
        } catch (ex) {
            if (ex.name === "PointOutOfMaxExtent") {
                Ext.MessageBox.alert(
                    CWN2.I18n.get("Attenzione"),
                    CWN2.I18n.get("Il punto e' fuori dai limiti geografici della mappa"),
                    function() {
                        combo.setValue("");
                        combo.focus("", 100);
                    }
                );
            }
        }
    },

    onEndComboSelect: function(combo, records) {
        var address,
            lat,
            lon,
            record = records[0];
        try {
            address = record.data.name;
            lat = record.data.lonlat[1];
            lon = record.data.lonlat[0];
            if (!CWN2.app.map.isPointInMaxExtent(lat, lon)) {
                Ext.MessageBox.alert(CWN2.I18n.get("Attenzione"), CWN2.I18n.get("Il punto è fuori dai limiti geografici della mappa"));
                return;
            }
            this.setDestination(address, lat, lon);
        } catch (ex) {
            if (ex.name === "PointOutOfMaxExtent") {
                Ext.MessageBox.alert(
                    "Attenzione",
                    "Il punto e' fuori dai limiti geografici della mappa",
                    function() {
                        combo.setValue("");
                        combo.focus("", 100);
                    }
                );
            }
        }
    },

    onModeComboSelect: function(combo, record) {
        this.setTravelMode(record[0].data.field1);
    },

    onStartButtonClick: function(combo, record) {
        this.clickMapCtrl.activate({type: "start"});
    },

    onEndButtonClick: function(combo, record) {
        this.clickMapCtrl.activate({type: "end"});
    },

    onSubmitButtonClick: function() {

        // registro i callback per la select delle feature OL
        this.registerCallbacks();

        try {
            this.calculate(showResult);
        } catch (exception) {
            CWN2.Util.handleException(exception);
        }

        var me = this;

        function showResult(result) {
            var map = CWN2.app.map,
                outputPanel = me.getOutputPanel();

            // disegna il percorso sulla mappa
            me.drawRouteOnMap(map, result);
            // imposta il titolo
            me.getOutputPanelTitle().setValue(CWN2.I18n.get("Distanza totale") + ": " + result.distance + " - " + CWN2.I18n.get("Durata totale") + ": " + result.duration);
            // aggiorna lo store
            var store = outputPanel.store;
            store.clearData();
            var len = result.steps.length;
            for (var i = 0; i < len; i++) {
                var rec = {
                    "id": i,
                    "instructions": result.steps[i].instructions,
                    "distance": result.steps[i].distance.text,
                    "duration": result.steps[i].duration.text
                };
                store.add(rec);
            }
            // aggiorna la finestra
            outputPanel.setVisible(true);
            me.getWin().setHeight(500);
        }
    },

    onResetButtonClick: function() {
        var outputPanel = this.getOutputPanel();
        Ext.ComponentQuery.query("#cwn2-routeplanner-start-combo")[0].setValue("");
        Ext.ComponentQuery.query("#cwn2-routeplanner-end-combo")[0].setValue("");
        this.reset();
        this.getOutputPanelTitle().setValue(null);
        outputPanel.store.clearData();
        outputPanel.setVisible(false);
        this.getWin().setHeight(160);
    },

    onZoomButtonClick: function() {
        CWN2.app.map.zoomToStringExtent(this.getResult().bounds, "EPSG:4326");
    },

    onOutputPanelSelect: function(sm, record, rowIdx) {
        if (CWN2.app.map.getLayerByName("routingLayer") && CWN2.app.map.getLayerByName("routingLayer").visibility) {
            try {
                CWN2.FeatureSelecter.selectFeature({
                    "layer": CWN2.app.map.getLayerByName("routingLayer"),
                    "attrName": "id",
                    "item": record.data.id,
                    "options": {
                        "zoom": true,
                        "maxZoomLevel": 15,
                        "hiliteOnly": false
                    }
                });
            } catch (ex) {
                CWN2.Util.handleException(ex);
            }
        }
    },

    showStepPopup: function(feature) {
        var popup;

        if (feature.popup) {
            popup = feature.popup;
            // rimuovo la popup dalla mappa
            CWN2.app.map.removePopup(popup);
            feature.popup = null;
        } else {
            popup = new OpenLayers.Popup.Anchored(
                "stepPopup",
                feature.geometry.getBounds().getCenterLonLat(),
                new OpenLayers.Size(200, 60),
                feature.attributes.label,
                null,
                false,
                null
            );
            feature.popup = popup;
            popup.feature = feature;
            popup.panMapIfOutOfView = false;
            // imposto lo sfondo delle popup
            popup.backgroundColor = "#FFFFFF";
            popup.opacity = 0.9;
            // aggiungo la popup alla mappa
            CWN2.app.map.addPopup(popup);
        }

    },

    registerCallbacks: function() {
        var me = this;

        CWN2.app.map.featureManager.registerCallback(
            "onFeatureSelect",
            function(feature) {
                if ((feature.attributes.type === "step") || (feature.attributes.type === "start")) {
                    var grid = me.getOutputPanel();
                    grid.getView().getSelectionModel().suspendEvents();
                    grid.getView().select(feature.attributes.id);
                    grid.getView().getSelectionModel().resumeEvents();
                    grid.getView().focusRow(feature.attributes.id);
                    CWN2.app.map.zoomToFeatures([feature], 15);
                }
            }
        );

        CWN2.app.map.featureManager.registerCallback(
            "onFeatureUnselect",
            function(feature) {
                if ((feature.attributes.type === "step") || (feature.attributes.type === "start")) {
                    var selectedRow = me.getOutputPanel().getView().getSelectionModel().getSelection()[0];
                    if (selectedRow) {
                        me.getOutputPanel().getView().deselect(feature.attributes.id);
                    }
                }
            }
        );

        CWN2.app.map.featureManager.registerCallback(
            "onFeatureOver",
            function(feature) {
                if (feature.attributes.type === "step") {
                    me.showStepPopup(feature);
                }
            }
        );

        CWN2.app.map.featureManager.registerCallback(
            "onFeatureOut",
            function(feature) {
                if (feature.attributes.type === "step") {
                    me.showStepPopup(feature);
                }
            }
        );
    },

    initRouteMngr: function() {

        if (typeof google !== 'undefined') {
            this.travelMode = google.maps.TravelMode.DRIVING;
            this.directionsDisplay = new google.maps.DirectionsRenderer({preserveViewport: true});
        }
    },

    origin: {
        address: null,
        lat: null,
        lon: null,
        latLng: null
    },
    destination: {
        address: null,
        lat: null,
        lon: null,
        latLng: null
    },

    routingLayer: null,

    result: {},

    travelMode: null,

    directionsDisplay: null,

    setOrigin: function(address, lat, lon) {
        this.origin.address = address;
        this.origin.lat = lat;
        this.origin.lon = lon;
        if (lat && lon) {
            this.origin.latLng = new google.maps.LatLng(lat, lon);
        } else {
            this.origin.latLng = null;
        }
    },

    setDestination: function(address, lat, lon) {
        this.destination.address = address;
        this.destination.lat = lat;
        this.destination.lon = lon;
        if (lat && lon) {
            this.destination.latLng = new google.maps.LatLng(lat, lon);
        } else {
            this.destination.latLng = null;
        }
    },

    setTravelMode: function(mode) {
        this.travelMode = mode;
    },

    calculate: function(callback) {
        var me = this;
        var directionsRequest = getRequestParams(),
            directionsService = new google.maps.DirectionsService();

        CWN2.Util.assert(directionsRequest.origin,
            {
                name: "MissingOrigin",
                message: "Partenza deve essere indicata",
                level: 1
            }
        );

        CWN2.Util.assert(directionsRequest.destination,
            {
                name: "MissingDestination",
                message: "Destinazione deve essere indicata",
                level: 1
            }
        );

        directionsService.route(directionsRequest, function(result, status) {
            if (status === google.maps.DirectionsStatus.OK) {
                me.result = processResults(result, callback);
            } else {
                var message = "CWN2.routingMngr.calculate: Servizio Google ha ritornato un errore./n";
                switch (status) {
                    case google.maps.DirectionsStatus.NOT_FOUND:
                        message += "Origine o destinazione non trovati";
                        break;
                    case google.maps.DirectionsStatus.OVER_QUERY_LIMIT:
                        message += "Superato il numero di richieste permesse";
                        break;
                    case google.maps.DirectionsStatus.REQUEST_DENIED:
                        message += "Richiesta rifiutata";
                        break;
                    case google.maps.DirectionsStatus.UNKNOWN_ERROR:
                        message += "Errore del server Google. Riprova successivamente";
                        break;
                    case google.maps.DirectionsStatus.ZERO_RESULTS:
                        message += "Non è stato possibile trovare un percorso dall'origine alla destinazione";
                        break;
                }
                throw {
                    name: "GoogleDirectionsError",
                    message: message,
                    level: 1
                };
            }
        });

        function processResults(directionsResult, callBack) {

            // mappa google
            var map = CWN2.app.map;
            //imposto stradario come baseLayer
            map.layerManager.addBaseLayers([
                {
                    "type": "google_roadmap",
                    "name": "google_roadmap",
                    "legend": {
                        "label": "Google Stradario",
                        "icon": "http://geoportale.regione.liguria.it/geoviewer/img/legend/google.png"
                    },
                    "visible": false,
                    "isBaseLayer": false
                }
            ]);

            var gMap = OpenLayers.Layer.Google.cache[map.id].mapObject;

            // disegno il percorso sulla mappa google
            try {
                me.directionsDisplay.setMap(gMap);
                me.directionsDisplay.setDirections(directionsResult);
            } catch (ex) {
            }

            // imposta l'oggetto result
            var result = setResult(directionsResult);

            // Chiama la funzione di callback
            if (callBack) {
                callBack(result);
            }

            return result;

            function setResult(directionsResult) {
                var i,
                    len,
                    result = {};

                result.origin = directionsResult.routes[0].legs[0].start_address;
                result.destination = directionsResult.routes[0].legs[0].end_address;
                result.copyrights = directionsResult.routes[0].copyrights;
                result.bounds = decodeGoogleBounds(directionsResult.routes[0].bounds);
                result.overview_path = directionsResult.routes[0].overview_path;
                result.distance = directionsResult.routes[0].legs[0].distance.text;
                result.duration = directionsResult.routes[0].legs[0].duration.text;
                result.steps = directionsResult.routes[0].legs[0].steps;

                // imposto l'id delle tappe
                len = result.steps.length;
                for (i = 0; i < len; i++) {
                    result.steps[i].id = i;
                }

                return result;

                // converte un oggetto bounds Google in una stringa
                function decodeGoogleBounds(googleBounds) {
                    return me.extractCoordinates(googleBounds.getSouthWest()) + "," + me.extractCoordinates(googleBounds.getNorthEast());
                }
            }
        }

        function getRequestParams() {
            var start = (me.origin.address) ? me.origin.address : me.origin.latLng,
                end = (me.destination.address) ? me.destination.address : me.destination.latLng,
                unitSystem = google.maps.UnitSystem.METRIC,
                region = "it";

            return {
                origin: start,
                destination: end,
                travelMode: me.travelMode,
                unitSystem: unitSystem,
                region: region
            };
        }
    },

    drawRouteOnMap: function(map, result) {
        var me = this;
        var classes,
            baseLayerConfig;

        //creo la styleMap
        classes = getClasses();
        // creo il layer
        this.routingLayer = CWN2.app.map.layerManager.createVectorLayer({
            name: "routingLayer",
            format: "GeoJSON",
            classes: classes,
            legend: null
        });
        this.routingLayer.setVisibility(true);

        // carico le feature
        CWN2.FeatureLoader.loadFeatures({
            layer: this.routingLayer,
            features: createPointFeatures(result.steps, result.destination),
            url: null,
            "options": {
                "zoom": false,
                "clean": true
            }
        });

        //imposto stradario come baseLayer
        baseLayerConfig = {
            "type": "google_roadmap",
            "name": "google_roadmap",
            "legend": {
                "label": "Google Stradario",
                "icon": "http://geoportale.regione.liguria.it/geoviewer/img/legend/google.png"
            },
            "visible": false,
            "isBaseLayer": false
        };
        CWN2.app.map.layerManager.addBaseLayers([baseLayerConfig]);
        CWN2.app.map.setBaseLayerOnMap("google_roadmap");

        // faccio lo zoom
        var boundsStr = result.bounds;
        CWN2.app.map.zoomToStringExtent(boundsStr, "EPSG:4326");

        // funzione che ritorna lo stile del layer
        function getClasses() {

            var styleMapsStart,
                styleMapsEnd,
                styleMapsSteps,
                classes;

            styleMapsSteps = [
                {
                    "renderIntent": "default",
                    "style": {
                        fillColor: "#3838FF",
                        fillOpacity: 0.5,
                        strokeColor: "#3838FF",
                        strokeOpacity: 1,
                        strokeWidth: 1,
                        pointRadius: 5
                    }
                },
                {
                    "renderIntent": "hover",
                    "style": {
                        fillColor: "#ee9900",
                        fillOpacity: 0.8,
                        strokeColor: "#3838FF",
                        strokeOpacity: 1,
                        strokeWidth: 1,
                        pointRadius: 7
                    }
                },
                {
                    "renderIntent": "select",
                    "style": {
                        fillColor: "#ee9900",
                        fillOpacity: 0.8,
                        strokeColor: "#3838FF",
                        strokeOpacity: 1,
                        strokeWidth: 1,
                        pointRadius: 7
                    }
                }
            ];

            styleMapsStart = [
                {
                    "renderIntent": "default",
                    "style": {
                        "externalGraphic": "http://geoportale.regione.liguria.it/geoviewer/img/icons/numbers/letter_a.png",
                        "graphicWidth": 32,
                        "graphicHeight": 37,
                        "graphicOpacity": 1.0,
                        "graphicXOffset": -16,
                        "graphicYOffset": -37,
                        "graphicTitle": "${label}"
                    }
                }
            ];

            styleMapsEnd = [
                {
                    "renderIntent": "default",
                    "style": {
                        "externalGraphic": "http://geoportale.regione.liguria.it/geoviewer/img/icons/numbers/letter_b.png",
                        "graphicWidth": 32,
                        "graphicHeight": 37,
                        "graphicOpacity": 1.0,
                        "graphicXOffset": -16,
                        "graphicYOffset": -37,
                        "graphicTitle": "${label}"
                    }
                }
            ];

            classes = [
                {
                    "filter": "type = 'start'",
                    "styleMaps": styleMapsStart
                },
                {
                    "filter": "type = 'end'",
                    "styleMaps": styleMapsEnd
                },
                {
                    "filter": "type = 'step'",
                    "styleMaps": styleMapsSteps
                }
            ];

            return classes;
        }

        function createPointFeatures(steps, destinationLabel) {

            var featureStr,
                i,
                len = steps.length,
                coordinates,
                type,
                decimalPlaces = 6;

            featureStr = "{ \"type\": \"FeatureCollection\",\"features\": [";
            for (i = 0; i < len; i++) {
                type = (i === 0) ? "start" : "step";
                coordinates = "[" + me.extractCoordinates(steps[i].start_location) + "]";

                featureStr += "{ \"type\": \"Feature\",";
                featureStr += "\"geometry\": {\"type\": \"Point\", \"coordinates\": " + coordinates + "},";
                featureStr += "\"properties\": {\"label\": \"" + replaceDoubleQuote(steps[i].instructions) + "\",\"type\": \"" + type + "\",\"id\": " + steps[i].id + "}},";
            }
            // punto di arrivo
            if (typeof destinationLabel !== "string") {
                destinationLabel = "Coordinate: " + destinationLabel.Oa.toFixed(decimalPlaces) + " , " + destinationLabel.Na.toFixed(decimalPlaces);
            }
            type = "end";
            coordinates = "[" + me.extractCoordinates(steps[i - 1].end_location) + "]";

            featureStr += "{ \"type\": \"Feature\",";
            featureStr += "\"geometry\": {\"type\": \"Point\", \"coordinates\": " + coordinates + "},";
            featureStr += "\"properties\": {\"label\": \"" + replaceDoubleQuote(destinationLabel) + "\",\"type\": \"" + type + "\"}},";

            featureStr = featureStr.substr(0, featureStr.length - 1);
            featureStr += "]}";
            return Ext.decode(featureStr);

            function replaceDoubleQuote(inStr) {

                if (typeof inStr === "string") {
                    return inStr.replace(/"/g, "\'");
                }
            }
        }

    },

    reset: function() {
        this.directionsDisplay.setMap(null);
        if (this.routingLayer) {
            this.routingLayer.setVisibility(false);
            // levo eventuali popup
            var features = this.routingLayer.features;
            var len = features.length;
            for (var i = 0; i < len; i++) {
                if (features[i].popup) {
                    var popup = features[i].popup;
                    popup.feature = null;
                    CWN2.app.map.removePopup(features[i].popup);
                    features[i].popup.destroy();
                    features[i].popup = null;
                }
            }
        }
        this.origin.address = null;
        this.origin.lat = null;
        this.origin.lon = null;
        this.origin.latLng = null;
        this.destination.address = null;
        this.destination.lat = null;
        this.destination.lon = null;
        this.destination.latLng = null;
    },

    getResult: function() {
        return this.result;
    },

    swapDirection: function() {
        var cacheOrigin = Ext.clone(origin),
            cacheDestination = Ext.clone(destination);
        this.destination = cacheOrigin;
        this.origin = cacheDestination;
    },

    extractCoordinates: function(point) {
        var coord = point.toString().replace('(', '[').replace(')', ']');
        var coordArray = eval(coord);
        return coordArray[1] + "," + coordArray[0];
    }

});



Ext.define('CWN2.button.S3Ricerche', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-s3ricerche',

    constructor: function(config) {
        var btnOptions = config.options;

        this.config = config;

        this.superclass.constructor.call(this, {
            tooltip: (btnOptions && btnOptions.tooltip) ? btnOptions.tooltip : CWN2.I18n.get("Ricerca avanzata"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : btnOptions.id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            id: btnOptions.id
        });
    }
});

// CONTROLLER
Ext.define('CWN2.controller.button.s3ricerche', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.S3Ricerche'
    ],

    refs: [
        {
            ref: 'buttonS3ricerche',
            selector: '#s3ricerche'
        },
        {
            ref: 'buttonS3RicercaPraticaGenioWeb',
            selector: '#s3RicercaPraticaGenioWeb'
        },
        {
            ref: 'win',
            selector: 'cwn2-button-s3ricerche'
        }

    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.s3ricerche: init');

        this.control({
            '#s3ricerche': {
                click: this.onClickS3ricerche
            },
            '#s3RicercaPraticaGenioWeb': {
                click: this.onClickS3RicercaPraticaGenioWeb
            }
        });
    },

    onClickS3ricerche: function() {
        this.createWin(this.getButtonS3ricerche());
    },

    onClickS3RicercaPraticaGenioWeb: function() {
        this.createWin(this.getButtonS3RicercaPraticaGenioWeb());
    },

    createWin: function(button) {
        var mapPanel = CWN2.app.layout.mapPanel,
            width = 400,
            height = 400,
            winId = button.config.options.id + "-win";

        var win = Ext.ComponentQuery.query("#" + winId)[0];
        if (!win) {
            win = Ext.create('CWN2.IframeWindow', {
                url: button.config.options.url,
                id: winId,
                width: width,
                height: height,
                resizable: false,
                hide: true
            });
        }
        this.showHideWin(win, mapPanel);
    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    }
});
Ext.define('CWN2.button.SelectFeature', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-selectfeature',

    constructor: function(config) {
        this.config = config;
        var btnOptions = config.options,
            map = CWN2.app.map,
            id = "selectfeature",
            me = this;

        // instanzio i gestori dei layer di evidenziazione (uno per ogni livello)
        this.layers = btnOptions.idLayer.split(",");
        this.wmsSldHiliter = {};
        for (var i = 0; i < this.layers.length; i++) {
            this.wmsSldHiliter[this.layers[i]] = new CWN2.WmsSldHiliter(map, "_selezione_" + this.layers[i]);
        }

        // Creo il controllo OL per il bottone
        var control = new OpenLayers.Control.WMSGetFeatureInfo({
            layers: null,
            queryVisible: true,
            name: "selectfeature",
            drillDown: true,
            maxFeatures: 1,
            vendorParams: (btnOptions.radius) ? {radius: btnOptions.radius} : null,
            infoFormat: "application/vnd.ogc.gml",
            output: "object",
            eventListeners: {
                getfeatureinfo: function(event) {
                    me.fireEvent("getfeatureinfo", event);
                }
            }
        });

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Seleziona"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : "select",
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            enableToggle: true,
            control: control,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});

Ext.define('CWN2.button.selectFeature.Store', {
    extend: 'Ext.data.Store',
    data: [],
    autoLoad: false,
    fields: [
        {
            name: "ID_LAYER", mapping: "ID_LAYER"
        },
        {
            name: "ID", mapping: "ID"
        },
        {
            name: "LABEL", mapping: "LABEL"
        }
    ]
});

Ext.define('CWN2.button.selectFeature.GridPanel', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.cwn2-selectfeature-grid',
    frame: true,
    width: 300,
    height: 300,
    hideHeaders: true,
    iconCls: "icon-grid",
    store: Ext.create('CWN2.button.selectFeature.Store'),
    columns: [
        {
            header: "ID",
            sortable: true,
            dataIndex: "ID",
            width: 70
        },
        {
            header: "LABEL",
            sortable: true,
            dataIndex: "LABEL",
            width: 200
        },
        {
            xtype: 'actioncolumn',
            header: " ",
            items: [
                {
                    icon: 'http://geoportale.regione.liguria.it/geoviewer/img/silk/delete.png',
                    tooltip: 'Seleziona per cancellare'
                }
            ],
            width: 30
        }
    ]
});

Ext.define('CWN2.button.selectFeature.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-selectfeature-win',
    title: CWN2.I18n.get("Oggetti Selezionati"),
    width: 335,
    height: 360,
    layout: "fit",
    closable: false,
    closeAction: "hide",
    items: [
        Ext.create("CWN2.button.selectFeature.GridPanel")
    ],
    buttons: [
        {
            text: CWN2.I18n.get("Conferma"),
            action: 'selectfeature-submit'
        },
        {
            text: CWN2.I18n.get("Annulla"),
            action: 'selectfeature-cancel'
        }
    ]
});

// CONTROLLER
Ext.define('CWN2.controller.button.selectfeature', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.SelectFeature'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-selectfeature'
        },
        {
            ref: 'win',
            selector: 'cwn2-selectfeature-win'
        },
        {
            ref: 'grid',
            selector: 'cwn2-selectfeature-grid'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.selectfeature: init');

        this.control({
            'cwn2-button-selectfeature': {
                toggle: this.onButtonPress,
                getfeatureinfo: this.onGetFeatureInfo
            },
            'button[action=selectfeature-submit]': {
                click: this.onSubmitButtonClick
            },
            'button[action=selectfeature-cancel]': {
                click: this.onCancelButtonClick
            },
            'cwn2-selectfeature-grid actioncolumn': {
                click: this.onDeleteClick
            }

        });

    },

    onSubmitButtonClick: function() {
        var button = this.getButton(),
            items = this.getGrid().store.data.items;

        if (items.length === 0) {
            alert('Selezionare almeno un oggetto');
            return;
        }
        if (button.config.options && button.config.options.callBacks && button.config.options.callBacks["submit"]) {
            button.config.options.callBacks["submit"](items);
        } else {
            CWN2.Util.log("Funzione di callback 'submit' non definita", 1);
        }
    },

    onCancelButtonClick: function() {
        var button = this.getButton(),
            items = this.getGrid().store.data.items;
        if (button.config.options && button.config.options.callBacks && button.config.options.callBacks["cancel"]) {
            button.config.options.callBacks["cancel"](items,this.getButton());
        } else {
            CWN2.Util.log("Funzione di callback 'cancel' non definita", 1);
        }
    },

    onDeleteClick: function(view, cell, row, col, e) {
        var me = this;
        Ext.MessageBox.confirm(
            CWN2.I18n.get('Conferma'),
            CWN2.I18n.get('Sei sicuro?'),
            function(btn) {
                if (btn === "yes") {
                    var store = Ext.ComponentQuery.query('cwn2-selectfeature-grid')[0].store;
                    store.removeAt(row);
                    me.updateHiliteLayer(store);
                }
            }
        );
    },

    onGetFeatureInfo: function(event) {
        this.updateList(event);
    },

    onButtonPress: function() {
        var mapPanel = CWN2.app.layout.mapPanel,
            win = this.getWin(),
            button = this.getButton(),
            me = this,
            map = CWN2.app.map;

        // costruisco la finestra
        win = this.getWin() || Ext.create("CWN2.button.selectFeature.Window");

        this.showHideWin(win, mapPanel);
    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    },

    updateList: function(event) {
        var button = this.getButton(),
            me = this;

        Ext.each(button.layers, function(idLayer) {
            var featureGroups = event.features;
            Ext.each(featureGroups, function(featureGroup) {
                var features = featureGroup.features;
                Ext.each(features, function(feature) {
                    if (feature.type === idLayer || (feature.gml && feature.gml.featureType === idLayer)) {
                        // se definita la funzione di controllo la eseguo
                        if (button.config.options && button.config.options.callBacks && button.config.options.callBacks["check"]) {
                            // se la funzione di controllo ritorna false esco altrimenti aggiorno store
                            if (!button.config.options.callBacks["check"](feature)) {
                                return false;
                            }
                        }
                        updateStore(feature.attributes, idLayer);
                        return false; // forzo uscita da each
                    }
                });
            });
        });

        function updateStore(attributes, idLayer) {
            var record = buildRecordFromFeatureAttributes(attributes, idLayer);
            var store = Ext.ComponentQuery.query('cwn2-selectfeature-grid')[0].store,
                idValue = record["ID"],
                recordIndex = store.findBy(
                    function(record, id) {
                        return record.get('ID') === idValue;
                    }
                );
            // se già presente in store lo levo altrimenti lo aggiungo
            (recordIndex !== -1) ? store.removeAt(recordIndex) : addRecordToStore(store, record);
            // aggiorno il layer di evidenziazione
            me.updateHiliteLayer(store);
        }

        // Aggiungo il record allo store
        function addRecordToStore(store, rec) {
            if (button.config.options.flagSelezioneSingola) {
                store.removeAll();
            }
            store.add(rec);
        }

        // Costruisce un record da aggiungere alla lista delle feature trovate
        // a partire dalla lista degli attributes della feature
        function buildRecordFromFeatureAttributes(attributes, idLayer) {
            var record = null;
            // prendo idField e labelField da config layer
            var layerConfig = CWN2.app.map.layerManager.getLayerConfigByName(idLayer);
            var idField = layerConfig.infoOptions.infoIdAttr;
            var labelField = layerConfig.infoOptions.infoLabelAttr;
            // se idField non è impostato mando exception
            if (!idField) {
                var exception = {
                    name: 'BadConfiguration',
                    message: 'CWN2.button.selectFeature: infoOptions.infoIdAttr non impostato per layer ' + idLayer,
                    level: 1
                };
                CWN2.util.handleException(exception);
                return null;
            }
            // se labelField è nullo lo imposto a idField
            if (!labelField) {
                labelField = idField;
            }
            // imposto l'oggetto da restituire
            if (attributes[idField]) {
                record = {};
                record.ID_LAYER = idLayer;
                record.ID = attributes[idField];
                if (attributes[labelField]) {
                    record.LABEL = attributes[labelField];
                } else {
                    record.LABEL = attributes[idField];
                    CWN2.Util.log("CWN2.button.selectFeature: valore non trovato per campo ID per layer " + idLayer);
                }
                record.LABEL = attributes[labelField];
            } else {
                CWN2.Util.log("CWN2.button.selectFeature: valore non trovato per campo ID per layer " + idLayer);
            }
            return record;
        }
    },

    updateHiliteLayer: function(store) {
        var elementiSelezionati = store.data.items,
            button = this.getButton(),
            me = this,
            layers = button.layers;

        for (var i = 0; i < layers.length; i++) {
            var layerName = layers[i];
            var layerConfig = CWN2.app.map.layerManager.getLayerConfigByName(layerName);
            var values = [];
            Ext.each(elementiSelezionati, function(record, ind) {
                (record.data["ID_LAYER"] == layerName) ? values.push(record.data["ID"]) : null;
            });
            // Istanzio wmsSldFilter relativo al layer in oggetto
            (values.length > 0 ) ?
                button.wmsSldHiliter[layerName].hiliteFeature({
                    layers: [layerConfig.name],
                    fields: layerConfig.infoOptions.infoIdAttr,
                    values: values
                }) :
                button.wmsSldHiliter[layerName].cleanHiliteLayer(layerName)
        }
    }

});/*global CWN2:false, window:false, OpenLayers:false, Ext:false, GeoExt:false , $:false*/
Ext.define('CWN2.button.SimpleLegend', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-simplelegend',

    constructor: function(config) {
        var btnOptions = config.options;

        this.config = config;

        this.superclass.constructor.call(this, {
            id: "simpleLegend",
            tooltip: "Legenda",
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : "legend",
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            pressed: false
        });

    }
});

Ext.define('CWN2.button.SimpleLegend.Win', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-simplelegend-win',
    title: "Legenda",
    autoScroll: true,
    layout: "fit",
    height: 430,
    width: 260,
    resizable: false,
    closeAction: "hide"
});

Ext.define('CWN2.controller.button.simpleLegend', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.SimpleLegend'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-simplelegend'
        },
        {
            ref: 'win',
            selector: 'cwn2-simplelegend-win'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.simpleLegend: init');

        this.control({
            'cwn2-button-simplelegend': {
                click: this.onClick
            }
        });
    },

    onClick: function() {
        var win = this.getWin(),
            button = this.getButton();

        var noBaseLayerGrid = (button.config.options && button.config.options.noBaseLayerGrid)? button.config.options.noBaseLayerGrid : false;

        if (!win) {
            win = Ext.create('CWN2.button.SimpleLegend.Win', {
                items: [
                    new CWN2.SimpleLegendPanel({
                        flagBtn: true,
                        noBaseLayerGrid: noBaseLayerGrid
                    })
                ]
            });
        }
        this.showHideWin(win, CWN2.app.layout.mapPanel);
    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tr-tr", [-10, 10]);
        } else {
            win.hide();
        }
    }
});
Ext.define('CWN2.button.Transparency', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-transparency',

    constructor: function(config) {
        var btnOptions = config.options;

        this.superclass.constructor.call(this, {
            id: "transparency",
            tooltip: CWN2.I18n.get("Trasparenza"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : "transparency",
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            pressed: false
        });
    }
});

Ext.define('CWN2.button.Transparency.Window', {
    extend: 'Ext.window.Window',
    alias: 'widget.cwn2-transparency-win',

    title: CWN2.I18n.get("Trasparenza"),
    height: 300,
    width: 330,
    layout: "fit",
    resizable: false,

    constructor: function(config) {
        var sliders = [];
        Ext.each(config.layers, function(layer, i) {
            var olLayer = config.mapPanel.map.getLayerByName(layer.data.name);
            sliders.push({
                xtype: "gx_opacityslider",
                layer: olLayer,
                aggressive: true,
                width: 300,
                isFormField: true,
                labelWidth: 150,
                fieldLabel: layer.data.legendLabel
            });
        });

        this.items = [
            {
                xtype: 'panel',
                height: "auto",
                width: "auto",
                frame: true,
                items: sliders,
                autoScroll: true
            }
        ];

        this.superclass.constructor.call(this);
    }
});

// CONTROLLER
Ext.define('CWN2.controller.button.transparency', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.Transparency'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-transparency'
        },
        {
            ref: 'win',
            selector: 'cwn2-transparency-win'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.transparency: init');

        this.control({
            'cwn2-button-transparency': {
                click: this.onClick
            }
        });
    },

    onClick: function() {
        var mapPanel = CWN2.app.layout.mapPanel,
            win = this.getWin(),
            button = this.getButton(),
            me = this;

        if (!win) {
            win = Ext.create('CWN2.button.Transparency.Window', {
                layers: CWN2.app.map.layerManager.getLayerStore("overlay").data.items,
                mapPanel: CWN2.app.layout.mapPanel
            });
        }
        this.showHideWin(win, mapPanel);

    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    }

});Ext.define('CWN2.button.ZoomIn', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-zoomin',

    constructor: function(config) {
        var btnOptions = config.options,
            map = CWN2.app.map,
            id = "zoomin",
            control = new OpenLayers.Control.ZoomBox();

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Zoom In"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            control: control,
            enableToggle: true,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});



Ext.define('CWN2.button.ZoomNext', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-zoomnext',

    constructor: function(config) {
        var btnOptions = config.options,
            btnPanels = config.panels,
            map = CWN2.app.map,
            id = "zoomnext";

        function getNavigationHistoryControl() {
            var historyControl = null,
                controls = map.getControlsByClass("OpenLayers.Control.NavigationHistory");
            if (controls.length === 0) {
                historyControl = new OpenLayers.Control.NavigationHistory();
                map.addControl(historyControl);
            } else {
                historyControl = controls[0];
            }
            return historyControl;
        }

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            tooltip: CWN2.I18n.get("Zoom Successivo"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            disabled: true,
            control: getNavigationHistoryControl().next,
            pressed: false,
            id: id
        }));
    }
});




Ext.define('CWN2.button.ZoomOut', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-zoomout',

    constructor: function(config) {
        var btnOptions = config.options,
            map = CWN2.app.map,
            id = "zoomout",
            control = new OpenLayers.Control.ZoomBox({out: true});

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            id: id,
            tooltip: CWN2.I18n.get("Zoom Out"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            enableToggle: true,
            control: control,
            toggleGroup: "mapInteractToggleGroup"
        }));
    }
});


Ext.define('CWN2.button.ZoomPrevious', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-zoomprevious',

    constructor: function(config) {
        var btnOptions = config.options,
            btnPanels = config.panels,
            map = CWN2.app.map,
            id = "zoomprevious";

        function getNavigationHistoryControl() {
            var historyControl = null,
                controls = map.getControlsByClass("OpenLayers.Control.NavigationHistory");
            if (controls.length === 0) {
                historyControl = new OpenLayers.Control.NavigationHistory();
                map.addControl(historyControl);
            } else {
                historyControl = controls[0];
            }
            return historyControl;
        }

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            tooltip: CWN2.I18n.get("Zoom Precedente"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            disabled: true,
            control: getNavigationHistoryControl().previous,
            pressed: false,
            id: id
        }));
    }
});

Ext.define('CWN2.button.ZoomToInitialExtent', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-zoomtoinitialextent',

    constructor: function(config) {
        var btnOptions = config.options,
            map = CWN2.app.map,
            id = "zoomToInitialExtent",
            control = new CWN2.Control.ZoomToInitialExtent();

        map.addControl(control);

        this.superclass.constructor.call(this, Ext.create('GeoExt.Action', {
            tooltip: CWN2.I18n.get("Zoom alla estensione iniziale"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            pressed: false,
            control: control,
            id: id
        }));
    }
});


Ext.define('CWN2.button.redirect', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-redirect',

    constructor: function(config) {
        var btnOptions = config.options;

        this.config = config;

        this.superclass.constructor.call(this, {
            tooltip: (btnOptions && btnOptions.tooltip) ? btnOptions.tooltip : CWN2.I18n.get("Redirect"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : btnOptions.id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            id: btnOptions.id
        });
    }
});

// CONTROLLER
Ext.define('CWN2.controller.button.redirect', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.redirect'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-redirect'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.redirect: init');

        this.control({
            'cwn2-button-redirect': {
                click: this.onClick
            }
        });
    },

    onClick: function() {
        window.location.href = this.getButton().config.options.url;
    }

});
Ext.define('CWN2.button.window', {
    extend: 'Ext.button.Button',
    alias: 'widget.cwn2-button-window',

    constructor: function(config) {
        var btnOptions = config.options;

        this.config = config;

        this.superclass.constructor.call(this, {
            tooltip: (btnOptions && btnOptions.tooltip) ? btnOptions.tooltip : CWN2.I18n.get("Finestra"),
            iconCls: (btnOptions && btnOptions.iconCls) ? btnOptions.iconCls : btnOptions.id,
            text: (btnOptions && btnOptions.text) ? btnOptions.text : "",
            width: (btnOptions && btnOptions.width) ? btnOptions.width : 26,
            id: btnOptions.id
        });
    }
});

// CONTROLLER
Ext.define('CWN2.controller.button.window', {
    extend: 'Ext.app.Controller',

    views: [
        'CWN2.button.window'
    ],

    refs: [
        {
            ref: 'button',
            selector: 'cwn2-button-window'
        }
    ],

    init: function(application) {
        CWN2.Util.log('CWN2.controller.button.window: init');

        this.control({
            'cwn2-button-window': {
                click: this.onClick
            }
        });
    },

    onClick: function() {
        this.createWin(this.getButton());
    },

    createWin: function(button) {
        var mapPanel = CWN2.app.layout.mapPanel,
            width = button.config.options.winWidth || 600,
            height = button.config.options.winHeight || 400,
            url = button.config.options.url,
            resizable = button.config.options.resizable || false,
            target = button.config.options.target || "panel",
            winId = button.config.options.id + "-win";

        if (!url) {
            CWN2.Util.handleException({
                message: "Url del bottone 'window' non definita",
                level: 1
            })
            return;
        }
        if (target === "panel") {
            var win = Ext.ComponentQuery.query("#" + winId)[0];
            if (!win) {
                win = Ext.create('CWN2.IframeWindow', {
                    url: url,
                    id: winId,
                    width: width,
                    height: height,
                    resizable: resizable,
                    hide: true
                });
            }
            this.showHideWin(win, mapPanel);
        } else {
                window.open(url,"menubar=no,location=no,resizable=no,scrollbars=yes,status=no,width=" + width + ",height=" + height);
        }
    },

    showHideWin: function(win, mapPanel) {
        if (!win.isVisible()) {
            win.show();
            win.alignTo(mapPanel.body, "tl-tl", [10, 10]);
        } else {
            win.hide();
        }
    }
});
